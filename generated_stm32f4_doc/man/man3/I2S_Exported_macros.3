.TH "I2S_Exported_macros" 3 "2020年 八月 7日 星期五" "Version 1.24.0" "STM32F4_HAL" \" -*- nroff -*-
.ad l
.nh
.SH NAME
I2S_Exported_macros
.SH SYNOPSIS
.br
.PP
.SS "宏定义"

.in +1c
.ti -1c
.RI "#define \fB__HAL_I2S_RESET_HANDLE_STATE\fP(__HANDLE__)   ((__HANDLE__)\->State = \fBHAL_I2S_STATE_RESET\fP)"
.br
.RI "Reset I2S handle state "
.ti -1c
.RI "#define \fB__HAL_I2S_ENABLE\fP(__HANDLE__)   (SET_BIT((__HANDLE__)\->Instance\->I2SCFGR, SPI_I2SCFGR_I2SE))"
.br
.RI "Enable the specified SPI peripheral (in I2S mode)\&. "
.ti -1c
.RI "#define \fB__HAL_I2S_DISABLE\fP(__HANDLE__)   (CLEAR_BIT((__HANDLE__)\->Instance\->I2SCFGR, SPI_I2SCFGR_I2SE))"
.br
.RI "Disable the specified SPI peripheral (in I2S mode)\&. "
.ti -1c
.RI "#define \fB__HAL_I2S_ENABLE_IT\fP(__HANDLE__,  __INTERRUPT__)   (SET_BIT((__HANDLE__)\->Instance\->CR2,(__INTERRUPT__)))"
.br
.RI "Enable the specified I2S interrupts\&. "
.ti -1c
.RI "#define \fB__HAL_I2S_DISABLE_IT\fP(__HANDLE__,  __INTERRUPT__)   (CLEAR_BIT((__HANDLE__)\->Instance\->CR2,(__INTERRUPT__)))"
.br
.RI "Disable the specified I2S interrupts\&. "
.ti -1c
.RI "#define \fB__HAL_I2S_GET_IT_SOURCE\fP(__HANDLE__,  __INTERRUPT__)   ((((__HANDLE__)\->Instance\->CR2 & (__INTERRUPT__)) == (__INTERRUPT__)) ? SET : RESET)"
.br
.RI "Checks if the specified I2S interrupt source is enabled or disabled\&. "
.ti -1c
.RI "#define \fB__HAL_I2S_GET_FLAG\fP(__HANDLE__,  __FLAG__)   ((((__HANDLE__)\->Instance\->SR) & (__FLAG__)) == (__FLAG__))"
.br
.RI "Checks whether the specified I2S flag is set or not\&. "
.ti -1c
.RI "#define \fB__HAL_I2S_CLEAR_OVRFLAG\fP(__HANDLE__)"
.br
.RI "Clears the I2S OVR pending flag\&. "
.ti -1c
.RI "#define \fB__HAL_I2S_CLEAR_UDRFLAG\fP(__HANDLE__)"
.br
.RI "Clears the I2S UDR pending flag\&. "
.in -1c
.SH "详细描述"
.PP 

.SH "宏定义说明"
.PP 
.SS "#define __HAL_I2S_CLEAR_OVRFLAG(__HANDLE__)"
\fB值:\fP
.PP
.nf
                                               do{ \
                                               __IO uint32_t tmpreg_ovr = 0x00U; \
                                               tmpreg_ovr = (__HANDLE__)->Instance->DR; \
                                               tmpreg_ovr = (__HANDLE__)->Instance->SR; \
                                               UNUSED(tmpreg_ovr); \
                                              }while(0U)
.fi
.PP
Clears the I2S OVR pending flag\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the I2S Handle\&. 
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_i2s\&.h 第 408 行定义\&.
.SS "#define __HAL_I2S_CLEAR_UDRFLAG(__HANDLE__)"
\fB值:\fP
.PP
.nf
                                               do{\
                                               __IO uint32_t tmpreg_udr = 0x00U;\
                                               tmpreg_udr = ((__HANDLE__)->Instance->SR);\
                                               UNUSED(tmpreg_udr); \
                                              }while(0U)
.fi
.PP
Clears the I2S UDR pending flag\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the I2S Handle\&. 
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_i2s\&.h 第 418 行定义\&.
.SS "#define __HAL_I2S_DISABLE(__HANDLE__)   (CLEAR_BIT((__HANDLE__)\->Instance\->I2SCFGR, SPI_I2SCFGR_I2SE))"

.PP
Disable the specified SPI peripheral (in I2S mode)\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the I2S Handle\&. 
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_i2s\&.h 第 353 行定义\&.
.SS "#define __HAL_I2S_DISABLE_IT(__HANDLE__, __INTERRUPT__)   (CLEAR_BIT((__HANDLE__)\->Instance\->CR2,(__INTERRUPT__)))"

.PP
Disable the specified I2S interrupts\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the I2S Handle\&. 
.br
\fI<strong>INTERRUPT</strong>\fP specifies the interrupt source to enable or disable\&. This parameter can be one of the following values: 
.PD 0

.IP "\(bu" 2
I2S_IT_TXE: Tx buffer empty interrupt enable 
.IP "\(bu" 2
I2S_IT_RXNE: RX buffer not empty interrupt enable 
.IP "\(bu" 2
I2S_IT_ERR: Error interrupt enable 
.PP
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_i2s\&.h 第 375 行定义\&.
.SS "#define __HAL_I2S_ENABLE(__HANDLE__)   (SET_BIT((__HANDLE__)\->Instance\->I2SCFGR, SPI_I2SCFGR_I2SE))"

.PP
Enable the specified SPI peripheral (in I2S mode)\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the I2S Handle\&. 
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_i2s\&.h 第 347 行定义\&.
.SS "#define __HAL_I2S_ENABLE_IT(__HANDLE__, __INTERRUPT__)   (SET_BIT((__HANDLE__)\->Instance\->CR2,(__INTERRUPT__)))"

.PP
Enable the specified I2S interrupts\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the I2S Handle\&. 
.br
\fI<strong>INTERRUPT</strong>\fP specifies the interrupt source to enable or disable\&. This parameter can be one of the following values: 
.PD 0

.IP "\(bu" 2
I2S_IT_TXE: Tx buffer empty interrupt enable 
.IP "\(bu" 2
I2S_IT_RXNE: RX buffer not empty interrupt enable 
.IP "\(bu" 2
I2S_IT_ERR: Error interrupt enable 
.PP
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_i2s\&.h 第 364 行定义\&.
.SS "#define __HAL_I2S_GET_FLAG(__HANDLE__, __FLAG__)   ((((__HANDLE__)\->Instance\->SR) & (__FLAG__)) == (__FLAG__))"

.PP
Checks whether the specified I2S flag is set or not\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the I2S Handle\&. 
.br
\fI<strong>FLAG</strong>\fP specifies the flag to check\&. This parameter can be one of the following values: 
.PD 0

.IP "\(bu" 2
I2S_FLAG_RXNE: Receive buffer not empty flag 
.IP "\(bu" 2
I2S_FLAG_TXE: Transmit buffer empty flag 
.IP "\(bu" 2
I2S_FLAG_UDR: Underrun flag 
.IP "\(bu" 2
I2S_FLAG_OVR: Overrun flag 
.IP "\(bu" 2
I2S_FLAG_FRE: Frame error flag 
.IP "\(bu" 2
I2S_FLAG_CHSIDE: Channel Side flag 
.IP "\(bu" 2
I2S_FLAG_BSY: Busy flag 
.PP
.RE
.PP
\fB返回值\fP
.RS 4
\fIThe\fP new state of \fBFLAG\fP (TRUE or FALSE)\&. 
.RE
.PP

.PP
在文件 stm32f4xx_hal_i2s\&.h 第 402 行定义\&.
.SS "#define __HAL_I2S_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__)   ((((__HANDLE__)\->Instance\->CR2 & (__INTERRUPT__)) == (__INTERRUPT__)) ? SET : RESET)"

.PP
Checks if the specified I2S interrupt source is enabled or disabled\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the I2S Handle\&. This parameter can be I2S where x: 1, 2, or 3 to select the I2S peripheral\&. 
.br
\fI<strong>INTERRUPT</strong>\fP specifies the I2S interrupt source to check\&. This parameter can be one of the following values: 
.PD 0

.IP "\(bu" 2
I2S_IT_TXE: Tx buffer empty interrupt enable 
.IP "\(bu" 2
I2S_IT_RXNE: RX buffer not empty interrupt enable 
.IP "\(bu" 2
I2S_IT_ERR: Error interrupt enable 
.PP
.RE
.PP
\fB返回值\fP
.RS 4
\fIThe\fP new state of \fBIT\fP (TRUE or FALSE)\&. 
.RE
.PP

.PP
在文件 stm32f4xx_hal_i2s\&.h 第 387 行定义\&.
.SS "#define __HAL_I2S_RESET_HANDLE_STATE(__HANDLE__)   ((__HANDLE__)\->State = \fBHAL_I2S_STATE_RESET\fP)"

.PP
Reset I2S handle state 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the I2S Handle\&. 
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_i2s\&.h 第 340 行定义\&.
.SH "作者"
.PP 
由 Doyxgen 通过分析 STM32F4_HAL 的 源代码自动生成\&.
