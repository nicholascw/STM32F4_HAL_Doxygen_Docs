.TH "src/stm32f4xx_hal_smartcard.c" 3 "2020年 八月 7日 星期五" "Version 1.24.0" "STM32F4_HAL" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/stm32f4xx_hal_smartcard.c \- SMARTCARD HAL module driver\&. This file provides firmware functions to manage the following functionalities of the SMARTCARD peripheral:  

.SH SYNOPSIS
.br
.PP
\fC#include 'stm32f4xx_hal\&.h'\fP
.br

.SH "详细描述"
.PP 
SMARTCARD HAL module driver\&. This file provides firmware functions to manage the following functionalities of the SMARTCARD peripheral: 


.PP
\fB作者\fP
.RS 4
MCD Application Team
.IP "\(bu" 2
Initialization and de-initialization functions
.IP "\(bu" 2
IO operation functions
.IP "\(bu" 2
Peripheral Control functions
.IP "\(bu" 2
Peripheral State and Error functions
.PP
.RE
.PP
.PP
.nf
==============================================================================
                   ##### How to use this driver #####
==============================================================================
  [..]
    The SMARTCARD HAL driver can be used as follows:

  (#) Declare a SMARTCARD_HandleTypeDef handle structure.
  (#) Initialize the SMARTCARD low level resources by implementing the HAL_SMARTCARD_MspInit() API:
      (##) Enable the interface clock of the USARTx associated to the SMARTCARD.
      (##) SMARTCARD pins configuration:
          (+++) Enable the clock for the SMARTCARD GPIOs.
          (+++) Configure SMARTCARD pins as alternate function pull-up.
      (##) NVIC configuration if you need to use interrupt process (HAL_SMARTCARD_Transmit_IT()
           and HAL_SMARTCARD_Receive_IT() APIs):
          (+++) Configure the USARTx interrupt priority.
          (+++) Enable the NVIC USART IRQ handle.
      (##) DMA Configuration if you need to use DMA process (HAL_SMARTCARD_Transmit_DMA()
           and HAL_SMARTCARD_Receive_DMA() APIs):
          (+++) Declare a DMA handle structure for the Tx/Rx stream.
          (+++) Enable the DMAx interface clock.
          (+++) Configure the declared DMA handle structure with the required Tx/Rx parameters.
          (+++) Configure the DMA Tx/Rx stream.
          (+++) Associate the initialized DMA handle to the SMARTCARD DMA Tx/Rx handle.
          (+++) Configure the priority and enable the NVIC for the transfer complete interrupt on the DMA Tx/Rx stream.
          (+++) Configure the USARTx interrupt priority and enable the NVIC USART IRQ handle
                (used for last byte sending completion detection in DMA non circular mode)

  (#) Program the Baud Rate, Word Length , Stop Bit, Parity, Hardware
      flow control and Mode(Receiver/Transmitter) in the SMARTCARD Init structure.

  (#) Initialize the SMARTCARD registers by calling the HAL_SMARTCARD_Init() API:
      (++) These APIs configure also the low level Hardware GPIO, CLOCK, CORTEX...etc)
           by calling the customized HAL_SMARTCARD_MspInit() API.
  [..]
  (@) The specific SMARTCARD interrupts (Transmission complete interrupt,
      RXNE interrupt and Error Interrupts) will be managed using the macros
      __HAL_SMARTCARD_ENABLE_IT() and __HAL_SMARTCARD_DISABLE_IT() inside the transmit and receive process.

  [..]
  Three operation modes are available within this driver :

  *** Polling mode IO operation ***
  =================================
  [..]
    (+) Send an amount of data in blocking mode using HAL_SMARTCARD_Transmit()
    (+) Receive an amount of data in blocking mode using HAL_SMARTCARD_Receive()

  *** Interrupt mode IO operation ***
  ===================================
  [..]
    (+) Send an amount of data in non blocking mode using HAL_SMARTCARD_Transmit_IT()
    (+) At transmission end of transfer HAL_SMARTCARD_TxCpltCallback is executed and user can
        add his own code by customization of function pointer HAL_SMARTCARD_TxCpltCallback
    (+) Receive an amount of data in non blocking mode using HAL_SMARTCARD_Receive_IT()
    (+) At reception end of transfer HAL_SMARTCARD_RxCpltCallback is executed and user can
        add his own code by customization of function pointer HAL_SMARTCARD_RxCpltCallback
    (+) In case of transfer Error, HAL_SMARTCARD_ErrorCallback() function is executed and user can
        add his own code by customization of function pointer HAL_SMARTCARD_ErrorCallback

  *** DMA mode IO operation ***
  ==============================
  [..]
    (+) Send an amount of data in non blocking mode (DMA) using HAL_SMARTCARD_Transmit_DMA()
    (+) At transmission end of transfer HAL_SMARTCARD_TxCpltCallback is executed and user can
        add his own code by customization of function pointer HAL_SMARTCARD_TxCpltCallback
    (+) Receive an amount of data in non blocking mode (DMA) using HAL_SMARTCARD_Receive_DMA()
    (+) At reception end of transfer HAL_SMARTCARD_RxCpltCallback is executed and user can
        add his own code by customization of function pointer HAL_SMARTCARD_RxCpltCallback
    (+) In case of transfer Error, HAL_SMARTCARD_ErrorCallback() function is executed and user can
        add his own code by customization of function pointer HAL_SMARTCARD_ErrorCallback

  *** SMARTCARD HAL driver macros list ***
  ========================================
  [..]
    Below the list of most used macros in SMARTCARD HAL driver.

    (+) __HAL_SMARTCARD_ENABLE: Enable the SMARTCARD peripheral
    (+) __HAL_SMARTCARD_DISABLE: Disable the SMARTCARD peripheral
    (+) __HAL_SMARTCARD_GET_FLAG : Check whether the specified SMARTCARD flag is set or not
    (+) __HAL_SMARTCARD_CLEAR_FLAG : Clear the specified SMARTCARD pending flag
    (+) __HAL_SMARTCARD_ENABLE_IT: Enable the specified SMARTCARD interrupt
    (+) __HAL_SMARTCARD_DISABLE_IT: Disable the specified SMARTCARD interrupt

  [..]
    (@) You can refer to the SMARTCARD HAL driver header file for more useful macros

  ##### Callback registration #####
  ==================================

  [..]
  The compilation define USE_HAL_SMARTCARD_REGISTER_CALLBACKS when set to 1
  allows the user to configure dynamically the driver callbacks.

  [..]
  Use Function @ref HAL_SMARTCARD_RegisterCallback() to register a user callback.
  Function @ref HAL_SMARTCARD_RegisterCallback() allows to register following callbacks:
  (+) TxCpltCallback            : Tx Complete Callback.
  (+) RxCpltCallback            : Rx Complete Callback.
  (+) ErrorCallback             : Error Callback.
  (+) AbortCpltCallback         : Abort Complete Callback.
  (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
  (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
  (+) MspInitCallback           : SMARTCARD MspInit.
  (+) MspDeInitCallback         : SMARTCARD MspDeInit.
  This function takes as parameters the HAL peripheral handle, the Callback ID
  and a pointer to the user callback function.

  [..]
  Use function @ref HAL_SMARTCARD_UnRegisterCallback() to reset a callback to the default
  weak (surcharged) function.
  @ref HAL_SMARTCARD_UnRegisterCallback() takes as parameters the HAL peripheral handle,
  and the Callback ID.
  This function allows to reset following callbacks:
  (+) TxCpltCallback            : Tx Complete Callback.
  (+) RxCpltCallback            : Rx Complete Callback.
  (+) ErrorCallback             : Error Callback.
  (+) AbortCpltCallback         : Abort Complete Callback.
  (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
  (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
  (+) MspInitCallback           : SMARTCARD MspInit.
  (+) MspDeInitCallback         : SMARTCARD MspDeInit.

  [..]
  By default, after the @ref HAL_SMARTCARD_Init() and when the state is HAL_SMARTCARD_STATE_RESET
  all callbacks are set to the corresponding weak (surcharged) functions:
  examples @ref HAL_SMARTCARD_TxCpltCallback(), @ref HAL_SMARTCARD_RxCpltCallback().
  Exception done for MspInit and MspDeInit functions that are respectively
  reset to the legacy weak (surcharged) functions in the @ref HAL_SMARTCARD_Init()
  and @ref HAL_SMARTCARD_DeInit() only when these callbacks are null (not registered beforehand).
  If not, MspInit or MspDeInit are not null, the @ref HAL_SMARTCARD_Init() and @ref HAL_SMARTCARD_DeInit()
  keep and use the user MspInit/MspDeInit callbacks (registered beforehand).

  [..]
  Callbacks can be registered/unregistered in HAL_SMARTCARD_STATE_READY state only.
  Exception done MspInit/MspDeInit that can be registered/unregistered
  in HAL_SMARTCARD_STATE_READY or HAL_SMARTCARD_STATE_RESET state, thus registered (user)
  MspInit/DeInit callbacks can be used during the Init/DeInit.
  In that case first register the MspInit/MspDeInit user callbacks
  using @ref HAL_SMARTCARD_RegisterCallback() before calling @ref HAL_SMARTCARD_DeInit()
  or @ref HAL_SMARTCARD_Init() function.

  [..]
  When The compilation define USE_HAL_SMARTCARD_REGISTER_CALLBACKS is set to 0 or
  not defined, the callback registration feature is not available
  and weak (surcharged) callbacks are used..fi
.PP
.PP
\fB注意\fP
.RS 4
.RE
.PP
.SS "(C) Copyright (c) 2016 STMicroelectronics\&. All rights reserved\&."
.PP
This software component is licensed by ST under BSD 3-Clause license, the 'License'; You may not use this file except in compliance with the License\&. You may obtain a copy of the License at: opensource\&.org/licenses/BSD-3-Clause 
.PP
在文件 \fBstm32f4xx_hal_smartcard\&.c\fP 中定义\&.
.SH "作者"
.PP 
由 Doyxgen 通过分析 STM32F4_HAL 的 源代码自动生成\&.
