.TH "src/stm32f4xx_hal_hash_ex.c" 3 "2020年 八月 7日 星期五" "Version 1.24.0" "STM32F4_HAL" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/stm32f4xx_hal_hash_ex.c \- Extended HASH HAL module driver\&. This file provides firmware functions to manage the following functionalities of the HASH peripheral for SHA-224 and SHA-256 alogrithms:  

.SH SYNOPSIS
.br
.PP
\fC#include 'stm32f4xx_hal\&.h'\fP
.br

.SH "详细描述"
.PP 
Extended HASH HAL module driver\&. This file provides firmware functions to manage the following functionalities of the HASH peripheral for SHA-224 and SHA-256 alogrithms: 


.PP
\fB作者\fP
.RS 4
MCD Application Team
.IP "\(bu" 2
HASH or HMAC processing in polling mode
.IP "\(bu" 2
HASH or HMAC processing in interrupt mode
.IP "\(bu" 2
HASH or HMAC processing in DMA mode Additionally, this file provides functions to manage HMAC multi-buffer DMA-based processing for MD-5, SHA-1, SHA-224 and SHA-256\&.
.PP
.RE
.PP
.PP
.nf
===============================================================================
                    ##### HASH peripheral extended features  #####
===============================================================================
   [..]
   The SHA-224 and SHA-256 HASH and HMAC processing can be carried out exactly
   the same way as for SHA-1 or MD-5 algorithms.
   (#) Three modes are available.
       (##) Polling mode: processing APIs are blocking functions
            i.e. they process the data and wait till the digest computation is finished,
            e.g. HAL_HASHEx_xxx_Start()
       (##) Interrupt mode: processing APIs are not blocking functions
               i.e. they process the data under interrupt,
               e.g. HAL_HASHEx_xxx_Start_IT()
       (##) DMA mode: processing APIs are not blocking functions and the CPU is
            not used for data transfer i.e. the data transfer is ensured by DMA,
               e.g. HAL_HASHEx_xxx_Start_DMA(). Note that in DMA mode, a call to
               HAL_HASHEx_xxx_Finish() is then required to retrieve the digest.

  (#)Multi-buffer processing is possible in polling and DMA mode.
       (##) In polling mode, only multi-buffer HASH processing is possible.
            API HAL_HASHEx_xxx_Accumulate() must be called for each input buffer, except for the last one.
            User must resort to HAL_HASHEx_xxx_Start() to enter the last one and retrieve as
            well the computed digest.

       (##) In DMA mode, multi-buffer HASH and HMAC processing are possible.

             (+++) HASH processing: once initialization is done, MDMAT bit must be set thru __HAL_HASH_SET_MDMAT() macro.
            From that point, each buffer can be fed to the IP thru HAL_HASHEx_xxx_Start_DMA() API.
            Before entering the last buffer, reset the MDMAT bit with __HAL_HASH_RESET_MDMAT()
            macro then wrap-up the HASH processing in feeding the last input buffer thru the
            same API HAL_HASHEx_xxx_Start_DMA(). The digest can then be retrieved with a call to
            API HAL_HASHEx_xxx_Finish().

            (+++) HMAC processing (MD-5, SHA-1, SHA-224 and SHA-256 must all resort to
            extended functions): after initialization, the key and the first input buffer are entered
            in the IP with the API HAL_HMACEx_xxx_Step1_2_DMA(). This carries out HMAC step 1 and
            starts step 2.
            The following buffers are next entered with the API  HAL_HMACEx_xxx_Step2_DMA(). At this
            point, the HMAC processing is still carrying out step 2.
            Then, step 2 for the last input buffer and step 3 are carried out by a single call
            to HAL_HMACEx_xxx_Step2_3_DMA().

            The digest can finally be retrieved with a call to API HAL_HASH_xxx_Finish() for
            MD-5 and SHA-1, to HAL_HASHEx_xxx_Finish() for SHA-224 and SHA-256..fi
.PP
.PP
\fB注意\fP
.RS 4
.RE
.PP
.SS "(C) Copyright (c) 2016 STMicroelectronics\&. All rights reserved\&."
.PP
This software component is licensed by ST under BSD 3-Clause license, the 'License'; You may not use this file except in compliance with the License\&. You may obtain a copy of the License at: opensource\&.org/licenses/BSD-3-Clause 
.PP
在文件 \fBstm32f4xx_hal_hash_ex\&.c\fP 中定义\&.
.SH "作者"
.PP 
由 Doyxgen 通过分析 STM32F4_HAL 的 源代码自动生成\&.
