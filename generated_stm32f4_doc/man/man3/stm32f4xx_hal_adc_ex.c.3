.TH "src/stm32f4xx_hal_adc_ex.c" 3 "2020年 八月 7日 星期五" "Version 1.24.0" "STM32F4_HAL" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/stm32f4xx_hal_adc_ex.c \- This file provides firmware functions to manage the following functionalities of the ADC extension peripheral:  

.SH SYNOPSIS
.br
.PP
\fC#include 'stm32f4xx_hal\&.h'\fP
.br

.SH "详细描述"
.PP 
This file provides firmware functions to manage the following functionalities of the ADC extension peripheral: 


.PP
\fB作者\fP
.RS 4
MCD Application Team
.IP "\(bu" 2
Extended features functions
.PP
.RE
.PP
.PP
.nf
==============================================================================
                  ##### How to use this driver #####
==============================================================================
  [..]
  (#)Initialize the ADC low level resources by implementing the HAL_ADC_MspInit():
     (##) Enable the ADC interface clock using __HAL_RCC_ADC_CLK_ENABLE()
     (##) ADC pins configuration
           (+++) Enable the clock for the ADC GPIOs using the following function:
                 __HAL_RCC_GPIOx_CLK_ENABLE()  
           (+++) Configure these ADC pins in analog mode using HAL_GPIO_Init() 
     (##) In case of using interrupts (e.g. HAL_ADC_Start_IT())
           (+++) Configure the ADC interrupt priority using HAL_NVIC_SetPriority()
           (+++) Enable the ADC IRQ handler using HAL_NVIC_EnableIRQ()
           (+++) In ADC IRQ handler, call HAL_ADC_IRQHandler()
    (##) In case of using DMA to control data transfer (e.g. HAL_ADC_Start_DMA())
           (+++) Enable the DMAx interface clock using __HAL_RCC_DMAx_CLK_ENABLE()
           (+++) Configure and enable two DMA streams stream for managing data
               transfer from peripheral to memory (output stream)
           (+++) Associate the initialized DMA handle to the ADC DMA handle
               using  __HAL_LINKDMA()
           (+++) Configure the priority and enable the NVIC for the transfer complete
               interrupt on the two DMA Streams. The output stream should have higher
               priority than the input stream.
   (#) Configure the ADC Prescaler, conversion resolution and data alignment 
       using the HAL_ADC_Init() function. 

   (#) Configure the ADC Injected channels group features, use HAL_ADC_Init()
       and HAL_ADC_ConfigChannel() functions.
       
   (#) Three operation modes are available within this driver :     

   *** Polling mode IO operation ***
   =================================
   [..]    
     (+) Start the ADC peripheral using HAL_ADCEx_InjectedStart() 
     (+) Wait for end of conversion using HAL_ADC_PollForConversion(), at this stage
         user can specify the value of timeout according to his end application      
     (+) To read the ADC converted values, use the HAL_ADCEx_InjectedGetValue() function.
     (+) Stop the ADC peripheral using HAL_ADCEx_InjectedStop()

   *** Interrupt mode IO operation ***    
   ===================================
   [..]    
     (+) Start the ADC peripheral using HAL_ADCEx_InjectedStart_IT() 
     (+) Use HAL_ADC_IRQHandler() called under ADC_IRQHandler() Interrupt subroutine
     (+) At ADC end of conversion HAL_ADCEx_InjectedConvCpltCallback() function is executed and user can 
          add his own code by customization of function pointer HAL_ADCEx_InjectedConvCpltCallback 
     (+) In case of ADC Error, HAL_ADCEx_InjectedErrorCallback() function is executed and user can 
          add his own code by customization of function pointer HAL_ADCEx_InjectedErrorCallback
     (+) Stop the ADC peripheral using HAL_ADCEx_InjectedStop_IT()
     
          
   *** DMA mode IO operation ***    
   ==============================
   [..]    
     (+) Start the ADC peripheral using HAL_ADCEx_InjectedStart_DMA(), at this stage the user specify the length 
         of data to be transferred at each end of conversion 
     (+) At The end of data transfer ba HAL_ADCEx_InjectedConvCpltCallback() function is executed and user can 
          add his own code by customization of function pointer HAL_ADCEx_InjectedConvCpltCallback 
     (+) In case of transfer Error, HAL_ADCEx_InjectedErrorCallback() function is executed and user can 
          add his own code by customization of function pointer HAL_ADCEx_InjectedErrorCallback
      (+) Stop the ADC peripheral using HAL_ADCEx_InjectedStop_DMA()
      
   *** Multi mode ADCs Regular channels configuration ***
   ======================================================
   [..]        
     (+) Select the Multi mode ADC regular channels features (dual or triple mode)  
        and configure the DMA mode using HAL_ADCEx_MultiModeConfigChannel() functions. 
     (+) Start the ADC peripheral using HAL_ADCEx_MultiModeStart_DMA(), at this stage the user specify the length 
         of data to be transferred at each end of conversion           
     (+) Read the ADCs converted values using the HAL_ADCEx_MultiModeGetValue() function..fi
.PP
.PP
\fB注意\fP
.RS 4
.RE
.PP
.SS "(C) Copyright (c) 2017 STMicroelectronics\&. All rights reserved\&."
.PP
This software component is licensed by ST under BSD 3-Clause license, the 'License'; You may not use this file except in compliance with the License\&. You may obtain a copy of the License at: opensource\&.org/licenses/BSD-3-Clause 
.PP
在文件 \fBstm32f4xx_hal_adc_ex\&.c\fP 中定义\&.
.SH "作者"
.PP 
由 Doyxgen 通过分析 STM32F4_HAL 的 源代码自动生成\&.
