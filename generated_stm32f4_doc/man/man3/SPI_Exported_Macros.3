.TH "SPI_Exported_Macros" 3 "2020年 八月 7日 星期五" "Version 1.24.0" "STM32F4_HAL" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SPI_Exported_Macros
.SH SYNOPSIS
.br
.PP
.SS "宏定义"

.in +1c
.ti -1c
.RI "#define \fB__HAL_SPI_RESET_HANDLE_STATE\fP(__HANDLE__)   ((__HANDLE__)\->State = \fBHAL_SPI_STATE_RESET\fP)"
.br
.RI "Reset SPI handle state\&. "
.ti -1c
.RI "#define \fB__HAL_SPI_ENABLE_IT\fP(__HANDLE__,  __INTERRUPT__)   SET_BIT((__HANDLE__)\->Instance\->CR2, (__INTERRUPT__))"
.br
.RI "Enable the specified SPI interrupts\&. "
.ti -1c
.RI "#define \fB__HAL_SPI_DISABLE_IT\fP(__HANDLE__,  __INTERRUPT__)   CLEAR_BIT((__HANDLE__)\->Instance\->CR2, (__INTERRUPT__))"
.br
.RI "Disable the specified SPI interrupts\&. "
.ti -1c
.RI "#define \fB__HAL_SPI_GET_IT_SOURCE\fP(__HANDLE__,  __INTERRUPT__)   ((((__HANDLE__)\->Instance\->CR2 & (__INTERRUPT__)) == (__INTERRUPT__)) ? SET : RESET)"
.br
.RI "Check whether the specified SPI interrupt source is enabled or not\&. "
.ti -1c
.RI "#define \fB__HAL_SPI_GET_FLAG\fP(__HANDLE__,  __FLAG__)   ((((__HANDLE__)\->Instance\->SR) & (__FLAG__)) == (__FLAG__))"
.br
.RI "Check whether the specified SPI flag is set or not\&. "
.ti -1c
.RI "#define \fB__HAL_SPI_CLEAR_CRCERRFLAG\fP(__HANDLE__)   ((__HANDLE__)\->Instance\->SR = (uint16_t)(~\fBSPI_FLAG_CRCERR\fP))"
.br
.RI "Clear the SPI CRCERR pending flag\&. "
.ti -1c
.RI "#define \fB__HAL_SPI_CLEAR_MODFFLAG\fP(__HANDLE__)"
.br
.RI "Clear the SPI MODF pending flag\&. "
.ti -1c
.RI "#define \fB__HAL_SPI_CLEAR_OVRFLAG\fP(__HANDLE__)"
.br
.RI "Clear the SPI OVR pending flag\&. "
.ti -1c
.RI "#define \fB__HAL_SPI_CLEAR_FREFLAG\fP(__HANDLE__)"
.br
.RI "Clear the SPI FRE pending flag\&. "
.ti -1c
.RI "#define \fB__HAL_SPI_ENABLE\fP(__HANDLE__)   SET_BIT((__HANDLE__)\->Instance\->CR1, SPI_CR1_SPE)"
.br
.RI "Enable the SPI peripheral\&. "
.ti -1c
.RI "#define \fB__HAL_SPI_DISABLE\fP(__HANDLE__)   CLEAR_BIT((__HANDLE__)\->Instance\->CR1, SPI_CR1_SPE)"
.br
.RI "Disable the SPI peripheral\&. "
.in -1c
.SH "详细描述"
.PP 

.SH "宏定义说明"
.PP 
.SS "#define __HAL_SPI_CLEAR_CRCERRFLAG(__HANDLE__)   ((__HANDLE__)\->Instance\->SR = (uint16_t)(~\fBSPI_FLAG_CRCERR\fP))"

.PP
Clear the SPI CRCERR pending flag\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the SPI Handle\&. This parameter can be SPI where x: 1, 2, or 3 to select the SPI peripheral\&. 
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_spi\&.h 第 409 行定义\&.
.SS "#define __HAL_SPI_CLEAR_FREFLAG(__HANDLE__)"
\fB值:\fP
.PP
.nf
  do{                                              \
  __IO uint32_t tmpreg_fre = 0x00U;                \
  tmpreg_fre = (__HANDLE__)->Instance->SR;         \
  UNUSED(tmpreg_fre);                              \
  }while(0U)
.fi
.PP
Clear the SPI FRE pending flag\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the SPI Handle\&. This parameter can be SPI where x: 1, 2, or 3 to select the SPI peripheral\&. 
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_spi\&.h 第 442 行定义\&.
.SS "#define __HAL_SPI_CLEAR_MODFFLAG(__HANDLE__)"
\fB值:\fP
.PP
.nf
  do{                                                    \
    __IO uint32_t tmpreg_modf = 0x00U;                   \
    tmpreg_modf = (__HANDLE__)->Instance->SR;            \
    CLEAR_BIT((__HANDLE__)->Instance->CR1, SPI_CR1_SPE); \
    UNUSED(tmpreg_modf);                                 \
  } while(0U)
.fi
.PP
Clear the SPI MODF pending flag\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the SPI Handle\&. This parameter can be SPI where x: 1, 2, or 3 to select the SPI peripheral\&. 
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_spi\&.h 第 416 行定义\&.
.SS "#define __HAL_SPI_CLEAR_OVRFLAG(__HANDLE__)"
\fB值:\fP
.PP
.nf
  do{                                              \
    __IO uint32_t tmpreg_ovr = 0x00U;              \
    tmpreg_ovr = (__HANDLE__)->Instance->DR;       \
    tmpreg_ovr = (__HANDLE__)->Instance->SR;       \
    UNUSED(tmpreg_ovr);                            \
  } while(0U)
.fi
.PP
Clear the SPI OVR pending flag\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the SPI Handle\&. This parameter can be SPI where x: 1, 2, or 3 to select the SPI peripheral\&. 
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_spi\&.h 第 429 行定义\&.
.SS "#define __HAL_SPI_DISABLE(__HANDLE__)   CLEAR_BIT((__HANDLE__)\->Instance\->CR1, SPI_CR1_SPE)"

.PP
Disable the SPI peripheral\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the SPI Handle\&. This parameter can be SPI where x: 1, 2, or 3 to select the SPI peripheral\&. 
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_spi\&.h 第 461 行定义\&.
.SS "#define __HAL_SPI_DISABLE_IT(__HANDLE__, __INTERRUPT__)   CLEAR_BIT((__HANDLE__)\->Instance\->CR2, (__INTERRUPT__))"

.PP
Disable the specified SPI interrupts\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the SPI handle\&. This parameter can be SPIx where x: 1, 2, or 3 to select the SPI peripheral\&. 
.br
\fI<strong>INTERRUPT</strong>\fP specifies the interrupt source to disable\&. This parameter can be one of the following values: 
.PD 0

.IP "\(bu" 2
SPI_IT_TXE: Tx buffer empty interrupt enable 
.IP "\(bu" 2
SPI_IT_RXNE: RX buffer not empty interrupt enable 
.IP "\(bu" 2
SPI_IT_ERR: Error interrupt enable 
.PP
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_spi\&.h 第 374 行定义\&.
.SS "#define __HAL_SPI_ENABLE(__HANDLE__)   SET_BIT((__HANDLE__)\->Instance\->CR1, SPI_CR1_SPE)"

.PP
Enable the SPI peripheral\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the SPI Handle\&. This parameter can be SPI where x: 1, 2, or 3 to select the SPI peripheral\&. 
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_spi\&.h 第 454 行定义\&.
.SS "#define __HAL_SPI_ENABLE_IT(__HANDLE__, __INTERRUPT__)   SET_BIT((__HANDLE__)\->Instance\->CR2, (__INTERRUPT__))"

.PP
Enable the specified SPI interrupts\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the SPI Handle\&. This parameter can be SPI where x: 1, 2, or 3 to select the SPI peripheral\&. 
.br
\fI<strong>INTERRUPT</strong>\fP specifies the interrupt source to enable\&. This parameter can be one of the following values: 
.PD 0

.IP "\(bu" 2
SPI_IT_TXE: Tx buffer empty interrupt enable 
.IP "\(bu" 2
SPI_IT_RXNE: RX buffer not empty interrupt enable 
.IP "\(bu" 2
SPI_IT_ERR: Error interrupt enable 
.PP
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_spi\&.h 第 362 行定义\&.
.SS "#define __HAL_SPI_GET_FLAG(__HANDLE__, __FLAG__)   ((((__HANDLE__)\->Instance\->SR) & (__FLAG__)) == (__FLAG__))"

.PP
Check whether the specified SPI flag is set or not\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the SPI Handle\&. This parameter can be SPI where x: 1, 2, or 3 to select the SPI peripheral\&. 
.br
\fI<strong>FLAG</strong>\fP specifies the flag to check\&. This parameter can be one of the following values: 
.PD 0

.IP "\(bu" 2
SPI_FLAG_RXNE: Receive buffer not empty flag 
.IP "\(bu" 2
SPI_FLAG_TXE: Transmit buffer empty flag 
.IP "\(bu" 2
SPI_FLAG_CRCERR: CRC error flag 
.IP "\(bu" 2
SPI_FLAG_MODF: Mode fault flag 
.IP "\(bu" 2
SPI_FLAG_OVR: Overrun flag 
.IP "\(bu" 2
SPI_FLAG_BSY: Busy flag 
.IP "\(bu" 2
SPI_FLAG_FRE: Frame format error flag 
.PP
.RE
.PP
\fB返回值\fP
.RS 4
\fIThe\fP new state of \fBFLAG\fP (TRUE or FALSE)\&. 
.RE
.PP

.PP
在文件 stm32f4xx_hal_spi\&.h 第 402 行定义\&.
.SS "#define __HAL_SPI_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__)   ((((__HANDLE__)\->Instance\->CR2 & (__INTERRUPT__)) == (__INTERRUPT__)) ? SET : RESET)"

.PP
Check whether the specified SPI interrupt source is enabled or not\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the SPI Handle\&. This parameter can be SPI where x: 1, 2, or 3 to select the SPI peripheral\&. 
.br
\fI<strong>INTERRUPT</strong>\fP specifies the SPI interrupt source to check\&. This parameter can be one of the following values: 
.PD 0

.IP "\(bu" 2
SPI_IT_TXE: Tx buffer empty interrupt enable 
.IP "\(bu" 2
SPI_IT_RXNE: RX buffer not empty interrupt enable 
.IP "\(bu" 2
SPI_IT_ERR: Error interrupt enable 
.PP
.RE
.PP
\fB返回值\fP
.RS 4
\fIThe\fP new state of \fBIT\fP (TRUE or FALSE)\&. 
.RE
.PP

.PP
在文件 stm32f4xx_hal_spi\&.h 第 386 行定义\&.
.SS "#define __HAL_SPI_RESET_HANDLE_STATE(__HANDLE__)   ((__HANDLE__)\->State = \fBHAL_SPI_STATE_RESET\fP)"

.PP
Reset SPI handle state\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the SPI Handle\&. This parameter can be SPI where x: 1, 2, or 3 to select the SPI peripheral\&. 
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_spi\&.h 第 349 行定义\&.
.SH "作者"
.PP 
由 Doyxgen 通过分析 STM32F4_HAL 的 源代码自动生成\&.
