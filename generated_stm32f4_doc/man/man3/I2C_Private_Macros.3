.TH "I2C_Private_Macros" 3 "2020年 八月 7日 星期五" "Version 1.24.0" "STM32F4_HAL" \" -*- nroff -*-
.ad l
.nh
.SH NAME
I2C_Private_Macros
.SH SYNOPSIS
.br
.PP
.SS "模块"

.in +1c
.ti -1c
.RI "\fBI2C Private macros to check input parameters\fP"
.br
.in -1c
.SS "宏定义"

.in +1c
.ti -1c
.RI "#define \fBI2C_MIN_PCLK_FREQ\fP(__PCLK__,  __SPEED__)   (((__SPEED__) <= 100000U) ? ((__PCLK__) < \fBI2C_MIN_PCLK_FREQ_STANDARD\fP) : ((__PCLK__) < \fBI2C_MIN_PCLK_FREQ_FAST\fP))"
.br
.ti -1c
.RI "#define \fBI2C_CCR_CALCULATION\fP(__PCLK__,  __SPEED__,  __COEFF__)   (((((__PCLK__) \- 1U)/((__SPEED__) * (__COEFF__))) + 1U) & I2C_CCR_CCR)"
.br
.ti -1c
.RI "#define \fBI2C_FREQRANGE\fP(__PCLK__)   ((__PCLK__)/1000000U)"
.br
.ti -1c
.RI "#define \fBI2C_RISE_TIME\fP(__FREQRANGE__,  __SPEED__)   (((__SPEED__) <= 100000U) ? ((__FREQRANGE__) + 1U) : ((((__FREQRANGE__) * 300U) / 1000U) + 1U))"
.br
.ti -1c
.RI "#define \fBI2C_SPEED_STANDARD\fP(__PCLK__,  __SPEED__)   ((\fBI2C_CCR_CALCULATION\fP((__PCLK__), (__SPEED__), 2U) < 4U)? 4U:I2C_CCR_CALCULATION((__PCLK__), (__SPEED__), 2U))"
.br
.ti -1c
.RI "#define \fBI2C_SPEED_FAST\fP(__PCLK__,  __SPEED__,  __DUTYCYCLE__)   (((__DUTYCYCLE__) == \fBI2C_DUTYCYCLE_2\fP)? \fBI2C_CCR_CALCULATION\fP((__PCLK__), (__SPEED__), 3U) : (\fBI2C_CCR_CALCULATION\fP((__PCLK__), (__SPEED__), 25U) | \fBI2C_DUTYCYCLE_16_9\fP))"
.br
.ti -1c
.RI "#define \fBI2C_SPEED\fP(__PCLK__,  __SPEED__,  __DUTYCYCLE__)"
.br
.ti -1c
.RI "#define \fBI2C_7BIT_ADD_WRITE\fP(__ADDRESS__)   ((uint8_t)((__ADDRESS__) & (uint8_t)(~I2C_OAR1_ADD0)))"
.br
.ti -1c
.RI "#define \fBI2C_7BIT_ADD_READ\fP(__ADDRESS__)   ((uint8_t)((__ADDRESS__) | I2C_OAR1_ADD0))"
.br
.ti -1c
.RI "#define \fBI2C_10BIT_ADDRESS\fP(__ADDRESS__)   ((uint8_t)((uint16_t)((__ADDRESS__) & (uint16_t)0x00FF)))"
.br
.ti -1c
.RI "#define \fBI2C_10BIT_HEADER_WRITE\fP(__ADDRESS__)   ((uint8_t)((uint16_t)((uint16_t)(((uint16_t)((__ADDRESS__) & (uint16_t)0x0300)) >> 7) | (uint16_t)0x00F0)))"
.br
.ti -1c
.RI "#define \fBI2C_10BIT_HEADER_READ\fP(__ADDRESS__)   ((uint8_t)((uint16_t)((uint16_t)(((uint16_t)((__ADDRESS__) & (uint16_t)0x0300)) >> 7) | (uint16_t)(0x00F1))))"
.br
.ti -1c
.RI "#define \fBI2C_MEM_ADD_MSB\fP(__ADDRESS__)   ((uint8_t)((uint16_t)(((uint16_t)((__ADDRESS__) & (uint16_t)0xFF00)) >> 8)))"
.br
.ti -1c
.RI "#define \fBI2C_MEM_ADD_LSB\fP(__ADDRESS__)   ((uint8_t)((uint16_t)((__ADDRESS__) & (uint16_t)0x00FF)))"
.br
.in -1c
.SH "详细描述"
.PP 

.SH "宏定义说明"
.PP 
.SS "#define I2C_10BIT_ADDRESS(__ADDRESS__)   ((uint8_t)((uint16_t)((__ADDRESS__) & (uint16_t)0x00FF)))"

.PP
在文件 stm32f4xx_hal_i2c\&.h 第 669 行定义\&.
.SS "#define I2C_10BIT_HEADER_READ(__ADDRESS__)   ((uint8_t)((uint16_t)((uint16_t)(((uint16_t)((__ADDRESS__) & (uint16_t)0x0300)) >> 7) | (uint16_t)(0x00F1))))"

.PP
在文件 stm32f4xx_hal_i2c\&.h 第 671 行定义\&.
.SS "#define I2C_10BIT_HEADER_WRITE(__ADDRESS__)   ((uint8_t)((uint16_t)((uint16_t)(((uint16_t)((__ADDRESS__) & (uint16_t)0x0300)) >> 7) | (uint16_t)0x00F0)))"

.PP
在文件 stm32f4xx_hal_i2c\&.h 第 670 行定义\&.
.SS "#define I2C_7BIT_ADD_READ(__ADDRESS__)   ((uint8_t)((__ADDRESS__) | I2C_OAR1_ADD0))"

.PP
在文件 stm32f4xx_hal_i2c\&.h 第 667 行定义\&.
.SS "#define I2C_7BIT_ADD_WRITE(__ADDRESS__)   ((uint8_t)((__ADDRESS__) & (uint8_t)(~I2C_OAR1_ADD0)))"

.PP
在文件 stm32f4xx_hal_i2c\&.h 第 666 行定义\&.
.SS "#define I2C_CCR_CALCULATION(__PCLK__, __SPEED__, __COEFF__)   (((((__PCLK__) \- 1U)/((__SPEED__) * (__COEFF__))) + 1U) & I2C_CCR_CCR)"

.PP
在文件 stm32f4xx_hal_i2c\&.h 第 657 行定义\&.
.SS "#define I2C_FREQRANGE(__PCLK__)   ((__PCLK__)/1000000U)"

.PP
在文件 stm32f4xx_hal_i2c\&.h 第 658 行定义\&.
.SS "#define I2C_MEM_ADD_LSB(__ADDRESS__)   ((uint8_t)((uint16_t)((__ADDRESS__) & (uint16_t)0x00FF)))"

.PP
在文件 stm32f4xx_hal_i2c\&.h 第 674 行定义\&.
.SS "#define I2C_MEM_ADD_MSB(__ADDRESS__)   ((uint8_t)((uint16_t)(((uint16_t)((__ADDRESS__) & (uint16_t)0xFF00)) >> 8)))"

.PP
在文件 stm32f4xx_hal_i2c\&.h 第 673 行定义\&.
.SS "#define I2C_MIN_PCLK_FREQ(__PCLK__, __SPEED__)   (((__SPEED__) <= 100000U) ? ((__PCLK__) < \fBI2C_MIN_PCLK_FREQ_STANDARD\fP) : ((__PCLK__) < \fBI2C_MIN_PCLK_FREQ_FAST\fP))"

.PP
在文件 stm32f4xx_hal_i2c\&.h 第 656 行定义\&.
.SS "#define I2C_RISE_TIME(__FREQRANGE__, __SPEED__)   (((__SPEED__) <= 100000U) ? ((__FREQRANGE__) + 1U) : ((((__FREQRANGE__) * 300U) / 1000U) + 1U))"

.PP
在文件 stm32f4xx_hal_i2c\&.h 第 659 行定义\&.
.SS "#define I2C_SPEED(__PCLK__, __SPEED__, __DUTYCYCLE__)"
\fB值:\fP
.PP
.nf
                                                                  (((__SPEED__) <= 100000U)? (I2C_SPEED_STANDARD((__PCLK__), (__SPEED__))) : \
                                                                  ((I2C_SPEED_FAST((__PCLK__), (__SPEED__), (__DUTYCYCLE__)) & I2C_CCR_CCR) == 0U)? 1U : \
                                                                  ((I2C_SPEED_FAST((__PCLK__), (__SPEED__), (__DUTYCYCLE__))) | I2C_CCR_FS))
.fi
.PP
在文件 stm32f4xx_hal_i2c\&.h 第 662 行定义\&.
.SS "#define I2C_SPEED_FAST(__PCLK__, __SPEED__, __DUTYCYCLE__)   (((__DUTYCYCLE__) == \fBI2C_DUTYCYCLE_2\fP)? \fBI2C_CCR_CALCULATION\fP((__PCLK__), (__SPEED__), 3U) : (\fBI2C_CCR_CALCULATION\fP((__PCLK__), (__SPEED__), 25U) | \fBI2C_DUTYCYCLE_16_9\fP))"

.PP
在文件 stm32f4xx_hal_i2c\&.h 第 661 行定义\&.
.SS "#define I2C_SPEED_STANDARD(__PCLK__, __SPEED__)   ((\fBI2C_CCR_CALCULATION\fP((__PCLK__), (__SPEED__), 2U) < 4U)? 4U:I2C_CCR_CALCULATION((__PCLK__), (__SPEED__), 2U))"

.PP
在文件 stm32f4xx_hal_i2c\&.h 第 660 行定义\&.
.SH "作者"
.PP 
由 Doyxgen 通过分析 STM32F4_HAL 的 源代码自动生成\&.
