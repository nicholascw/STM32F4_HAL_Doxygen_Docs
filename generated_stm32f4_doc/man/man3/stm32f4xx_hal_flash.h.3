.TH "inc/stm32f4xx_hal_flash.h" 3 "2020年 八月 7日 星期五" "Version 1.24.0" "STM32F4_HAL" \" -*- nroff -*-
.ad l
.nh
.SH NAME
inc/stm32f4xx_hal_flash.h \- Header file of FLASH HAL module\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'stm32f4xx_hal_def\&.h'\fP
.br
\fC#include 'stm32f4xx_hal_flash_ex\&.h'\fP
.br
\fC#include 'stm32f4xx_hal_flash_ramfunc\&.h'\fP
.br

.SS "结构体"

.in +1c
.ti -1c
.RI "struct \fBFLASH_ProcessTypeDef\fP"
.br
.RI "FLASH handle Structure definition 
.br
 "
.in -1c
.SS "宏定义"

.in +1c
.ti -1c
.RI "#define \fBHAL_FLASH_ERROR_NONE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBHAL_FLASH_ERROR_RD\fP   0x00000001U"
.br
.ti -1c
.RI "#define \fBHAL_FLASH_ERROR_PGS\fP   0x00000002U"
.br
.ti -1c
.RI "#define \fBHAL_FLASH_ERROR_PGP\fP   0x00000004U"
.br
.ti -1c
.RI "#define \fBHAL_FLASH_ERROR_PGA\fP   0x00000008U"
.br
.ti -1c
.RI "#define \fBHAL_FLASH_ERROR_WRP\fP   0x00000010U"
.br
.ti -1c
.RI "#define \fBHAL_FLASH_ERROR_OPERATION\fP   0x00000020U"
.br
.ti -1c
.RI "#define \fBFLASH_TYPEPROGRAM_BYTE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBFLASH_TYPEPROGRAM_HALFWORD\fP   0x00000001U"
.br
.ti -1c
.RI "#define \fBFLASH_TYPEPROGRAM_WORD\fP   0x00000002U"
.br
.ti -1c
.RI "#define \fBFLASH_TYPEPROGRAM_DOUBLEWORD\fP   0x00000003U"
.br
.ti -1c
.RI "#define \fBFLASH_FLAG_EOP\fP   FLASH_SR_EOP"
.br
.ti -1c
.RI "#define \fBFLASH_FLAG_OPERR\fP   FLASH_SR_SOP"
.br
.ti -1c
.RI "#define \fBFLASH_FLAG_WRPERR\fP   FLASH_SR_WRPERR"
.br
.ti -1c
.RI "#define \fBFLASH_FLAG_PGAERR\fP   FLASH_SR_PGAERR"
.br
.ti -1c
.RI "#define \fBFLASH_FLAG_PGPERR\fP   FLASH_SR_PGPERR"
.br
.ti -1c
.RI "#define \fBFLASH_FLAG_PGSERR\fP   FLASH_SR_PGSERR"
.br
.ti -1c
.RI "#define \fBFLASH_FLAG_BSY\fP   FLASH_SR_BSY"
.br
.ti -1c
.RI "#define \fBFLASH_IT_EOP\fP   FLASH_CR_EOPIE"
.br
.ti -1c
.RI "#define \fBFLASH_IT_ERR\fP   0x02000000U"
.br
.ti -1c
.RI "#define \fBFLASH_PSIZE_BYTE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBFLASH_PSIZE_HALF_WORD\fP   0x00000100U"
.br
.ti -1c
.RI "#define \fBFLASH_PSIZE_WORD\fP   0x00000200U"
.br
.ti -1c
.RI "#define \fBFLASH_PSIZE_DOUBLE_WORD\fP   0x00000300U"
.br
.ti -1c
.RI "#define \fBCR_PSIZE_MASK\fP   0xFFFFFCFFU"
.br
.ti -1c
.RI "#define \fBRDP_KEY\fP   ((uint16_t)0x00A5)"
.br
.ti -1c
.RI "#define \fBFLASH_KEY1\fP   0x45670123U"
.br
.ti -1c
.RI "#define \fBFLASH_KEY2\fP   0xCDEF89ABU"
.br
.ti -1c
.RI "#define \fBFLASH_OPT_KEY1\fP   0x08192A3BU"
.br
.ti -1c
.RI "#define \fBFLASH_OPT_KEY2\fP   0x4C5D6E7FU"
.br
.ti -1c
.RI "#define \fB__HAL_FLASH_SET_LATENCY\fP(__LATENCY__)   (*(__IO uint8_t *)\fBACR_BYTE0_ADDRESS\fP = (uint8_t)(__LATENCY__))"
.br
.RI "Set the FLASH Latency\&. "
.ti -1c
.RI "#define \fB__HAL_FLASH_GET_LATENCY\fP()   (READ_BIT((FLASH\->ACR), FLASH_ACR_LATENCY))"
.br
.RI "Get the FLASH Latency\&. "
.ti -1c
.RI "#define \fB__HAL_FLASH_PREFETCH_BUFFER_ENABLE\fP()   (FLASH\->ACR |= FLASH_ACR_PRFTEN)"
.br
.RI "Enable the FLASH prefetch buffer\&. "
.ti -1c
.RI "#define \fB__HAL_FLASH_PREFETCH_BUFFER_DISABLE\fP()   (FLASH\->ACR &= (~FLASH_ACR_PRFTEN))"
.br
.RI "Disable the FLASH prefetch buffer\&. "
.ti -1c
.RI "#define \fB__HAL_FLASH_INSTRUCTION_CACHE_ENABLE\fP()   (FLASH\->ACR |= FLASH_ACR_ICEN)"
.br
.RI "Enable the FLASH instruction cache\&. "
.ti -1c
.RI "#define \fB__HAL_FLASH_INSTRUCTION_CACHE_DISABLE\fP()   (FLASH\->ACR &= (~FLASH_ACR_ICEN))"
.br
.RI "Disable the FLASH instruction cache\&. "
.ti -1c
.RI "#define \fB__HAL_FLASH_DATA_CACHE_ENABLE\fP()   (FLASH\->ACR |= FLASH_ACR_DCEN)"
.br
.RI "Enable the FLASH data cache\&. "
.ti -1c
.RI "#define \fB__HAL_FLASH_DATA_CACHE_DISABLE\fP()   (FLASH\->ACR &= (~FLASH_ACR_DCEN))"
.br
.RI "Disable the FLASH data cache\&. "
.ti -1c
.RI "#define \fB__HAL_FLASH_INSTRUCTION_CACHE_RESET\fP()"
.br
.RI "Resets the FLASH instruction Cache\&. "
.ti -1c
.RI "#define \fB__HAL_FLASH_DATA_CACHE_RESET\fP()"
.br
.RI "Resets the FLASH data Cache\&. "
.ti -1c
.RI "#define \fB__HAL_FLASH_ENABLE_IT\fP(__INTERRUPT__)   (FLASH\->CR |= (__INTERRUPT__))"
.br
.RI "Enable the specified FLASH interrupt\&. "
.ti -1c
.RI "#define \fB__HAL_FLASH_DISABLE_IT\fP(__INTERRUPT__)   (FLASH\->CR &= ~(uint32_t)(__INTERRUPT__))"
.br
.RI "Disable the specified FLASH interrupt\&. "
.ti -1c
.RI "#define \fB__HAL_FLASH_GET_FLAG\fP(__FLAG__)   ((FLASH\->SR & (__FLAG__)))"
.br
.RI "Get the specified FLASH flag status\&. "
.ti -1c
.RI "#define \fB__HAL_FLASH_CLEAR_FLAG\fP(__FLAG__)   (FLASH\->SR = (__FLAG__))"
.br
.RI "Clear the specified FLASH flags\&. "
.ti -1c
.RI "#define \fBACR_BYTE0_ADDRESS\fP   0x40023C00U"
.br
.RI "ACR register byte 0 (Bits[7:0]) base address 
.br
 "
.ti -1c
.RI "#define \fBOPTCR_BYTE0_ADDRESS\fP   0x40023C14U"
.br
.RI "OPTCR register byte 0 (Bits[7:0]) base address 
.br
 "
.ti -1c
.RI "#define \fBOPTCR_BYTE1_ADDRESS\fP   0x40023C15U"
.br
.RI "OPTCR register byte 1 (Bits[15:8]) base address 
.br
 "
.ti -1c
.RI "#define \fBOPTCR_BYTE2_ADDRESS\fP   0x40023C16U"
.br
.RI "OPTCR register byte 2 (Bits[23:16]) base address 
.br
 "
.ti -1c
.RI "#define \fBOPTCR_BYTE3_ADDRESS\fP   0x40023C17U"
.br
.RI "OPTCR register byte 3 (Bits[31:24]) base address 
.br
 "
.ti -1c
.RI "#define \fBIS_FLASH_TYPEPROGRAM\fP(VALUE)"
.br
.in -1c
.SS "枚举"

.in +1c
.ti -1c
.RI "enum \fBFLASH_ProcedureTypeDef\fP { \fBFLASH_PROC_NONE\fP = 0U, \fBFLASH_PROC_SECTERASE\fP, \fBFLASH_PROC_MASSERASE\fP, \fBFLASH_PROC_PROGRAM\fP }"
.br
.RI "FLASH Procedure structure definition "
.in -1c
.SS "函数"

.in +1c
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_FLASH_Program\fP (uint32_t TypeProgram, uint32_t Address, uint64_t Data)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_FLASH_Program_IT\fP (uint32_t TypeProgram, uint32_t Address, uint64_t Data)"
.br
.ti -1c
.RI "void \fBHAL_FLASH_IRQHandler\fP (void)"
.br
.ti -1c
.RI "void \fBHAL_FLASH_EndOfOperationCallback\fP (uint32_t ReturnValue)"
.br
.ti -1c
.RI "void \fBHAL_FLASH_OperationErrorCallback\fP (uint32_t ReturnValue)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_FLASH_Unlock\fP (void)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_FLASH_Lock\fP (void)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_FLASH_OB_Unlock\fP (void)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_FLASH_OB_Lock\fP (void)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_FLASH_OB_Launch\fP (void)"
.br
.ti -1c
.RI "uint32_t \fBHAL_FLASH_GetError\fP (void)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBFLASH_WaitForLastOperation\fP (uint32_t Timeout)"
.br
.in -1c
.SH "详细描述"
.PP 
Header file of FLASH HAL module\&. 


.PP
\fB作者\fP
.RS 4
MCD Application Team 
.RE
.PP
\fB注意\fP
.RS 4
.RE
.PP
.SS "(C) Copyright (c) 2017 STMicroelectronics\&. All rights reserved\&."
.PP
This software component is licensed by ST under BSD 3-Clause license, the 'License'; You may not use this file except in compliance with the License\&. You may obtain a copy of the License at: opensource\&.org/licenses/BSD-3-Clause 
.PP
在文件 \fBstm32f4xx_hal_flash\&.h\fP 中定义\&.
.SH "作者"
.PP 
由 Doyxgen 通过分析 STM32F4_HAL 的 源代码自动生成\&.
