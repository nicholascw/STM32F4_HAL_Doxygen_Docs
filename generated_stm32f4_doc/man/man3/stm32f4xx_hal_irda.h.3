.TH "inc/stm32f4xx_hal_irda.h" 3 "2020年 八月 7日 星期五" "Version 1.24.0" "STM32F4_HAL" \" -*- nroff -*-
.ad l
.nh
.SH NAME
inc/stm32f4xx_hal_irda.h \- Header file of IRDA HAL module\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'stm32f4xx_hal_def\&.h'\fP
.br

.SS "结构体"

.in +1c
.ti -1c
.RI "struct \fBIRDA_InitTypeDef\fP"
.br
.RI "IRDA Init Structure definition "
.ti -1c
.RI "struct \fBIRDA_HandleTypeDef\fP"
.br
.RI "IRDA handle Structure definition "
.in -1c
.SS "宏定义"

.in +1c
.ti -1c
.RI "#define \fBHAL_IRDA_ERROR_NONE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBHAL_IRDA_ERROR_PE\fP   0x00000001U"
.br
.ti -1c
.RI "#define \fBHAL_IRDA_ERROR_NE\fP   0x00000002U"
.br
.ti -1c
.RI "#define \fBHAL_IRDA_ERROR_FE\fP   0x00000004U"
.br
.ti -1c
.RI "#define \fBHAL_IRDA_ERROR_ORE\fP   0x00000008U"
.br
.ti -1c
.RI "#define \fBHAL_IRDA_ERROR_DMA\fP   0x00000010U"
.br
.ti -1c
.RI "#define \fBIRDA_WORDLENGTH_8B\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBIRDA_WORDLENGTH_9B\fP   ((uint32_t)USART_CR1_M)"
.br
.ti -1c
.RI "#define \fBIRDA_PARITY_NONE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBIRDA_PARITY_EVEN\fP   ((uint32_t)USART_CR1_PCE)"
.br
.ti -1c
.RI "#define \fBIRDA_PARITY_ODD\fP   ((uint32_t)(USART_CR1_PCE | USART_CR1_PS))"
.br
.ti -1c
.RI "#define \fBIRDA_MODE_RX\fP   ((uint32_t)USART_CR1_RE)"
.br
.ti -1c
.RI "#define \fBIRDA_MODE_TX\fP   ((uint32_t)USART_CR1_TE)"
.br
.ti -1c
.RI "#define \fBIRDA_MODE_TX_RX\fP   ((uint32_t)(USART_CR1_TE |USART_CR1_RE))"
.br
.ti -1c
.RI "#define \fBIRDA_POWERMODE_LOWPOWER\fP   ((uint32_t)USART_CR3_IRLP)"
.br
.ti -1c
.RI "#define \fBIRDA_POWERMODE_NORMAL\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBIRDA_FLAG_TXE\fP   ((uint32_t)USART_SR_TXE)"
.br
.ti -1c
.RI "#define \fBIRDA_FLAG_TC\fP   ((uint32_t)USART_SR_TC)"
.br
.ti -1c
.RI "#define \fBIRDA_FLAG_RXNE\fP   ((uint32_t)USART_SR_RXNE)"
.br
.ti -1c
.RI "#define \fBIRDA_FLAG_IDLE\fP   ((uint32_t)USART_SR_IDLE)"
.br
.ti -1c
.RI "#define \fBIRDA_FLAG_ORE\fP   ((uint32_t)USART_SR_ORE)"
.br
.ti -1c
.RI "#define \fBIRDA_FLAG_NE\fP   ((uint32_t)USART_SR_NE)"
.br
.ti -1c
.RI "#define \fBIRDA_FLAG_FE\fP   ((uint32_t)USART_SR_FE)"
.br
.ti -1c
.RI "#define \fBIRDA_FLAG_PE\fP   ((uint32_t)USART_SR_PE)"
.br
.ti -1c
.RI "#define \fBIRDA_IT_PE\fP   ((uint32_t)(\fBIRDA_CR1_REG_INDEX\fP << 28U | USART_CR1_PEIE))"
.br
.ti -1c
.RI "#define \fBIRDA_IT_TXE\fP   ((uint32_t)(\fBIRDA_CR1_REG_INDEX\fP << 28U | USART_CR1_TXEIE))"
.br
.ti -1c
.RI "#define \fBIRDA_IT_TC\fP   ((uint32_t)(\fBIRDA_CR1_REG_INDEX\fP << 28U | USART_CR1_TCIE))"
.br
.ti -1c
.RI "#define \fBIRDA_IT_RXNE\fP   ((uint32_t)(\fBIRDA_CR1_REG_INDEX\fP << 28U | USART_CR1_RXNEIE))"
.br
.ti -1c
.RI "#define \fBIRDA_IT_IDLE\fP   ((uint32_t)(\fBIRDA_CR1_REG_INDEX\fP << 28U | USART_CR1_IDLEIE))"
.br
.ti -1c
.RI "#define \fBIRDA_IT_LBD\fP   ((uint32_t)(\fBIRDA_CR2_REG_INDEX\fP << 28U | USART_CR2_LBDIE))"
.br
.ti -1c
.RI "#define \fBIRDA_IT_CTS\fP   ((uint32_t)(\fBIRDA_CR3_REG_INDEX\fP << 28U | USART_CR3_CTSIE))"
.br
.ti -1c
.RI "#define \fBIRDA_IT_ERR\fP   ((uint32_t)(\fBIRDA_CR3_REG_INDEX\fP << 28U | USART_CR3_EIE))"
.br
.ti -1c
.RI "#define \fB__HAL_IRDA_RESET_HANDLE_STATE\fP(__HANDLE__)"
.br
.RI "Reset IRDA handle gstate & RxState "
.ti -1c
.RI "#define \fB__HAL_IRDA_FLUSH_DRREGISTER\fP(__HANDLE__)   ((__HANDLE__)\->Instance\->DR)"
.br
.RI "Flush the IRDA DR register "
.ti -1c
.RI "#define \fB__HAL_IRDA_GET_FLAG\fP(__HANDLE__,  __FLAG__)   (((__HANDLE__)\->Instance\->SR & (__FLAG__)) == (__FLAG__))"
.br
.RI "Check whether the specified IRDA flag is set or not\&. "
.ti -1c
.RI "#define \fB__HAL_IRDA_CLEAR_FLAG\fP(__HANDLE__,  __FLAG__)   ((__HANDLE__)\->Instance\->SR = ~(__FLAG__))"
.br
.RI "Clear the specified IRDA pending flag\&. "
.ti -1c
.RI "#define \fB__HAL_IRDA_CLEAR_PEFLAG\fP(__HANDLE__)"
.br
.RI "Clear the IRDA PE pending flag\&. "
.ti -1c
.RI "#define \fB__HAL_IRDA_CLEAR_FEFLAG\fP(__HANDLE__)   \fB__HAL_IRDA_CLEAR_PEFLAG\fP(__HANDLE__)"
.br
.RI "Clear the IRDA FE pending flag\&. "
.ti -1c
.RI "#define \fB__HAL_IRDA_CLEAR_NEFLAG\fP(__HANDLE__)   \fB__HAL_IRDA_CLEAR_PEFLAG\fP(__HANDLE__)"
.br
.RI "Clear the IRDA NE pending flag\&. "
.ti -1c
.RI "#define \fB__HAL_IRDA_CLEAR_OREFLAG\fP(__HANDLE__)   \fB__HAL_IRDA_CLEAR_PEFLAG\fP(__HANDLE__)"
.br
.RI "Clear the IRDA ORE pending flag\&. "
.ti -1c
.RI "#define \fB__HAL_IRDA_CLEAR_IDLEFLAG\fP(__HANDLE__)   \fB__HAL_IRDA_CLEAR_PEFLAG\fP(__HANDLE__)"
.br
.RI "Clear the IRDA IDLE pending flag\&. "
.ti -1c
.RI "#define \fB__HAL_IRDA_ENABLE_IT\fP(__HANDLE__,  __INTERRUPT__)"
.br
.RI "Enable the specified IRDA interrupt\&. "
.ti -1c
.RI "#define \fB__HAL_IRDA_DISABLE_IT\fP(__HANDLE__,  __INTERRUPT__)"
.br
.RI "Disable the specified IRDA interrupt\&. "
.ti -1c
.RI "#define \fB__HAL_IRDA_GET_IT_SOURCE\fP(__HANDLE__,  __IT__)"
.br
.RI "Check whether the specified IRDA interrupt has occurred or not\&. "
.ti -1c
.RI "#define \fB__HAL_IRDA_ONE_BIT_SAMPLE_ENABLE\fP(__HANDLE__)   ((__HANDLE__)\->Instance\->CR3 |= USART_CR3_ONEBIT)"
.br
.RI "Macro to enable the IRDA's one bit sample method "
.ti -1c
.RI "#define \fB__HAL_IRDA_ONE_BIT_SAMPLE_DISABLE\fP(__HANDLE__)   ((__HANDLE__)\->Instance\->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT))"
.br
.RI "Macro to disable the IRDA's one bit sample method "
.ti -1c
.RI "#define \fB__HAL_IRDA_ENABLE\fP(__HANDLE__)   (SET_BIT((__HANDLE__)\->Instance\->CR1, USART_CR1_UE))"
.br
.RI "Enable UART/USART associated to IRDA Handle "
.ti -1c
.RI "#define \fB__HAL_IRDA_DISABLE\fP(__HANDLE__)   (CLEAR_BIT((__HANDLE__)\->Instance\->CR1, USART_CR1_UE))"
.br
.RI "Disable UART/USART associated to IRDA Handle "
.ti -1c
.RI "#define \fBIRDA_IT_MASK\fP"
.br
.RI "IRDA interruptions flag mask "
.ti -1c
.RI "#define \fBIRDA_CR1_REG_INDEX\fP   1U"
.br
.ti -1c
.RI "#define \fBIRDA_CR2_REG_INDEX\fP   2U"
.br
.ti -1c
.RI "#define \fBIRDA_CR3_REG_INDEX\fP   3U"
.br
.ti -1c
.RI "#define \fBIS_IRDA_WORD_LENGTH\fP(LENGTH)"
.br
.ti -1c
.RI "#define \fBIS_IRDA_PARITY\fP(PARITY)"
.br
.ti -1c
.RI "#define \fBIS_IRDA_MODE\fP(MODE)   ((((MODE) & 0x0000FFF3U) == 0x00U) && ((MODE) != 0x00000000U))"
.br
.ti -1c
.RI "#define \fBIS_IRDA_POWERMODE\fP(MODE)"
.br
.ti -1c
.RI "#define \fBIS_IRDA_BAUDRATE\fP(BAUDRATE)   ((BAUDRATE) < 115201U)"
.br
.ti -1c
.RI "#define \fBIRDA_DIV\fP(_PCLK_,  _BAUD_)   (((_PCLK_)*25U)/(4U*(_BAUD_)))"
.br
.ti -1c
.RI "#define \fBIRDA_DIVMANT\fP(_PCLK_,  _BAUD_)   (\fBIRDA_DIV\fP((_PCLK_), (_BAUD_))/100U)"
.br
.ti -1c
.RI "#define \fBIRDA_DIVFRAQ\fP(_PCLK_,  _BAUD_)   (((\fBIRDA_DIV\fP((_PCLK_), (_BAUD_)) \- (\fBIRDA_DIVMANT\fP((_PCLK_), (_BAUD_)) * 100U)) * 16U + 50U) / 100U)"
.br
.ti -1c
.RI "#define \fBIRDA_BRR\fP(_PCLK_,  _BAUD_)"
.br
.in -1c
.SS "枚举"

.in +1c
.ti -1c
.RI "enum \fBHAL_IRDA_StateTypeDef\fP { \fBHAL_IRDA_STATE_RESET\fP = 0x00U, \fBHAL_IRDA_STATE_READY\fP = 0x20U, \fBHAL_IRDA_STATE_BUSY\fP = 0x24U, \fBHAL_IRDA_STATE_BUSY_TX\fP = 0x21U, \fBHAL_IRDA_STATE_BUSY_RX\fP = 0x22U, \fBHAL_IRDA_STATE_BUSY_TX_RX\fP = 0x23U, \fBHAL_IRDA_STATE_TIMEOUT\fP = 0xA0U, \fBHAL_IRDA_STATE_ERROR\fP = 0xE0U }"
.br
.RI "HAL IRDA State structures definition "
.in -1c
.SS "函数"

.in +1c
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_IRDA_Init\fP (\fBIRDA_HandleTypeDef\fP *hirda)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_IRDA_DeInit\fP (\fBIRDA_HandleTypeDef\fP *hirda)"
.br
.ti -1c
.RI "void \fBHAL_IRDA_MspInit\fP (\fBIRDA_HandleTypeDef\fP *hirda)"
.br
.ti -1c
.RI "void \fBHAL_IRDA_MspDeInit\fP (\fBIRDA_HandleTypeDef\fP *hirda)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_IRDA_Transmit\fP (\fBIRDA_HandleTypeDef\fP *hirda, uint8_t *pData, uint16_t Size, uint32_t Timeout)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_IRDA_Receive\fP (\fBIRDA_HandleTypeDef\fP *hirda, uint8_t *pData, uint16_t Size, uint32_t Timeout)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_IRDA_Transmit_IT\fP (\fBIRDA_HandleTypeDef\fP *hirda, uint8_t *pData, uint16_t Size)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_IRDA_Receive_IT\fP (\fBIRDA_HandleTypeDef\fP *hirda, uint8_t *pData, uint16_t Size)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_IRDA_Transmit_DMA\fP (\fBIRDA_HandleTypeDef\fP *hirda, uint8_t *pData, uint16_t Size)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_IRDA_Receive_DMA\fP (\fBIRDA_HandleTypeDef\fP *hirda, uint8_t *pData, uint16_t Size)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_IRDA_DMAPause\fP (\fBIRDA_HandleTypeDef\fP *hirda)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_IRDA_DMAResume\fP (\fBIRDA_HandleTypeDef\fP *hirda)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_IRDA_DMAStop\fP (\fBIRDA_HandleTypeDef\fP *hirda)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_IRDA_Abort\fP (\fBIRDA_HandleTypeDef\fP *hirda)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_IRDA_AbortTransmit\fP (\fBIRDA_HandleTypeDef\fP *hirda)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_IRDA_AbortReceive\fP (\fBIRDA_HandleTypeDef\fP *hirda)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_IRDA_Abort_IT\fP (\fBIRDA_HandleTypeDef\fP *hirda)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_IRDA_AbortTransmit_IT\fP (\fBIRDA_HandleTypeDef\fP *hirda)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_IRDA_AbortReceive_IT\fP (\fBIRDA_HandleTypeDef\fP *hirda)"
.br
.ti -1c
.RI "void \fBHAL_IRDA_IRQHandler\fP (\fBIRDA_HandleTypeDef\fP *hirda)"
.br
.ti -1c
.RI "void \fBHAL_IRDA_TxCpltCallback\fP (\fBIRDA_HandleTypeDef\fP *hirda)"
.br
.ti -1c
.RI "void \fBHAL_IRDA_RxCpltCallback\fP (\fBIRDA_HandleTypeDef\fP *hirda)"
.br
.ti -1c
.RI "void \fBHAL_IRDA_TxHalfCpltCallback\fP (\fBIRDA_HandleTypeDef\fP *hirda)"
.br
.ti -1c
.RI "void \fBHAL_IRDA_RxHalfCpltCallback\fP (\fBIRDA_HandleTypeDef\fP *hirda)"
.br
.ti -1c
.RI "void \fBHAL_IRDA_ErrorCallback\fP (\fBIRDA_HandleTypeDef\fP *hirda)"
.br
.ti -1c
.RI "void \fBHAL_IRDA_AbortCpltCallback\fP (\fBIRDA_HandleTypeDef\fP *hirda)"
.br
.ti -1c
.RI "void \fBHAL_IRDA_AbortTransmitCpltCallback\fP (\fBIRDA_HandleTypeDef\fP *hirda)"
.br
.ti -1c
.RI "void \fBHAL_IRDA_AbortReceiveCpltCallback\fP (\fBIRDA_HandleTypeDef\fP *hirda)"
.br
.ti -1c
.RI "\fBHAL_IRDA_StateTypeDef\fP \fBHAL_IRDA_GetState\fP (\fBIRDA_HandleTypeDef\fP *hirda)"
.br
.ti -1c
.RI "uint32_t \fBHAL_IRDA_GetError\fP (\fBIRDA_HandleTypeDef\fP *hirda)"
.br
.in -1c
.SH "详细描述"
.PP 
Header file of IRDA HAL module\&. 


.PP
\fB作者\fP
.RS 4
MCD Application Team 
.RE
.PP
\fB注意\fP
.RS 4
.RE
.PP
.SS "(C) Copyright (c) 2016 STMicroelectronics\&. All rights reserved\&."
.PP
This software component is licensed by ST under BSD 3-Clause license, the 'License'; You may not use this file except in compliance with the License\&. You may obtain a copy of the License at: opensource\&.org/licenses/BSD-3-Clause 
.PP
在文件 \fBstm32f4xx_hal_irda\&.h\fP 中定义\&.
.SH "作者"
.PP 
由 Doyxgen 通过分析 STM32F4_HAL 的 源代码自动生成\&.
