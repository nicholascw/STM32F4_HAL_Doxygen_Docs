.TH "RCC_AHB1_Peripheral_Clock_Enable_Disable_Status" 3 "2020年 八月 7日 星期五" "Version 1.24.0" "STM32F4_HAL" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RCC_AHB1_Peripheral_Clock_Enable_Disable_Status \- Get the enable or disable status of the AHB1 peripheral clock\&.  

.SH SYNOPSIS
.br
.PP
.SS "宏定义"

.in +1c
.ti -1c
.RI "#define \fB__HAL_RCC_GPIOA_IS_CLK_ENABLED\fP()   ((RCC\->AHB1ENR &(RCC_AHB1ENR_GPIOAEN)) != RESET)"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_GPIOB_IS_CLK_ENABLED\fP()   ((RCC\->AHB1ENR &(RCC_AHB1ENR_GPIOBEN)) != RESET)"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_GPIOC_IS_CLK_ENABLED\fP()   ((RCC\->AHB1ENR &(RCC_AHB1ENR_GPIOCEN)) != RESET)"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_GPIOH_IS_CLK_ENABLED\fP()   ((RCC\->AHB1ENR &(RCC_AHB1ENR_GPIOHEN)) != RESET)"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_DMA1_IS_CLK_ENABLED\fP()   ((RCC\->AHB1ENR &(RCC_AHB1ENR_DMA1EN)) != RESET)"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_DMA2_IS_CLK_ENABLED\fP()   ((RCC\->AHB1ENR &(RCC_AHB1ENR_DMA2EN)) != RESET)"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_GPIOA_IS_CLK_DISABLED\fP()   ((RCC\->AHB1ENR &(RCC_AHB1ENR_GPIOAEN)) == RESET)"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_GPIOB_IS_CLK_DISABLED\fP()   ((RCC\->AHB1ENR &(RCC_AHB1ENR_GPIOBEN)) == RESET)"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_GPIOC_IS_CLK_DISABLED\fP()   ((RCC\->AHB1ENR &(RCC_AHB1ENR_GPIOCEN)) == RESET)"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_GPIOH_IS_CLK_DISABLED\fP()   ((RCC\->AHB1ENR &(RCC_AHB1ENR_GPIOHEN)) == RESET)"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_DMA1_IS_CLK_DISABLED\fP()   ((RCC\->AHB1ENR &(RCC_AHB1ENR_DMA1EN)) == RESET)"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_DMA2_IS_CLK_DISABLED\fP()   ((RCC\->AHB1ENR &(RCC_AHB1ENR_DMA2EN)) == RESET)"
.br
.in -1c
.SH "详细描述"
.PP 
Get the enable or disable status of the AHB1 peripheral clock\&. 


.PP
\fB注解\fP
.RS 4
After reset, the peripheral clock (used for registers read/write access) is disabled and the application software has to enable this clock before using it\&. 
.RE
.PP

.SH "宏定义说明"
.PP 
.SS "#define __HAL_RCC_DMA1_IS_CLK_DISABLED()   ((RCC\->AHB1ENR &(RCC_AHB1ENR_DMA1EN)) == RESET)"

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 458 行定义\&.
.SS "#define __HAL_RCC_DMA1_IS_CLK_ENABLED()   ((RCC\->AHB1ENR &(RCC_AHB1ENR_DMA1EN)) != RESET)"

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 451 行定义\&.
.SS "#define __HAL_RCC_DMA2_IS_CLK_DISABLED()   ((RCC\->AHB1ENR &(RCC_AHB1ENR_DMA2EN)) == RESET)"

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 459 行定义\&.
.SS "#define __HAL_RCC_DMA2_IS_CLK_ENABLED()   ((RCC\->AHB1ENR &(RCC_AHB1ENR_DMA2EN)) != RESET)"

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 452 行定义\&.
.SS "#define __HAL_RCC_GPIOA_IS_CLK_DISABLED()   ((RCC\->AHB1ENR &(RCC_AHB1ENR_GPIOAEN)) == RESET)"

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 454 行定义\&.
.SS "#define __HAL_RCC_GPIOA_IS_CLK_ENABLED()   ((RCC\->AHB1ENR &(RCC_AHB1ENR_GPIOAEN)) != RESET)"

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 447 行定义\&.
.SS "#define __HAL_RCC_GPIOB_IS_CLK_DISABLED()   ((RCC\->AHB1ENR &(RCC_AHB1ENR_GPIOBEN)) == RESET)"

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 455 行定义\&.
.SS "#define __HAL_RCC_GPIOB_IS_CLK_ENABLED()   ((RCC\->AHB1ENR &(RCC_AHB1ENR_GPIOBEN)) != RESET)"

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 448 行定义\&.
.SS "#define __HAL_RCC_GPIOC_IS_CLK_DISABLED()   ((RCC\->AHB1ENR &(RCC_AHB1ENR_GPIOCEN)) == RESET)"

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 456 行定义\&.
.SS "#define __HAL_RCC_GPIOC_IS_CLK_ENABLED()   ((RCC\->AHB1ENR &(RCC_AHB1ENR_GPIOCEN)) != RESET)"

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 449 行定义\&.
.SS "#define __HAL_RCC_GPIOH_IS_CLK_DISABLED()   ((RCC\->AHB1ENR &(RCC_AHB1ENR_GPIOHEN)) == RESET)"

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 457 行定义\&.
.SS "#define __HAL_RCC_GPIOH_IS_CLK_ENABLED()   ((RCC\->AHB1ENR &(RCC_AHB1ENR_GPIOHEN)) != RESET)"

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 450 行定义\&.
.SH "作者"
.PP 
由 Doyxgen 通过分析 STM32F4_HAL 的 源代码自动生成\&.
