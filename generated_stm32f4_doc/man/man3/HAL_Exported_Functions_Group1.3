.TH "HAL_Exported_Functions_Group1" 3 "2020年 八月 7日 星期五" "Version 1.24.0" "STM32F4_HAL" \" -*- nroff -*-
.ad l
.nh
.SH NAME
HAL_Exported_Functions_Group1 \- Initialization and de-initialization functions  

.SH SYNOPSIS
.br
.PP
.SS "函数"

.in +1c
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_Init\fP (void)"
.br
.RI "This function is used to initialize the HAL Library; it must be the first instruction to be executed in the main program (before to call any other HAL function), it performs the following: Configure the Flash prefetch, instruction and Data caches\&. Configures the SysTick to generate an interrupt each 1 millisecond, which is clocked by the HSI (at this stage, the clock is not yet configured and thus the system is running from the internal HSI at 16 MHz)\&. Set NVIC Group Priority to 4\&. Calls the \fBHAL_MspInit()\fP callback function defined in user file 'stm32f4xx_hal_msp\&.c' to do the global low level hardware initialization "
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_DeInit\fP (void)"
.br
.RI "This function de-Initializes common part of the HAL and stops the systick\&. This function is optional\&. 
.br
 "
.ti -1c
.RI "void \fBHAL_MspInit\fP (void)"
.br
.RI "Initialize the MSP\&. "
.ti -1c
.RI "void \fBHAL_MspDeInit\fP (void)"
.br
.RI "DeInitializes the MSP\&. "
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_InitTick\fP (uint32_t TickPriority)"
.br
.RI "This function configures the source of the time base\&. The time source is configured to have 1ms time base with a dedicated Tick interrupt priority\&. "
.in -1c
.SH "详细描述"
.PP 
Initialization and de-initialization functions 


.PP
.nf
 ===============================================================================
              ##### Initialization and Configuration functions #####
 ===============================================================================
    [..]  This section provides functions allowing to:
      (+) Initializes the Flash interface the NVIC allocation and initial clock 
          configuration. It initializes the systick also when timeout is needed 
          and the backup domain when enabled.
      (+) De-Initializes common part of the HAL.
      (+) Configure the time base source to have 1ms time base with a dedicated 
          Tick interrupt priority. 
        (++) SysTick timer is used by default as source of time base, but user
             can eventually implement his proper time base source (a general purpose 
             timer for example or other time source), keeping in mind that Time base 
             duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
             handled in milliseconds basis.
        (++) Time base configuration function (HAL_InitTick ()) is called automatically 
             at the beginning of the program after reset by HAL_Init() or at any time 
             when clock is configured, by HAL_RCC_ClockConfig(). 
        (++) Source of time base is configured  to generate interrupts at regular 
             time intervals. Care must be taken if HAL_Delay() is called from a 
             peripheral ISR process, the Tick interrupt line must have higher priority 
            (numerically lower) than the peripheral interrupt. Otherwise the caller 
            ISR process will be blocked. 
       (++) functions affecting time base configurations are declared as __weak  
             to make  override possible  in case of other  implementations in user file.

.fi
.PP
 
.br
 
.SH "函数说明"
.PP 
.SS "\fBHAL_StatusTypeDef\fP HAL_DeInit (void)"

.PP
This function de-Initializes common part of the HAL and stops the systick\&. This function is optional\&. 
.br
 
.PP
\fB返回值\fP
.RS 4
\fIHAL\fP status 
.RE
.PP

.PP
在文件 stm32f4xx_hal\&.c 第 190 行定义\&.
.SS "\fBHAL_StatusTypeDef\fP HAL_Init (void)"

.PP
This function is used to initialize the HAL Library; it must be the first instruction to be executed in the main program (before to call any other HAL function), it performs the following: Configure the Flash prefetch, instruction and Data caches\&. Configures the SysTick to generate an interrupt each 1 millisecond, which is clocked by the HSI (at this stage, the clock is not yet configured and thus the system is running from the internal HSI at 16 MHz)\&. Set NVIC Group Priority to 4\&. Calls the \fBHAL_MspInit()\fP callback function defined in user file 'stm32f4xx_hal_msp\&.c' to do the global low level hardware initialization 
.PP
\fB注解\fP
.RS 4
SysTick is used as time base for the \fBHAL_Delay()\fP function, the application need to ensure that the SysTick time base is always set to 1 millisecond to have correct HAL operation\&. 
.RE
.PP
\fB返回值\fP
.RS 4
\fIHAL\fP status 
.RE
.PP

.PP
在文件 stm32f4xx_hal\&.c 第 157 行定义\&.
.SS "__weak \fBHAL_StatusTypeDef\fP HAL_InitTick (uint32_t TickPriority)"

.PP
This function configures the source of the time base\&. The time source is configured to have 1ms time base with a dedicated Tick interrupt priority\&. 
.PP
\fB注解\fP
.RS 4
This function is called automatically at the beginning of program after reset by \fBHAL_Init()\fP or at any time when clock is reconfigured by \fBHAL_RCC_ClockConfig()\fP\&. 
.PP
In the default implementation, SysTick timer is the source of time base\&. It is used to generate interrupts at regular time intervals\&. Care must be taken if \fBHAL_Delay()\fP is called from a peripheral ISR process, The SysTick interrupt must have higher priority (numerically lower) than the peripheral interrupt\&. Otherwise the caller ISR process will be blocked\&. The function is declared as __weak to be overwritten in case of other implementation in user file\&. 
.RE
.PP
\fB参数\fP
.RS 4
\fITickPriority\fP Tick interrupt priority\&. 
.RE
.PP
\fB返回值\fP
.RS 4
\fIHAL\fP status 
.RE
.PP

.PP
在文件 stm32f4xx_hal\&.c 第 253 行定义\&.
.SS "__weak void HAL_MspDeInit (void)"

.PP
DeInitializes the MSP\&. 
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal\&.c 第 230 行定义\&.
.SS "__weak void HAL_MspInit (void)"

.PP
Initialize the MSP\&. 
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal\&.c 第 219 行定义\&.
.SH "作者"
.PP 
由 Doyxgen 通过分析 STM32F4_HAL 的 源代码自动生成\&.
