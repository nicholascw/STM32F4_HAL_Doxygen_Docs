.TH "UART_Exported_Types" 3 "2020年 八月 7日 星期五" "Version 1.24.0" "STM32F4_HAL" \" -*- nroff -*-
.ad l
.nh
.SH NAME
UART_Exported_Types
.SH SYNOPSIS
.br
.PP
.SS "结构体"

.in +1c
.ti -1c
.RI "struct \fBUART_InitTypeDef\fP"
.br
.RI "UART Init Structure definition "
.ti -1c
.RI "struct \fB__UART_HandleTypeDef\fP"
.br
.RI "UART handle Structure definition "
.in -1c
.SS "类型定义"

.in +1c
.ti -1c
.RI "typedef struct \fB__UART_HandleTypeDef\fP \fBUART_HandleTypeDef\fP"
.br
.RI "UART handle Structure definition "
.in -1c
.SS "枚举"

.in +1c
.ti -1c
.RI "enum \fBHAL_UART_StateTypeDef\fP { \fBHAL_UART_STATE_RESET\fP = 0x00U, \fBHAL_UART_STATE_READY\fP = 0x20U, \fBHAL_UART_STATE_BUSY\fP = 0x24U, \fBHAL_UART_STATE_BUSY_TX\fP = 0x21U, \fBHAL_UART_STATE_BUSY_RX\fP = 0x22U, \fBHAL_UART_STATE_BUSY_TX_RX\fP = 0x23U, \fBHAL_UART_STATE_TIMEOUT\fP = 0xA0U, \fBHAL_UART_STATE_ERROR\fP = 0xE0U }"
.br
.RI "HAL UART State structures definition "
.in -1c
.SH "详细描述"
.PP 

.SH "类型定义说明"
.PP 
.SS "typedef struct \fB__UART_HandleTypeDef\fP \fBUART_HandleTypeDef\fP"

.PP
UART handle Structure definition 
.SH "枚举类型说明"
.PP 
.SS "enum \fBHAL_UART_StateTypeDef\fP"

.PP
HAL UART State structures definition 
.PP
\fB注解\fP
.RS 4
HAL UART State value is a combination of 2 different substates: gState and RxState\&.
.IP "\(bu" 2
gState contains UART state information related to global Handle management and also information related to Tx operations\&. gState value coding follow below described bitmap : b7-b6 Error information 00 : No Error 01 : (Not Used) 10 : Timeout 11 : Error b5 Peripheral initialization status 0 : Reset (Peripheral not initialized) 1 : Init done (Peripheral not initialized\&. HAL UART Init function already called) b4-b3 (not used) xx : Should be set to 00 b2 Intrinsic process state 0 : Ready 1 : Busy (Peripheral busy with some configuration or internal operations) b1 (not used) x : Should be set to 0 b0 Tx state 0 : Ready (no Tx operation ongoing) 1 : Busy (Tx operation ongoing)
.IP "\(bu" 2
RxState contains information related to Rx operations\&. RxState value coding follow below described bitmap : b7-b6 (not used) xx : Should be set to 00 b5 Peripheral initialization status 0 : Reset (Peripheral not initialized) 1 : Init done (Peripheral not initialized) b4-b2 (not used) xxx : Should be set to 000 b1 Rx state 0 : Ready (no Rx operation ongoing) 1 : Busy (Rx operation ongoing) b0 (not used) x : Should be set to 0\&. 
.PP
.RE
.PP

.PP
\fB枚举值\fP
.in +1c
.TP
\fB\fIHAL_UART_STATE_RESET \fP\fP
Peripheral is not yet Initialized Value is allowed for gState and RxState 
.TP
\fB\fIHAL_UART_STATE_READY \fP\fP
Peripheral Initialized and ready for use Value is allowed for gState and RxState 
.TP
\fB\fIHAL_UART_STATE_BUSY \fP\fP
an internal process is ongoing Value is allowed for gState only 
.TP
\fB\fIHAL_UART_STATE_BUSY_TX \fP\fP
Data Transmission process is ongoing Value is allowed for gState only 
.TP
\fB\fIHAL_UART_STATE_BUSY_RX \fP\fP
Data Reception process is ongoing Value is allowed for RxState only 
.TP
\fB\fIHAL_UART_STATE_BUSY_TX_RX \fP\fP
Data Transmission and Reception process is ongoing Not to be used for neither gState nor RxState\&. Value is result of combination (Or) between gState and RxState values 
.TP
\fB\fIHAL_UART_STATE_TIMEOUT \fP\fP
Timeout state Value is allowed for gState only 
.TP
\fB\fIHAL_UART_STATE_ERROR \fP\fP
Error Value is allowed for gState only 
.PP
在文件 stm32f4xx_hal_uart\&.h 第 117 行定义\&.
.SH "作者"
.PP 
由 Doyxgen 通过分析 STM32F4_HAL 的 源代码自动生成\&.
