.TH "inc/stm32f4xx_hal_dma.h" 3 "2020年 八月 7日 星期五" "Version 1.24.0" "STM32F4_HAL" \" -*- nroff -*-
.ad l
.nh
.SH NAME
inc/stm32f4xx_hal_dma.h \- Header file of DMA HAL module\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'stm32f4xx_hal_def\&.h'\fP
.br
\fC#include 'stm32f4xx_hal_dma_ex\&.h'\fP
.br

.SS "结构体"

.in +1c
.ti -1c
.RI "struct \fBDMA_InitTypeDef\fP"
.br
.RI "DMA Configuration Structure definition "
.ti -1c
.RI "struct \fB__DMA_HandleTypeDef\fP"
.br
.RI "DMA handle Structure definition "
.in -1c
.SS "宏定义"

.in +1c
.ti -1c
.RI "#define \fBHAL_DMA_ERROR_NONE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBHAL_DMA_ERROR_TE\fP   0x00000001U"
.br
.ti -1c
.RI "#define \fBHAL_DMA_ERROR_FE\fP   0x00000002U"
.br
.ti -1c
.RI "#define \fBHAL_DMA_ERROR_DME\fP   0x00000004U"
.br
.ti -1c
.RI "#define \fBHAL_DMA_ERROR_TIMEOUT\fP   0x00000020U"
.br
.ti -1c
.RI "#define \fBHAL_DMA_ERROR_PARAM\fP   0x00000040U"
.br
.ti -1c
.RI "#define \fBHAL_DMA_ERROR_NO_XFER\fP   0x00000080U"
.br
.ti -1c
.RI "#define \fBHAL_DMA_ERROR_NOT_SUPPORTED\fP   0x00000100U"
.br
.ti -1c
.RI "#define \fBDMA_CHANNEL_0\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBDMA_CHANNEL_1\fP   0x02000000U"
.br
.ti -1c
.RI "#define \fBDMA_CHANNEL_2\fP   0x04000000U"
.br
.ti -1c
.RI "#define \fBDMA_CHANNEL_3\fP   0x06000000U"
.br
.ti -1c
.RI "#define \fBDMA_CHANNEL_4\fP   0x08000000U"
.br
.ti -1c
.RI "#define \fBDMA_CHANNEL_5\fP   0x0A000000U"
.br
.ti -1c
.RI "#define \fBDMA_CHANNEL_6\fP   0x0C000000U"
.br
.ti -1c
.RI "#define \fBDMA_CHANNEL_7\fP   0x0E000000U"
.br
.ti -1c
.RI "#define \fBDMA_PERIPH_TO_MEMORY\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBDMA_MEMORY_TO_PERIPH\fP   ((uint32_t)DMA_SxCR_DIR_0)"
.br
.ti -1c
.RI "#define \fBDMA_MEMORY_TO_MEMORY\fP   ((uint32_t)DMA_SxCR_DIR_1)"
.br
.ti -1c
.RI "#define \fBDMA_PINC_ENABLE\fP   ((uint32_t)DMA_SxCR_PINC)"
.br
.ti -1c
.RI "#define \fBDMA_PINC_DISABLE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBDMA_MINC_ENABLE\fP   ((uint32_t)DMA_SxCR_MINC)"
.br
.ti -1c
.RI "#define \fBDMA_MINC_DISABLE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBDMA_PDATAALIGN_BYTE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBDMA_PDATAALIGN_HALFWORD\fP   ((uint32_t)DMA_SxCR_PSIZE_0)"
.br
.ti -1c
.RI "#define \fBDMA_PDATAALIGN_WORD\fP   ((uint32_t)DMA_SxCR_PSIZE_1)"
.br
.ti -1c
.RI "#define \fBDMA_MDATAALIGN_BYTE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBDMA_MDATAALIGN_HALFWORD\fP   ((uint32_t)DMA_SxCR_MSIZE_0)"
.br
.ti -1c
.RI "#define \fBDMA_MDATAALIGN_WORD\fP   ((uint32_t)DMA_SxCR_MSIZE_1)"
.br
.ti -1c
.RI "#define \fBDMA_NORMAL\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBDMA_CIRCULAR\fP   ((uint32_t)DMA_SxCR_CIRC)"
.br
.ti -1c
.RI "#define \fBDMA_PFCTRL\fP   ((uint32_t)DMA_SxCR_PFCTRL)"
.br
.ti -1c
.RI "#define \fBDMA_PRIORITY_LOW\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBDMA_PRIORITY_MEDIUM\fP   ((uint32_t)DMA_SxCR_PL_0)"
.br
.ti -1c
.RI "#define \fBDMA_PRIORITY_HIGH\fP   ((uint32_t)DMA_SxCR_PL_1)"
.br
.ti -1c
.RI "#define \fBDMA_PRIORITY_VERY_HIGH\fP   ((uint32_t)DMA_SxCR_PL)"
.br
.ti -1c
.RI "#define \fBDMA_FIFOMODE_DISABLE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBDMA_FIFOMODE_ENABLE\fP   ((uint32_t)DMA_SxFCR_DMDIS)"
.br
.ti -1c
.RI "#define \fBDMA_FIFO_THRESHOLD_1QUARTERFULL\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBDMA_FIFO_THRESHOLD_HALFFULL\fP   ((uint32_t)DMA_SxFCR_FTH_0)"
.br
.ti -1c
.RI "#define \fBDMA_FIFO_THRESHOLD_3QUARTERSFULL\fP   ((uint32_t)DMA_SxFCR_FTH_1)"
.br
.ti -1c
.RI "#define \fBDMA_FIFO_THRESHOLD_FULL\fP   ((uint32_t)DMA_SxFCR_FTH)"
.br
.ti -1c
.RI "#define \fBDMA_MBURST_SINGLE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBDMA_MBURST_INC4\fP   ((uint32_t)DMA_SxCR_MBURST_0)"
.br
.ti -1c
.RI "#define \fBDMA_MBURST_INC8\fP   ((uint32_t)DMA_SxCR_MBURST_1)"
.br
.ti -1c
.RI "#define \fBDMA_MBURST_INC16\fP   ((uint32_t)DMA_SxCR_MBURST)"
.br
.ti -1c
.RI "#define \fBDMA_PBURST_SINGLE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBDMA_PBURST_INC4\fP   ((uint32_t)DMA_SxCR_PBURST_0)"
.br
.ti -1c
.RI "#define \fBDMA_PBURST_INC8\fP   ((uint32_t)DMA_SxCR_PBURST_1)"
.br
.ti -1c
.RI "#define \fBDMA_PBURST_INC16\fP   ((uint32_t)DMA_SxCR_PBURST)"
.br
.ti -1c
.RI "#define \fBDMA_IT_TC\fP   ((uint32_t)DMA_SxCR_TCIE)"
.br
.ti -1c
.RI "#define \fBDMA_IT_HT\fP   ((uint32_t)DMA_SxCR_HTIE)"
.br
.ti -1c
.RI "#define \fBDMA_IT_TE\fP   ((uint32_t)DMA_SxCR_TEIE)"
.br
.ti -1c
.RI "#define \fBDMA_IT_DME\fP   ((uint32_t)DMA_SxCR_DMEIE)"
.br
.ti -1c
.RI "#define \fBDMA_IT_FE\fP   0x00000080U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_FEIF0_4\fP   0x00000001U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_DMEIF0_4\fP   0x00000004U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_TEIF0_4\fP   0x00000008U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_HTIF0_4\fP   0x00000010U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_TCIF0_4\fP   0x00000020U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_FEIF1_5\fP   0x00000040U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_DMEIF1_5\fP   0x00000100U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_TEIF1_5\fP   0x00000200U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_HTIF1_5\fP   0x00000400U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_TCIF1_5\fP   0x00000800U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_FEIF2_6\fP   0x00010000U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_DMEIF2_6\fP   0x00040000U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_TEIF2_6\fP   0x00080000U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_HTIF2_6\fP   0x00100000U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_TCIF2_6\fP   0x00200000U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_FEIF3_7\fP   0x00400000U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_DMEIF3_7\fP   0x01000000U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_TEIF3_7\fP   0x02000000U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_HTIF3_7\fP   0x04000000U"
.br
.ti -1c
.RI "#define \fBDMA_FLAG_TCIF3_7\fP   0x08000000U"
.br
.ti -1c
.RI "#define \fB__HAL_DMA_RESET_HANDLE_STATE\fP(__HANDLE__)   ((__HANDLE__)\->State = \fBHAL_DMA_STATE_RESET\fP)"
.br
.RI "Reset DMA handle state "
.ti -1c
.RI "#define \fB__HAL_DMA_GET_FS\fP(__HANDLE__)   (((__HANDLE__)\->Instance\->FCR & (DMA_SxFCR_FS)))"
.br
.RI "Return the current DMA Stream FIFO filled level\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_ENABLE\fP(__HANDLE__)   ((__HANDLE__)\->Instance\->CR |=  DMA_SxCR_EN)"
.br
.RI "Enable the specified DMA Stream\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_DISABLE\fP(__HANDLE__)   ((__HANDLE__)\->Instance\->CR &=  ~DMA_SxCR_EN)"
.br
.RI "Disable the specified DMA Stream\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_GET_TC_FLAG_INDEX\fP(__HANDLE__)"
.br
.RI "Return the current DMA Stream transfer complete flag\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_GET_HT_FLAG_INDEX\fP(__HANDLE__)"
.br
.RI "Return the current DMA Stream half transfer complete flag\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_GET_TE_FLAG_INDEX\fP(__HANDLE__)"
.br
.RI "Return the current DMA Stream transfer error flag\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_GET_FE_FLAG_INDEX\fP(__HANDLE__)"
.br
.RI "Return the current DMA Stream FIFO error flag\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_GET_DME_FLAG_INDEX\fP(__HANDLE__)"
.br
.RI "Return the current DMA Stream direct mode error flag\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_GET_FLAG\fP(__HANDLE__,  __FLAG__)"
.br
.RI "Get the DMA Stream pending flags\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_CLEAR_FLAG\fP(__HANDLE__,  __FLAG__)"
.br
.RI "Clear the DMA Stream pending flags\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_ENABLE_IT\fP(__HANDLE__,  __INTERRUPT__)"
.br
.RI "Enable the specified DMA Stream interrupts\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_DISABLE_IT\fP(__HANDLE__,  __INTERRUPT__)"
.br
.RI "Disable the specified DMA Stream interrupts\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_GET_IT_SOURCE\fP(__HANDLE__,  __INTERRUPT__)"
.br
.RI "Check whether the specified DMA Stream interrupt is enabled or disabled\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_SET_COUNTER\fP(__HANDLE__,  __COUNTER__)   ((__HANDLE__)\->Instance\->NDTR = (uint16_t)(__COUNTER__))"
.br
.RI "Writes the number of data units to be transferred on the DMA Stream\&. "
.ti -1c
.RI "#define \fB__HAL_DMA_GET_COUNTER\fP(__HANDLE__)   ((__HANDLE__)\->Instance\->NDTR)"
.br
.RI "Returns the number of remaining data units in the current DMAy Streamx transfer\&. "
.ti -1c
.RI "#define \fBIS_DMA_CHANNEL\fP(CHANNEL)"
.br
.ti -1c
.RI "#define \fBIS_DMA_DIRECTION\fP(DIRECTION)"
.br
.ti -1c
.RI "#define \fBIS_DMA_BUFFER_SIZE\fP(SIZE)   (((SIZE) >= 0x01U) && ((SIZE) < 0x10000U))"
.br
.ti -1c
.RI "#define \fBIS_DMA_PERIPHERAL_INC_STATE\fP(STATE)"
.br
.ti -1c
.RI "#define \fBIS_DMA_MEMORY_INC_STATE\fP(STATE)"
.br
.ti -1c
.RI "#define \fBIS_DMA_PERIPHERAL_DATA_SIZE\fP(SIZE)"
.br
.ti -1c
.RI "#define \fBIS_DMA_MEMORY_DATA_SIZE\fP(SIZE)"
.br
.ti -1c
.RI "#define \fBIS_DMA_MODE\fP(MODE)"
.br
.ti -1c
.RI "#define \fBIS_DMA_PRIORITY\fP(PRIORITY)"
.br
.ti -1c
.RI "#define \fBIS_DMA_FIFO_MODE_STATE\fP(STATE)"
.br
.ti -1c
.RI "#define \fBIS_DMA_FIFO_THRESHOLD\fP(THRESHOLD)"
.br
.ti -1c
.RI "#define \fBIS_DMA_MEMORY_BURST\fP(BURST)"
.br
.ti -1c
.RI "#define \fBIS_DMA_PERIPHERAL_BURST\fP(BURST)"
.br
.in -1c
.SS "类型定义"

.in +1c
.ti -1c
.RI "typedef struct \fB__DMA_HandleTypeDef\fP \fBDMA_HandleTypeDef\fP"
.br
.RI "DMA handle Structure definition "
.in -1c
.SS "枚举"

.in +1c
.ti -1c
.RI "enum \fBHAL_DMA_StateTypeDef\fP { \fBHAL_DMA_STATE_RESET\fP = 0x00U, \fBHAL_DMA_STATE_READY\fP = 0x01U, \fBHAL_DMA_STATE_BUSY\fP = 0x02U, \fBHAL_DMA_STATE_TIMEOUT\fP = 0x03U, \fBHAL_DMA_STATE_ERROR\fP = 0x04U, \fBHAL_DMA_STATE_ABORT\fP = 0x05U }"
.br
.RI "HAL DMA State structures definition "
.ti -1c
.RI "enum \fBHAL_DMA_LevelCompleteTypeDef\fP { \fBHAL_DMA_FULL_TRANSFER\fP = 0x00U, \fBHAL_DMA_HALF_TRANSFER\fP = 0x01U }"
.br
.RI "HAL DMA Error Code structure definition "
.ti -1c
.RI "enum \fBHAL_DMA_CallbackIDTypeDef\fP { \fBHAL_DMA_XFER_CPLT_CB_ID\fP = 0x00U, \fBHAL_DMA_XFER_HALFCPLT_CB_ID\fP = 0x01U, \fBHAL_DMA_XFER_M1CPLT_CB_ID\fP = 0x02U, \fBHAL_DMA_XFER_M1HALFCPLT_CB_ID\fP = 0x03U, \fBHAL_DMA_XFER_ERROR_CB_ID\fP = 0x04U, \fBHAL_DMA_XFER_ABORT_CB_ID\fP = 0x05U, \fBHAL_DMA_XFER_ALL_CB_ID\fP = 0x06U }"
.br
.RI "HAL DMA Error Code structure definition "
.in -1c
.SS "函数"

.in +1c
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_DMA_Init\fP (\fBDMA_HandleTypeDef\fP *hdma)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_DMA_DeInit\fP (\fBDMA_HandleTypeDef\fP *hdma)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_DMA_Start\fP (\fBDMA_HandleTypeDef\fP *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_DMA_Start_IT\fP (\fBDMA_HandleTypeDef\fP *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_DMA_Abort\fP (\fBDMA_HandleTypeDef\fP *hdma)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_DMA_Abort_IT\fP (\fBDMA_HandleTypeDef\fP *hdma)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_DMA_PollForTransfer\fP (\fBDMA_HandleTypeDef\fP *hdma, \fBHAL_DMA_LevelCompleteTypeDef\fP CompleteLevel, uint32_t Timeout)"
.br
.ti -1c
.RI "void \fBHAL_DMA_IRQHandler\fP (\fBDMA_HandleTypeDef\fP *hdma)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_DMA_CleanCallbacks\fP (\fBDMA_HandleTypeDef\fP *hdma)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_DMA_RegisterCallback\fP (\fBDMA_HandleTypeDef\fP *hdma, \fBHAL_DMA_CallbackIDTypeDef\fP CallbackID, void(*pCallback)(\fBDMA_HandleTypeDef\fP *_hdma))"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_DMA_UnRegisterCallback\fP (\fBDMA_HandleTypeDef\fP *hdma, \fBHAL_DMA_CallbackIDTypeDef\fP CallbackID)"
.br
.ti -1c
.RI "\fBHAL_DMA_StateTypeDef\fP \fBHAL_DMA_GetState\fP (\fBDMA_HandleTypeDef\fP *hdma)"
.br
.ti -1c
.RI "uint32_t \fBHAL_DMA_GetError\fP (\fBDMA_HandleTypeDef\fP *hdma)"
.br
.in -1c
.SH "详细描述"
.PP 
Header file of DMA HAL module\&. 


.PP
\fB作者\fP
.RS 4
MCD Application Team 
.RE
.PP
\fB注意\fP
.RS 4
.RE
.PP
.SS "(C) Copyright (c) 2017 STMicroelectronics\&. All rights reserved\&."
.PP
This software component is licensed by ST under BSD 3-Clause license, the 'License'; You may not use this file except in compliance with the License\&. You may obtain a copy of the License at: opensource\&.org/licenses/BSD-3-Clause 
.PP
在文件 \fBstm32f4xx_hal_dma\&.h\fP 中定义\&.
.SH "作者"
.PP 
由 Doyxgen 通过分析 STM32F4_HAL 的 源代码自动生成\&.
