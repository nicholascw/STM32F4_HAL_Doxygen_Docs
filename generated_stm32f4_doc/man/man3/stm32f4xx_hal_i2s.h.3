.TH "inc/stm32f4xx_hal_i2s.h" 3 "2020年 八月 7日 星期五" "Version 1.24.0" "STM32F4_HAL" \" -*- nroff -*-
.ad l
.nh
.SH NAME
inc/stm32f4xx_hal_i2s.h \- Header file of I2S HAL module\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'stm32f4xx_hal_def\&.h'\fP
.br
\fC#include 'stm32f4xx_hal_i2s_ex\&.h'\fP
.br

.SS "结构体"

.in +1c
.ti -1c
.RI "struct \fBI2S_InitTypeDef\fP"
.br
.RI "I2S Init structure definition "
.ti -1c
.RI "struct \fB__I2S_HandleTypeDef\fP"
.br
.RI "I2S handle Structure definition "
.in -1c
.SS "宏定义"

.in +1c
.ti -1c
.RI "#define \fBHAL_I2S_ERROR_NONE\fP   (0x00000000U)"
.br
.ti -1c
.RI "#define \fBHAL_I2S_ERROR_TIMEOUT\fP   (0x00000001U)"
.br
.ti -1c
.RI "#define \fBHAL_I2S_ERROR_OVR\fP   (0x00000002U)"
.br
.ti -1c
.RI "#define \fBHAL_I2S_ERROR_UDR\fP   (0x00000004U)"
.br
.ti -1c
.RI "#define \fBHAL_I2S_ERROR_DMA\fP   (0x00000008U)"
.br
.ti -1c
.RI "#define \fBHAL_I2S_ERROR_PRESCALER\fP   (0x00000010U)"
.br
.ti -1c
.RI "#define \fBI2S_MODE_SLAVE_TX\fP   (0x00000000U)"
.br
.ti -1c
.RI "#define \fBI2S_MODE_SLAVE_RX\fP   (SPI_I2SCFGR_I2SCFG_0)"
.br
.ti -1c
.RI "#define \fBI2S_MODE_MASTER_TX\fP   (SPI_I2SCFGR_I2SCFG_1)"
.br
.ti -1c
.RI "#define \fBI2S_MODE_MASTER_RX\fP   ((SPI_I2SCFGR_I2SCFG_0 | SPI_I2SCFGR_I2SCFG_1))"
.br
.ti -1c
.RI "#define \fBI2S_STANDARD_PHILIPS\fP   (0x00000000U)"
.br
.ti -1c
.RI "#define \fBI2S_STANDARD_MSB\fP   (SPI_I2SCFGR_I2SSTD_0)"
.br
.ti -1c
.RI "#define \fBI2S_STANDARD_LSB\fP   (SPI_I2SCFGR_I2SSTD_1)"
.br
.ti -1c
.RI "#define \fBI2S_STANDARD_PCM_SHORT\fP   ((SPI_I2SCFGR_I2SSTD_0 | SPI_I2SCFGR_I2SSTD_1))"
.br
.ti -1c
.RI "#define \fBI2S_STANDARD_PCM_LONG\fP   ((SPI_I2SCFGR_I2SSTD_0 | SPI_I2SCFGR_I2SSTD_1 | SPI_I2SCFGR_PCMSYNC))"
.br
.ti -1c
.RI "#define \fBI2S_DATAFORMAT_16B\fP   (0x00000000U)"
.br
.ti -1c
.RI "#define \fBI2S_DATAFORMAT_16B_EXTENDED\fP   (SPI_I2SCFGR_CHLEN)"
.br
.ti -1c
.RI "#define \fBI2S_DATAFORMAT_24B\fP   ((SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN_0))"
.br
.ti -1c
.RI "#define \fBI2S_DATAFORMAT_32B\fP   ((SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN_1))"
.br
.ti -1c
.RI "#define \fBI2S_MCLKOUTPUT_ENABLE\fP   (SPI_I2SPR_MCKOE)"
.br
.ti -1c
.RI "#define \fBI2S_MCLKOUTPUT_DISABLE\fP   (0x00000000U)"
.br
.ti -1c
.RI "#define \fBI2S_AUDIOFREQ_192K\fP   (192000U)"
.br
.ti -1c
.RI "#define \fBI2S_AUDIOFREQ_96K\fP   (96000U)"
.br
.ti -1c
.RI "#define \fBI2S_AUDIOFREQ_48K\fP   (48000U)"
.br
.ti -1c
.RI "#define \fBI2S_AUDIOFREQ_44K\fP   (44100U)"
.br
.ti -1c
.RI "#define \fBI2S_AUDIOFREQ_32K\fP   (32000U)"
.br
.ti -1c
.RI "#define \fBI2S_AUDIOFREQ_22K\fP   (22050U)"
.br
.ti -1c
.RI "#define \fBI2S_AUDIOFREQ_16K\fP   (16000U)"
.br
.ti -1c
.RI "#define \fBI2S_AUDIOFREQ_11K\fP   (11025U)"
.br
.ti -1c
.RI "#define \fBI2S_AUDIOFREQ_8K\fP   (8000U)"
.br
.ti -1c
.RI "#define \fBI2S_AUDIOFREQ_DEFAULT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBI2S_FULLDUPLEXMODE_DISABLE\fP   (0x00000000U)"
.br
.ti -1c
.RI "#define \fBI2S_FULLDUPLEXMODE_ENABLE\fP   (0x00000001U)"
.br
.ti -1c
.RI "#define \fBI2S_CPOL_LOW\fP   (0x00000000U)"
.br
.ti -1c
.RI "#define \fBI2S_CPOL_HIGH\fP   (SPI_I2SCFGR_CKPOL)"
.br
.ti -1c
.RI "#define \fBI2S_IT_TXE\fP   SPI_CR2_TXEIE"
.br
.ti -1c
.RI "#define \fBI2S_IT_RXNE\fP   SPI_CR2_RXNEIE"
.br
.ti -1c
.RI "#define \fBI2S_IT_ERR\fP   SPI_CR2_ERRIE"
.br
.ti -1c
.RI "#define \fBI2S_FLAG_TXE\fP   SPI_SR_TXE"
.br
.ti -1c
.RI "#define \fBI2S_FLAG_RXNE\fP   SPI_SR_RXNE"
.br
.ti -1c
.RI "#define \fBI2S_FLAG_UDR\fP   SPI_SR_UDR"
.br
.ti -1c
.RI "#define \fBI2S_FLAG_OVR\fP   SPI_SR_OVR"
.br
.ti -1c
.RI "#define \fBI2S_FLAG_FRE\fP   SPI_SR_FRE"
.br
.ti -1c
.RI "#define \fBI2S_FLAG_CHSIDE\fP   SPI_SR_CHSIDE"
.br
.ti -1c
.RI "#define \fBI2S_FLAG_BSY\fP   SPI_SR_BSY"
.br
.ti -1c
.RI "#define \fBI2S_FLAG_MASK\fP   (SPI_SR_RXNE | SPI_SR_TXE | SPI_SR_UDR | SPI_SR_OVR | SPI_SR_FRE | SPI_SR_CHSIDE | SPI_SR_BSY)"
.br
.ti -1c
.RI "#define \fB__HAL_I2S_RESET_HANDLE_STATE\fP(__HANDLE__)   ((__HANDLE__)\->State = \fBHAL_I2S_STATE_RESET\fP)"
.br
.RI "Reset I2S handle state "
.ti -1c
.RI "#define \fB__HAL_I2S_ENABLE\fP(__HANDLE__)   (SET_BIT((__HANDLE__)\->Instance\->I2SCFGR, SPI_I2SCFGR_I2SE))"
.br
.RI "Enable the specified SPI peripheral (in I2S mode)\&. "
.ti -1c
.RI "#define \fB__HAL_I2S_DISABLE\fP(__HANDLE__)   (CLEAR_BIT((__HANDLE__)\->Instance\->I2SCFGR, SPI_I2SCFGR_I2SE))"
.br
.RI "Disable the specified SPI peripheral (in I2S mode)\&. "
.ti -1c
.RI "#define \fB__HAL_I2S_ENABLE_IT\fP(__HANDLE__,  __INTERRUPT__)   (SET_BIT((__HANDLE__)\->Instance\->CR2,(__INTERRUPT__)))"
.br
.RI "Enable the specified I2S interrupts\&. "
.ti -1c
.RI "#define \fB__HAL_I2S_DISABLE_IT\fP(__HANDLE__,  __INTERRUPT__)   (CLEAR_BIT((__HANDLE__)\->Instance\->CR2,(__INTERRUPT__)))"
.br
.RI "Disable the specified I2S interrupts\&. "
.ti -1c
.RI "#define \fB__HAL_I2S_GET_IT_SOURCE\fP(__HANDLE__,  __INTERRUPT__)   ((((__HANDLE__)\->Instance\->CR2 & (__INTERRUPT__)) == (__INTERRUPT__)) ? SET : RESET)"
.br
.RI "Checks if the specified I2S interrupt source is enabled or disabled\&. "
.ti -1c
.RI "#define \fB__HAL_I2S_GET_FLAG\fP(__HANDLE__,  __FLAG__)   ((((__HANDLE__)\->Instance\->SR) & (__FLAG__)) == (__FLAG__))"
.br
.RI "Checks whether the specified I2S flag is set or not\&. "
.ti -1c
.RI "#define \fB__HAL_I2S_CLEAR_OVRFLAG\fP(__HANDLE__)"
.br
.RI "Clears the I2S OVR pending flag\&. "
.ti -1c
.RI "#define \fB__HAL_I2S_CLEAR_UDRFLAG\fP(__HANDLE__)"
.br
.RI "Clears the I2S UDR pending flag\&. "
.ti -1c
.RI "#define \fBI2S_CHECK_FLAG\fP(__SR__,  __FLAG__)   ((((__SR__) & ((__FLAG__) & \fBI2S_FLAG_MASK\fP)) == ((__FLAG__) & \fBI2S_FLAG_MASK\fP)) ? SET : RESET)"
.br
.RI "Check whether the specified SPI flag is set or not\&. "
.ti -1c
.RI "#define \fBI2S_CHECK_IT_SOURCE\fP(__CR2__,  __INTERRUPT__)   ((((__CR2__) & (__INTERRUPT__)) == (__INTERRUPT__)) ? SET : RESET)"
.br
.RI "Check whether the specified SPI Interrupt is set or not\&. "
.ti -1c
.RI "#define \fBIS_I2S_MODE\fP(__MODE__)"
.br
.RI "Checks if I2S Mode parameter is in allowed range\&. "
.ti -1c
.RI "#define \fBIS_I2S_STANDARD\fP(__STANDARD__)"
.br
.ti -1c
.RI "#define \fBIS_I2S_DATA_FORMAT\fP(__FORMAT__)"
.br
.ti -1c
.RI "#define \fBIS_I2S_MCLK_OUTPUT\fP(__OUTPUT__)"
.br
.ti -1c
.RI "#define \fBIS_I2S_AUDIO_FREQ\fP(__FREQ__)"
.br
.ti -1c
.RI "#define \fBIS_I2S_FULLDUPLEX_MODE\fP(MODE)"
.br
.ti -1c
.RI "#define \fBIS_I2S_CPOL\fP(__CPOL__)"
.br
.RI "Checks if I2S Serial clock steady state parameter is in allowed range\&. "
.in -1c
.SS "类型定义"

.in +1c
.ti -1c
.RI "typedef struct \fB__I2S_HandleTypeDef\fP \fBI2S_HandleTypeDef\fP"
.br
.RI "I2S handle Structure definition "
.in -1c
.SS "枚举"

.in +1c
.ti -1c
.RI "enum \fBHAL_I2S_StateTypeDef\fP { \fBHAL_I2S_STATE_RESET\fP = 0x00U, \fBHAL_I2S_STATE_READY\fP = 0x01U, \fBHAL_I2S_STATE_BUSY\fP = 0x02U, \fBHAL_I2S_STATE_BUSY_TX\fP = 0x03U, \fBHAL_I2S_STATE_BUSY_RX\fP = 0x04U, \fBHAL_I2S_STATE_BUSY_TX_RX\fP = 0x05U, \fBHAL_I2S_STATE_TIMEOUT\fP = 0x06U, \fBHAL_I2S_STATE_ERROR\fP = 0x07U }"
.br
.RI "HAL State structures definition "
.in -1c
.SS "函数"

.in +1c
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2S_Init\fP (\fBI2S_HandleTypeDef\fP *hi2s)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2S_DeInit\fP (\fBI2S_HandleTypeDef\fP *hi2s)"
.br
.ti -1c
.RI "void \fBHAL_I2S_MspInit\fP (\fBI2S_HandleTypeDef\fP *hi2s)"
.br
.ti -1c
.RI "void \fBHAL_I2S_MspDeInit\fP (\fBI2S_HandleTypeDef\fP *hi2s)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2S_Transmit\fP (\fBI2S_HandleTypeDef\fP *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2S_Receive\fP (\fBI2S_HandleTypeDef\fP *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2S_Transmit_IT\fP (\fBI2S_HandleTypeDef\fP *hi2s, uint16_t *pData, uint16_t Size)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2S_Receive_IT\fP (\fBI2S_HandleTypeDef\fP *hi2s, uint16_t *pData, uint16_t Size)"
.br
.ti -1c
.RI "void \fBHAL_I2S_IRQHandler\fP (\fBI2S_HandleTypeDef\fP *hi2s)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2S_Transmit_DMA\fP (\fBI2S_HandleTypeDef\fP *hi2s, uint16_t *pData, uint16_t Size)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2S_Receive_DMA\fP (\fBI2S_HandleTypeDef\fP *hi2s, uint16_t *pData, uint16_t Size)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2S_DMAPause\fP (\fBI2S_HandleTypeDef\fP *hi2s)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2S_DMAResume\fP (\fBI2S_HandleTypeDef\fP *hi2s)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2S_DMAStop\fP (\fBI2S_HandleTypeDef\fP *hi2s)"
.br
.ti -1c
.RI "void \fBHAL_I2S_TxHalfCpltCallback\fP (\fBI2S_HandleTypeDef\fP *hi2s)"
.br
.ti -1c
.RI "void \fBHAL_I2S_TxCpltCallback\fP (\fBI2S_HandleTypeDef\fP *hi2s)"
.br
.ti -1c
.RI "void \fBHAL_I2S_RxHalfCpltCallback\fP (\fBI2S_HandleTypeDef\fP *hi2s)"
.br
.ti -1c
.RI "void \fBHAL_I2S_RxCpltCallback\fP (\fBI2S_HandleTypeDef\fP *hi2s)"
.br
.ti -1c
.RI "void \fBHAL_I2S_ErrorCallback\fP (\fBI2S_HandleTypeDef\fP *hi2s)"
.br
.ti -1c
.RI "\fBHAL_I2S_StateTypeDef\fP \fBHAL_I2S_GetState\fP (\fBI2S_HandleTypeDef\fP *hi2s)"
.br
.ti -1c
.RI "uint32_t \fBHAL_I2S_GetError\fP (\fBI2S_HandleTypeDef\fP *hi2s)"
.br
.in -1c
.SH "详细描述"
.PP 
Header file of I2S HAL module\&. 


.PP
\fB作者\fP
.RS 4
MCD Application Team 
.RE
.PP
\fB注意\fP
.RS 4
.RE
.PP
.SS "(C) Copyright (c) 2016 STMicroelectronics\&. All rights reserved\&."
.PP
This software component is licensed by ST under BSD 3-Clause license, the 'License'; You may not use this file except in compliance with the License\&. You may obtain a copy of the License at: opensource\&.org/licenses/BSD-3-Clause 
.PP
在文件 \fBstm32f4xx_hal_i2s\&.h\fP 中定义\&.
.SH "作者"
.PP 
由 Doyxgen 通过分析 STM32F4_HAL 的 源代码自动生成\&.
