.TH "SMARTCARD_Exported_Macros" 3 "2020年 八月 7日 星期五" "Version 1.24.0" "STM32F4_HAL" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SMARTCARD_Exported_Macros
.SH SYNOPSIS
.br
.PP
.SS "宏定义"

.in +1c
.ti -1c
.RI "#define \fB__HAL_SMARTCARD_RESET_HANDLE_STATE\fP(__HANDLE__)"
.br
.RI "Reset SMARTCARD handle gstate & RxState "
.ti -1c
.RI "#define \fB__HAL_SMARTCARD_FLUSH_DRREGISTER\fP(__HANDLE__)   ((__HANDLE__)\->Instance\->DR)"
.br
.RI "Flush the Smartcard DR register "
.ti -1c
.RI "#define \fB__HAL_SMARTCARD_GET_FLAG\fP(__HANDLE__,  __FLAG__)   (((__HANDLE__)\->Instance\->SR & (__FLAG__)) == (__FLAG__))"
.br
.RI "Check whether the specified Smartcard flag is set or not\&. "
.ti -1c
.RI "#define \fB__HAL_SMARTCARD_CLEAR_FLAG\fP(__HANDLE__,  __FLAG__)   ((__HANDLE__)\->Instance\->SR = ~(__FLAG__))"
.br
.RI "Clear the specified Smartcard pending flags\&. "
.ti -1c
.RI "#define \fB__HAL_SMARTCARD_CLEAR_PEFLAG\fP(__HANDLE__)"
.br
.RI "Clear the SMARTCARD PE pending flag\&. "
.ti -1c
.RI "#define \fB__HAL_SMARTCARD_CLEAR_FEFLAG\fP(__HANDLE__)   \fB__HAL_SMARTCARD_CLEAR_PEFLAG\fP(__HANDLE__)"
.br
.RI "Clear the SMARTCARD FE pending flag\&. "
.ti -1c
.RI "#define \fB__HAL_SMARTCARD_CLEAR_NEFLAG\fP(__HANDLE__)   \fB__HAL_SMARTCARD_CLEAR_PEFLAG\fP(__HANDLE__)"
.br
.RI "Clear the SMARTCARD NE pending flag\&. "
.ti -1c
.RI "#define \fB__HAL_SMARTCARD_CLEAR_OREFLAG\fP(__HANDLE__)   \fB__HAL_SMARTCARD_CLEAR_PEFLAG\fP(__HANDLE__)"
.br
.RI "Clear the SMARTCARD ORE pending flag\&. "
.ti -1c
.RI "#define \fB__HAL_SMARTCARD_CLEAR_IDLEFLAG\fP(__HANDLE__)   \fB__HAL_SMARTCARD_CLEAR_PEFLAG\fP(__HANDLE__)"
.br
.RI "Clear the SMARTCARD IDLE pending flag\&. "
.ti -1c
.RI "#define \fB__HAL_SMARTCARD_ENABLE_IT\fP(__HANDLE__,  __INTERRUPT__)"
.br
.RI "Enable the specified SmartCard interrupt\&. "
.ti -1c
.RI "#define \fB__HAL_SMARTCARD_DISABLE_IT\fP(__HANDLE__,  __INTERRUPT__)"
.br
.RI "Disable the specified SmartCard interrupt\&. "
.ti -1c
.RI "#define \fB__HAL_SMARTCARD_GET_IT_SOURCE\fP(__HANDLE__,  __IT__)   (((((__IT__) >> 28U) == \fBSMARTCARD_CR1_REG_INDEX\fP)? (__HANDLE__)\->Instance\->CR1: (__HANDLE__)\->Instance\->CR3) & (((uint32_t)(__IT__)) & \fBSMARTCARD_IT_MASK\fP))"
.br
.RI "Checks whether the specified SmartCard interrupt has occurred or not\&. "
.ti -1c
.RI "#define \fB__HAL_SMARTCARD_ONE_BIT_SAMPLE_ENABLE\fP(__HANDLE__)   ((__HANDLE__)\->Instance\->CR3|= USART_CR3_ONEBIT)"
.br
.RI "Macro to enable the SMARTCARD's one bit sample method "
.ti -1c
.RI "#define \fB__HAL_SMARTCARD_ONE_BIT_SAMPLE_DISABLE\fP(__HANDLE__)   ((__HANDLE__)\->Instance\->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT))"
.br
.RI "Macro to disable the SMARTCARD's one bit sample method "
.ti -1c
.RI "#define \fB__HAL_SMARTCARD_ENABLE\fP(__HANDLE__)   ((__HANDLE__)\->Instance\->CR1 |=  USART_CR1_UE)"
.br
.RI "Enable the USART associated to the SMARTCARD Handle "
.ti -1c
.RI "#define \fB__HAL_SMARTCARD_DISABLE\fP(__HANDLE__)   ((__HANDLE__)\->Instance\->CR1 &=  ~USART_CR1_UE)"
.br
.RI "Disable the USART associated to the SMARTCARD Handle "
.ti -1c
.RI "#define \fB__HAL_SMARTCARD_DMA_REQUEST_ENABLE\fP(__HANDLE__,  __REQUEST__)   ((__HANDLE__)\->Instance\->CR3 |=  (__REQUEST__))"
.br
.RI "Macros to enable the SmartCard DMA request\&. "
.ti -1c
.RI "#define \fB__HAL_SMARTCARD_DMA_REQUEST_DISABLE\fP(__HANDLE__,  __REQUEST__)   ((__HANDLE__)\->Instance\->CR3 &=  ~(__REQUEST__))"
.br
.RI "Macros to disable the SmartCard DMA request\&. "
.in -1c
.SH "详细描述"
.PP 

.SH "宏定义说明"
.PP 
.SS "#define __HAL_SMARTCARD_CLEAR_FEFLAG(__HANDLE__)   \fB__HAL_SMARTCARD_CLEAR_PEFLAG\fP(__HANDLE__)"

.PP
Clear the SMARTCARD FE pending flag\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the USART Handle\&. SMARTCARD Handle selects the USARTx peripheral (USART availability and x value depending on device)\&. 
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_smartcard\&.h 第 501 行定义\&.
.SS "#define __HAL_SMARTCARD_CLEAR_FLAG(__HANDLE__, __FLAG__)   ((__HANDLE__)\->Instance\->SR = ~(__FLAG__))"

.PP
Clear the specified Smartcard pending flags\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the SMARTCARD Handle\&. SMARTCARD Handle selects the USARTx peripheral (USART availability and x value depending on device)\&. 
.br
\fI<strong>FLAG</strong>\fP specifies the flag to check\&. This parameter can be any combination of the following values: 
.PD 0

.IP "\(bu" 2
SMARTCARD_FLAG_TC: Transmission Complete flag\&. 
.IP "\(bu" 2
SMARTCARD_FLAG_RXNE: Receive data register not empty flag\&.
.PP
.RE
.PP
\fB注解\fP
.RS 4
PE (Parity error), FE (Framing error), NE (Noise error) and ORE (Overrun error) flags are cleared by software sequence: a read operation to USART_SR register followed by a read operation to USART_DR register\&. 
.PP
RXNE flag can be also cleared by a read to the USART_DR register\&. 
.PP
TC flag can be also cleared by software sequence: a read operation to USART_SR register followed by a write operation to USART_DR register\&. 
.PP
TXE flag is cleared only by a write to the USART_DR register\&. 
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_smartcard\&.h 第 481 行定义\&.
.SS "#define __HAL_SMARTCARD_CLEAR_IDLEFLAG(__HANDLE__)   \fB__HAL_SMARTCARD_CLEAR_PEFLAG\fP(__HANDLE__)"

.PP
Clear the SMARTCARD IDLE pending flag\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the USART Handle\&. SMARTCARD Handle selects the USARTx peripheral (USART availability and x value depending on device)\&. 
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_smartcard\&.h 第 522 行定义\&.
.SS "#define __HAL_SMARTCARD_CLEAR_NEFLAG(__HANDLE__)   \fB__HAL_SMARTCARD_CLEAR_PEFLAG\fP(__HANDLE__)"

.PP
Clear the SMARTCARD NE pending flag\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the USART Handle\&. SMARTCARD Handle selects the USARTx peripheral (USART availability and x value depending on device)\&. 
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_smartcard\&.h 第 508 行定义\&.
.SS "#define __HAL_SMARTCARD_CLEAR_OREFLAG(__HANDLE__)   \fB__HAL_SMARTCARD_CLEAR_PEFLAG\fP(__HANDLE__)"

.PP
Clear the SMARTCARD ORE pending flag\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the USART Handle\&. SMARTCARD Handle selects the USARTx peripheral (USART availability and x value depending on device)\&. 
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_smartcard\&.h 第 515 行定义\&.
.SS "#define __HAL_SMARTCARD_CLEAR_PEFLAG(__HANDLE__)"
\fB值:\fP
.PP
.nf
    do{                                           \
      __IO uint32_t tmpreg = 0x00U;               \
      tmpreg = (__HANDLE__)->Instance->SR;        \
      tmpreg = (__HANDLE__)->Instance->DR;        \
      UNUSED(tmpreg);                             \
    } while(0U)
.fi
.PP
Clear the SMARTCARD PE pending flag\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the USART Handle\&. SMARTCARD Handle selects the USARTx peripheral (USART availability and x value depending on device)\&. 
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_smartcard\&.h 第 488 行定义\&.
.SS "#define __HAL_SMARTCARD_DISABLE(__HANDLE__)   ((__HANDLE__)\->Instance\->CR1 &=  ~USART_CR1_UE)"

.PP
Disable the USART associated to the SMARTCARD Handle 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the SMARTCARD Handle\&. SMARTCARD Handle selects the USARTx peripheral (USART availability and x value depending on device)\&. 
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_smartcard\&.h 第 594 行定义\&.
.SS "#define __HAL_SMARTCARD_DISABLE_IT(__HANDLE__, __INTERRUPT__)"
\fB值:\fP
.PP
.nf
                                                                 ((((__INTERRUPT__) >> 28U) == SMARTCARD_CR1_REG_INDEX)? ((__HANDLE__)->Instance->CR1 &= ~((__INTERRUPT__) & SMARTCARD_IT_MASK)): \
                                                                 ((__HANDLE__)->Instance->CR3 &= ~ ((__INTERRUPT__) & SMARTCARD_IT_MASK)))
.fi
.PP
Disable the specified SmartCard interrupt\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the SMARTCARD Handle\&. SMARTCARD Handle selects the USARTx peripheral (USART availability and x value depending on device)\&. 
.br
\fI<strong>INTERRUPT</strong>\fP specifies the SMARTCARD interrupt to disable\&. This parameter can be one of the following values: 
.PD 0

.IP "\(bu" 2
SMARTCARD_IT_TXE: Transmit Data Register empty interrupt 
.IP "\(bu" 2
SMARTCARD_IT_TC: Transmission complete interrupt 
.IP "\(bu" 2
SMARTCARD_IT_RXNE: Receive Data register not empty interrupt 
.IP "\(bu" 2
SMARTCARD_IT_IDLE: Idle line detection interrupt 
.IP "\(bu" 2
SMARTCARD_IT_PE: Parity Error interrupt 
.IP "\(bu" 2
SMARTCARD_IT_ERR: Error interrupt(Frame error, noise error, overrun error) 
.PP
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_smartcard\&.h 第 553 行定义\&.
.SS "#define __HAL_SMARTCARD_DMA_REQUEST_DISABLE(__HANDLE__, __REQUEST__)   ((__HANDLE__)\->Instance\->CR3 &=  ~(__REQUEST__))"

.PP
Macros to disable the SmartCard DMA request\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the SmartCard Handle\&. 
.br
\fI<strong>REQUEST</strong>\fP specifies the SmartCard DMA request\&. This parameter can be one of the following values: 
.PD 0

.IP "\(bu" 2
SMARTCARD_DMAREQ_TX: SmartCard DMA transmit request 
.IP "\(bu" 2
SMARTCARD_DMAREQ_RX: SmartCard DMA receive request 
.PP
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_smartcard\&.h 第 614 行定义\&.
.SS "#define __HAL_SMARTCARD_DMA_REQUEST_ENABLE(__HANDLE__, __REQUEST__)   ((__HANDLE__)\->Instance\->CR3 |=  (__REQUEST__))"

.PP
Macros to enable the SmartCard DMA request\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the SmartCard Handle\&. 
.br
\fI<strong>REQUEST</strong>\fP specifies the SmartCard DMA request\&. This parameter can be one of the following values: 
.PD 0

.IP "\(bu" 2
SMARTCARD_DMAREQ_TX: SmartCard DMA transmit request 
.IP "\(bu" 2
SMARTCARD_DMAREQ_RX: SmartCard DMA receive request 
.PP
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_smartcard\&.h 第 604 行定义\&.
.SS "#define __HAL_SMARTCARD_ENABLE(__HANDLE__)   ((__HANDLE__)\->Instance\->CR1 |=  USART_CR1_UE)"

.PP
Enable the USART associated to the SMARTCARD Handle 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the SMARTCARD Handle\&. SMARTCARD Handle selects the USARTx peripheral (USART availability and x value depending on device)\&. 
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_smartcard\&.h 第 587 行定义\&.
.SS "#define __HAL_SMARTCARD_ENABLE_IT(__HANDLE__, __INTERRUPT__)"
\fB值:\fP
.PP
.nf
                                                                 ((((__INTERRUPT__) >> 28U) == SMARTCARD_CR1_REG_INDEX)? ((__HANDLE__)->Instance->CR1 |= ((__INTERRUPT__) & SMARTCARD_IT_MASK)): \
                                                                 ((__HANDLE__)->Instance->CR3 |= ((__INTERRUPT__) & SMARTCARD_IT_MASK)))
.fi
.PP
Enable the specified SmartCard interrupt\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the SMARTCARD Handle\&. SMARTCARD Handle selects the USARTx peripheral (USART availability and x value depending on device)\&. 
.br
\fI<strong>INTERRUPT</strong>\fP specifies the SMARTCARD interrupt to enable\&. This parameter can be one of the following values: 
.PD 0

.IP "\(bu" 2
SMARTCARD_IT_TXE: Transmit Data Register empty interrupt 
.IP "\(bu" 2
SMARTCARD_IT_TC: Transmission complete interrupt 
.IP "\(bu" 2
SMARTCARD_IT_RXNE: Receive Data register not empty interrupt 
.IP "\(bu" 2
SMARTCARD_IT_IDLE: Idle line detection interrupt 
.IP "\(bu" 2
SMARTCARD_IT_PE: Parity Error interrupt 
.IP "\(bu" 2
SMARTCARD_IT_ERR: Error interrupt(Frame error, noise error, overrun error) 
.PP
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_smartcard\&.h 第 537 行定义\&.
.SS "#define __HAL_SMARTCARD_FLUSH_DRREGISTER(__HANDLE__)   ((__HANDLE__)\->Instance\->DR)"

.PP
Flush the Smartcard DR register 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the SMARTCARD Handle\&. SMARTCARD Handle selects the USARTx peripheral (USART availability and x value depending on device)\&. 
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_smartcard\&.h 第 445 行定义\&.
.SS "#define __HAL_SMARTCARD_GET_FLAG(__HANDLE__, __FLAG__)   (((__HANDLE__)\->Instance\->SR & (__FLAG__)) == (__FLAG__))"

.PP
Check whether the specified Smartcard flag is set or not\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the SMARTCARD Handle\&. SMARTCARD Handle selects the USARTx peripheral (USART availability and x value depending on device)\&. 
.br
\fI<strong>FLAG</strong>\fP specifies the flag to check\&. This parameter can be one of the following values: 
.PD 0

.IP "\(bu" 2
SMARTCARD_FLAG_TXE: Transmit data register empty flag 
.IP "\(bu" 2
SMARTCARD_FLAG_TC: Transmission Complete flag 
.IP "\(bu" 2
SMARTCARD_FLAG_RXNE: Receive data register not empty flag 
.IP "\(bu" 2
SMARTCARD_FLAG_IDLE: Idle Line detection flag 
.IP "\(bu" 2
SMARTCARD_FLAG_ORE: Overrun Error flag 
.IP "\(bu" 2
SMARTCARD_FLAG_NE: Noise Error flag 
.IP "\(bu" 2
SMARTCARD_FLAG_FE: Framing Error flag 
.IP "\(bu" 2
SMARTCARD_FLAG_PE: Parity Error flag 
.PP
.RE
.PP
\fB返回值\fP
.RS 4
\fIThe\fP new state of \fBFLAG\fP (TRUE or FALSE)\&. 
.RE
.PP

.PP
在文件 stm32f4xx_hal_smartcard\&.h 第 462 行定义\&.
.SS "#define __HAL_SMARTCARD_GET_IT_SOURCE(__HANDLE__, __IT__)   (((((__IT__) >> 28U) == \fBSMARTCARD_CR1_REG_INDEX\fP)? (__HANDLE__)\->Instance\->CR1: (__HANDLE__)\->Instance\->CR3) & (((uint32_t)(__IT__)) & \fBSMARTCARD_IT_MASK\fP))"

.PP
Checks whether the specified SmartCard interrupt has occurred or not\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the SmartCard Handle\&. 
.br
\fI<strong>IT</strong>\fP specifies the SMARTCARD interrupt source to check\&. This parameter can be one of the following values: 
.PD 0

.IP "\(bu" 2
SMARTCARD_IT_TXE: Transmit Data Register empty interrupt 
.IP "\(bu" 2
SMARTCARD_IT_TC: Transmission complete interrupt 
.IP "\(bu" 2
SMARTCARD_IT_RXNE: Receive Data register not empty interrupt 
.IP "\(bu" 2
SMARTCARD_IT_IDLE: Idle line detection interrupt 
.IP "\(bu" 2
SMARTCARD_IT_ERR: Error interrupt 
.IP "\(bu" 2
SMARTCARD_IT_PE: Parity Error interrupt 
.PP
.RE
.PP
\fB返回值\fP
.RS 4
\fIThe\fP new state of \fBIT\fP (TRUE or FALSE)\&. 
.RE
.PP

.PP
在文件 stm32f4xx_hal_smartcard\&.h 第 568 行定义\&.
.SS "#define __HAL_SMARTCARD_ONE_BIT_SAMPLE_DISABLE(__HANDLE__)   ((__HANDLE__)\->Instance\->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT))"

.PP
Macro to disable the SMARTCARD's one bit sample method 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the SMARTCARD Handle\&. 
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_smartcard\&.h 第 580 行定义\&.
.SS "#define __HAL_SMARTCARD_ONE_BIT_SAMPLE_ENABLE(__HANDLE__)   ((__HANDLE__)\->Instance\->CR3|= USART_CR3_ONEBIT)"

.PP
Macro to enable the SMARTCARD's one bit sample method 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the SMARTCARD Handle\&. 
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_smartcard\&.h 第 574 行定义\&.
.SS "#define __HAL_SMARTCARD_RESET_HANDLE_STATE(__HANDLE__)"
\fB值:\fP
.PP
.nf
                                                           do{                                                       \
                                                           (__HANDLE__)->gState = HAL_SMARTCARD_STATE_RESET;      \
                                                           (__HANDLE__)->RxState = HAL_SMARTCARD_STATE_RESET;     \
                                                          } while(0U)
.fi
.PP
Reset SMARTCARD handle gstate & RxState 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the SMARTCARD Handle\&. SMARTCARD Handle selects the USARTx peripheral (USART availability and x value depending on device)\&. 
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_smartcard\&.h 第 434 行定义\&.
.SH "作者"
.PP 
由 Doyxgen 通过分析 STM32F4_HAL 的 源代码自动生成\&.
