.TH "inc/stm32f4xx_hal_uart.h" 3 "2020年 八月 7日 星期五" "Version 1.24.0" "STM32F4_HAL" \" -*- nroff -*-
.ad l
.nh
.SH NAME
inc/stm32f4xx_hal_uart.h \- Header file of UART HAL module\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'stm32f4xx_hal_def\&.h'\fP
.br

.SS "结构体"

.in +1c
.ti -1c
.RI "struct \fBUART_InitTypeDef\fP"
.br
.RI "UART Init Structure definition "
.ti -1c
.RI "struct \fB__UART_HandleTypeDef\fP"
.br
.RI "UART handle Structure definition "
.in -1c
.SS "宏定义"

.in +1c
.ti -1c
.RI "#define \fBHAL_UART_ERROR_NONE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBHAL_UART_ERROR_PE\fP   0x00000001U"
.br
.ti -1c
.RI "#define \fBHAL_UART_ERROR_NE\fP   0x00000002U"
.br
.ti -1c
.RI "#define \fBHAL_UART_ERROR_FE\fP   0x00000004U"
.br
.ti -1c
.RI "#define \fBHAL_UART_ERROR_ORE\fP   0x00000008U"
.br
.ti -1c
.RI "#define \fBHAL_UART_ERROR_DMA\fP   0x00000010U"
.br
.ti -1c
.RI "#define \fBUART_WORDLENGTH_8B\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBUART_WORDLENGTH_9B\fP   ((uint32_t)USART_CR1_M)"
.br
.ti -1c
.RI "#define \fBUART_STOPBITS_1\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBUART_STOPBITS_2\fP   ((uint32_t)USART_CR2_STOP_1)"
.br
.ti -1c
.RI "#define \fBUART_PARITY_NONE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBUART_PARITY_EVEN\fP   ((uint32_t)USART_CR1_PCE)"
.br
.ti -1c
.RI "#define \fBUART_PARITY_ODD\fP   ((uint32_t)(USART_CR1_PCE | USART_CR1_PS))"
.br
.ti -1c
.RI "#define \fBUART_HWCONTROL_NONE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBUART_HWCONTROL_RTS\fP   ((uint32_t)USART_CR3_RTSE)"
.br
.ti -1c
.RI "#define \fBUART_HWCONTROL_CTS\fP   ((uint32_t)USART_CR3_CTSE)"
.br
.ti -1c
.RI "#define \fBUART_HWCONTROL_RTS_CTS\fP   ((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE))"
.br
.ti -1c
.RI "#define \fBUART_MODE_RX\fP   ((uint32_t)USART_CR1_RE)"
.br
.ti -1c
.RI "#define \fBUART_MODE_TX\fP   ((uint32_t)USART_CR1_TE)"
.br
.ti -1c
.RI "#define \fBUART_MODE_TX_RX\fP   ((uint32_t)(USART_CR1_TE | USART_CR1_RE))"
.br
.ti -1c
.RI "#define \fBUART_STATE_DISABLE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBUART_STATE_ENABLE\fP   ((uint32_t)USART_CR1_UE)"
.br
.ti -1c
.RI "#define \fBUART_OVERSAMPLING_16\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBUART_OVERSAMPLING_8\fP   ((uint32_t)USART_CR1_OVER8)"
.br
.ti -1c
.RI "#define \fBUART_LINBREAKDETECTLENGTH_10B\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBUART_LINBREAKDETECTLENGTH_11B\fP   ((uint32_t)USART_CR2_LBDL)"
.br
.ti -1c
.RI "#define \fBUART_WAKEUPMETHOD_IDLELINE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBUART_WAKEUPMETHOD_ADDRESSMARK\fP   ((uint32_t)USART_CR1_WAKE)"
.br
.ti -1c
.RI "#define \fBUART_FLAG_CTS\fP   ((uint32_t)USART_SR_CTS)"
.br
.ti -1c
.RI "#define \fBUART_FLAG_LBD\fP   ((uint32_t)USART_SR_LBD)"
.br
.ti -1c
.RI "#define \fBUART_FLAG_TXE\fP   ((uint32_t)USART_SR_TXE)"
.br
.ti -1c
.RI "#define \fBUART_FLAG_TC\fP   ((uint32_t)USART_SR_TC)"
.br
.ti -1c
.RI "#define \fBUART_FLAG_RXNE\fP   ((uint32_t)USART_SR_RXNE)"
.br
.ti -1c
.RI "#define \fBUART_FLAG_IDLE\fP   ((uint32_t)USART_SR_IDLE)"
.br
.ti -1c
.RI "#define \fBUART_FLAG_ORE\fP   ((uint32_t)USART_SR_ORE)"
.br
.ti -1c
.RI "#define \fBUART_FLAG_NE\fP   ((uint32_t)USART_SR_NE)"
.br
.ti -1c
.RI "#define \fBUART_FLAG_FE\fP   ((uint32_t)USART_SR_FE)"
.br
.ti -1c
.RI "#define \fBUART_FLAG_PE\fP   ((uint32_t)USART_SR_PE)"
.br
.ti -1c
.RI "#define \fBUART_IT_PE\fP   ((uint32_t)(\fBUART_CR1_REG_INDEX\fP << 28U | USART_CR1_PEIE))"
.br
.ti -1c
.RI "#define \fBUART_IT_TXE\fP   ((uint32_t)(\fBUART_CR1_REG_INDEX\fP << 28U | USART_CR1_TXEIE))"
.br
.ti -1c
.RI "#define \fBUART_IT_TC\fP   ((uint32_t)(\fBUART_CR1_REG_INDEX\fP << 28U | USART_CR1_TCIE))"
.br
.ti -1c
.RI "#define \fBUART_IT_RXNE\fP   ((uint32_t)(\fBUART_CR1_REG_INDEX\fP << 28U | USART_CR1_RXNEIE))"
.br
.ti -1c
.RI "#define \fBUART_IT_IDLE\fP   ((uint32_t)(\fBUART_CR1_REG_INDEX\fP << 28U | USART_CR1_IDLEIE))"
.br
.ti -1c
.RI "#define \fBUART_IT_LBD\fP   ((uint32_t)(\fBUART_CR2_REG_INDEX\fP << 28U | USART_CR2_LBDIE))"
.br
.ti -1c
.RI "#define \fBUART_IT_CTS\fP   ((uint32_t)(\fBUART_CR3_REG_INDEX\fP << 28U | USART_CR3_CTSIE))"
.br
.ti -1c
.RI "#define \fBUART_IT_ERR\fP   ((uint32_t)(\fBUART_CR3_REG_INDEX\fP << 28U | USART_CR3_EIE))"
.br
.ti -1c
.RI "#define \fB__HAL_UART_RESET_HANDLE_STATE\fP(__HANDLE__)"
.br
.RI "Reset UART handle gstate & RxState "
.ti -1c
.RI "#define \fB__HAL_UART_FLUSH_DRREGISTER\fP(__HANDLE__)   ((__HANDLE__)\->Instance\->DR)"
.br
.RI "Flushes the UART DR register "
.ti -1c
.RI "#define \fB__HAL_UART_GET_FLAG\fP(__HANDLE__,  __FLAG__)   (((__HANDLE__)\->Instance\->SR & (__FLAG__)) == (__FLAG__))"
.br
.RI "Checks whether the specified UART flag is set or not\&. "
.ti -1c
.RI "#define \fB__HAL_UART_CLEAR_FLAG\fP(__HANDLE__,  __FLAG__)   ((__HANDLE__)\->Instance\->SR = ~(__FLAG__))"
.br
.RI "Clears the specified UART pending flag\&. "
.ti -1c
.RI "#define \fB__HAL_UART_CLEAR_PEFLAG\fP(__HANDLE__)"
.br
.RI "Clears the UART PE pending flag\&. "
.ti -1c
.RI "#define \fB__HAL_UART_CLEAR_FEFLAG\fP(__HANDLE__)   \fB__HAL_UART_CLEAR_PEFLAG\fP(__HANDLE__)"
.br
.RI "Clears the UART FE pending flag\&. "
.ti -1c
.RI "#define \fB__HAL_UART_CLEAR_NEFLAG\fP(__HANDLE__)   \fB__HAL_UART_CLEAR_PEFLAG\fP(__HANDLE__)"
.br
.RI "Clears the UART NE pending flag\&. "
.ti -1c
.RI "#define \fB__HAL_UART_CLEAR_OREFLAG\fP(__HANDLE__)   \fB__HAL_UART_CLEAR_PEFLAG\fP(__HANDLE__)"
.br
.RI "Clears the UART ORE pending flag\&. "
.ti -1c
.RI "#define \fB__HAL_UART_CLEAR_IDLEFLAG\fP(__HANDLE__)   \fB__HAL_UART_CLEAR_PEFLAG\fP(__HANDLE__)"
.br
.RI "Clears the UART IDLE pending flag\&. "
.ti -1c
.RI "#define \fB__HAL_UART_ENABLE_IT\fP(__HANDLE__,  __INTERRUPT__)"
.br
.RI "Enable the specified UART interrupt\&. "
.ti -1c
.RI "#define \fB__HAL_UART_DISABLE_IT\fP(__HANDLE__,  __INTERRUPT__)"
.br
.RI "Disable the specified UART interrupt\&. "
.ti -1c
.RI "#define \fB__HAL_UART_GET_IT_SOURCE\fP(__HANDLE__,  __IT__)"
.br
.RI "Checks whether the specified UART interrupt has occurred or not\&. "
.ti -1c
.RI "#define \fB__HAL_UART_HWCONTROL_CTS_ENABLE\fP(__HANDLE__)"
.br
.RI "Enable CTS flow control "
.ti -1c
.RI "#define \fB__HAL_UART_HWCONTROL_CTS_DISABLE\fP(__HANDLE__)"
.br
.RI "Disable CTS flow control "
.ti -1c
.RI "#define \fB__HAL_UART_HWCONTROL_RTS_ENABLE\fP(__HANDLE__)"
.br
.RI "Enable RTS flow control This macro allows to enable RTS hardware flow control for a given UART instance, without need to call \fBHAL_UART_Init()\fP function\&. As involving direct access to UART registers, usage of this macro should be fully endorsed by user\&. "
.ti -1c
.RI "#define \fB__HAL_UART_HWCONTROL_RTS_DISABLE\fP(__HANDLE__)"
.br
.RI "Disable RTS flow control This macro allows to disable RTS hardware flow control for a given UART instance, without need to call \fBHAL_UART_Init()\fP function\&. As involving direct access to UART registers, usage of this macro should be fully endorsed by user\&. "
.ti -1c
.RI "#define \fB__HAL_UART_ONE_BIT_SAMPLE_ENABLE\fP(__HANDLE__)   ((__HANDLE__)\->Instance\->CR3|= USART_CR3_ONEBIT)"
.br
.RI "Macro to enable the UART's one bit sample method "
.ti -1c
.RI "#define \fB__HAL_UART_ONE_BIT_SAMPLE_DISABLE\fP(__HANDLE__)   ((__HANDLE__)\->Instance\->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT))"
.br
.RI "Macro to disable the UART's one bit sample method "
.ti -1c
.RI "#define \fB__HAL_UART_ENABLE\fP(__HANDLE__)   ((__HANDLE__)\->Instance\->CR1 |=  USART_CR1_UE)"
.br
.RI "Enable UART "
.ti -1c
.RI "#define \fB__HAL_UART_DISABLE\fP(__HANDLE__)   ((__HANDLE__)\->Instance\->CR1 &=  ~USART_CR1_UE)"
.br
.RI "Disable UART "
.ti -1c
.RI "#define \fBUART_IT_MASK\fP   0x0000FFFFU"
.br
.RI "UART interruptions flag mask "
.ti -1c
.RI "#define \fBUART_CR1_REG_INDEX\fP   1U"
.br
.ti -1c
.RI "#define \fBUART_CR2_REG_INDEX\fP   2U"
.br
.ti -1c
.RI "#define \fBUART_CR3_REG_INDEX\fP   3U"
.br
.ti -1c
.RI "#define \fBIS_UART_WORD_LENGTH\fP(LENGTH)"
.br
.ti -1c
.RI "#define \fBIS_UART_LIN_WORD_LENGTH\fP(LENGTH)   (((LENGTH) == \fBUART_WORDLENGTH_8B\fP))"
.br
.ti -1c
.RI "#define \fBIS_UART_STOPBITS\fP(STOPBITS)"
.br
.ti -1c
.RI "#define \fBIS_UART_PARITY\fP(PARITY)"
.br
.ti -1c
.RI "#define \fBIS_UART_HARDWARE_FLOW_CONTROL\fP(CONTROL)"
.br
.ti -1c
.RI "#define \fBIS_UART_MODE\fP(MODE)   ((((MODE) & 0x0000FFF3U) == 0x00U) && ((MODE) != 0x00U))"
.br
.ti -1c
.RI "#define \fBIS_UART_STATE\fP(STATE)"
.br
.ti -1c
.RI "#define \fBIS_UART_OVERSAMPLING\fP(SAMPLING)"
.br
.ti -1c
.RI "#define \fBIS_UART_LIN_OVERSAMPLING\fP(SAMPLING)   (((SAMPLING) == \fBUART_OVERSAMPLING_16\fP))"
.br
.ti -1c
.RI "#define \fBIS_UART_LIN_BREAK_DETECT_LENGTH\fP(LENGTH)"
.br
.ti -1c
.RI "#define \fBIS_UART_WAKEUPMETHOD\fP(WAKEUP)"
.br
.ti -1c
.RI "#define \fBIS_UART_BAUDRATE\fP(BAUDRATE)   ((BAUDRATE) <= 10500000U)"
.br
.ti -1c
.RI "#define \fBIS_UART_ADDRESS\fP(ADDRESS)   ((ADDRESS) <= 0x0FU)"
.br
.ti -1c
.RI "#define \fBUART_DIV_SAMPLING16\fP(_PCLK_,  _BAUD_)   (((_PCLK_)*25U)/(4U*(_BAUD_)))"
.br
.ti -1c
.RI "#define \fBUART_DIVMANT_SAMPLING16\fP(_PCLK_,  _BAUD_)   (\fBUART_DIV_SAMPLING16\fP((_PCLK_), (_BAUD_))/100U)"
.br
.ti -1c
.RI "#define \fBUART_DIVFRAQ_SAMPLING16\fP(_PCLK_,  _BAUD_)   (((\fBUART_DIV_SAMPLING16\fP((_PCLK_), (_BAUD_)) \- (\fBUART_DIVMANT_SAMPLING16\fP((_PCLK_), (_BAUD_)) * 100U)) * 16U + 50U) / 100U)"
.br
.ti -1c
.RI "#define \fBUART_BRR_SAMPLING16\fP(_PCLK_,  _BAUD_)"
.br
.ti -1c
.RI "#define \fBUART_DIV_SAMPLING8\fP(_PCLK_,  _BAUD_)   (((_PCLK_)*25U)/(2U*(_BAUD_)))"
.br
.ti -1c
.RI "#define \fBUART_DIVMANT_SAMPLING8\fP(_PCLK_,  _BAUD_)   (\fBUART_DIV_SAMPLING8\fP((_PCLK_), (_BAUD_))/100U)"
.br
.ti -1c
.RI "#define \fBUART_DIVFRAQ_SAMPLING8\fP(_PCLK_,  _BAUD_)   (((\fBUART_DIV_SAMPLING8\fP((_PCLK_), (_BAUD_)) \- (\fBUART_DIVMANT_SAMPLING8\fP((_PCLK_), (_BAUD_)) * 100U)) * 8U + 50U) / 100U)"
.br
.ti -1c
.RI "#define \fBUART_BRR_SAMPLING8\fP(_PCLK_,  _BAUD_)"
.br
.in -1c
.SS "类型定义"

.in +1c
.ti -1c
.RI "typedef struct \fB__UART_HandleTypeDef\fP \fBUART_HandleTypeDef\fP"
.br
.RI "UART handle Structure definition "
.in -1c
.SS "枚举"

.in +1c
.ti -1c
.RI "enum \fBHAL_UART_StateTypeDef\fP { \fBHAL_UART_STATE_RESET\fP = 0x00U, \fBHAL_UART_STATE_READY\fP = 0x20U, \fBHAL_UART_STATE_BUSY\fP = 0x24U, \fBHAL_UART_STATE_BUSY_TX\fP = 0x21U, \fBHAL_UART_STATE_BUSY_RX\fP = 0x22U, \fBHAL_UART_STATE_BUSY_TX_RX\fP = 0x23U, \fBHAL_UART_STATE_TIMEOUT\fP = 0xA0U, \fBHAL_UART_STATE_ERROR\fP = 0xE0U }"
.br
.RI "HAL UART State structures definition "
.in -1c
.SS "函数"

.in +1c
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_UART_Init\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_HalfDuplex_Init\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_LIN_Init\fP (\fBUART_HandleTypeDef\fP *huart, uint32_t BreakDetectLength)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_MultiProcessor_Init\fP (\fBUART_HandleTypeDef\fP *huart, uint8_t Address, uint32_t WakeUpMethod)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_UART_DeInit\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.ti -1c
.RI "void \fBHAL_UART_MspInit\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.ti -1c
.RI "void \fBHAL_UART_MspDeInit\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_UART_Transmit\fP (\fBUART_HandleTypeDef\fP *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_UART_Receive\fP (\fBUART_HandleTypeDef\fP *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_UART_Transmit_IT\fP (\fBUART_HandleTypeDef\fP *huart, uint8_t *pData, uint16_t Size)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_UART_Receive_IT\fP (\fBUART_HandleTypeDef\fP *huart, uint8_t *pData, uint16_t Size)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_UART_Transmit_DMA\fP (\fBUART_HandleTypeDef\fP *huart, uint8_t *pData, uint16_t Size)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_UART_Receive_DMA\fP (\fBUART_HandleTypeDef\fP *huart, uint8_t *pData, uint16_t Size)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_UART_DMAPause\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_UART_DMAResume\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_UART_DMAStop\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_UART_Abort\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_UART_AbortTransmit\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_UART_AbortReceive\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_UART_Abort_IT\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_UART_AbortTransmit_IT\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_UART_AbortReceive_IT\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.ti -1c
.RI "void \fBHAL_UART_IRQHandler\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.ti -1c
.RI "void \fBHAL_UART_TxCpltCallback\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.ti -1c
.RI "void \fBHAL_UART_TxHalfCpltCallback\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.ti -1c
.RI "void \fBHAL_UART_RxCpltCallback\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.ti -1c
.RI "void \fBHAL_UART_RxHalfCpltCallback\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.ti -1c
.RI "void \fBHAL_UART_ErrorCallback\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.ti -1c
.RI "void \fBHAL_UART_AbortCpltCallback\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.ti -1c
.RI "void \fBHAL_UART_AbortTransmitCpltCallback\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.ti -1c
.RI "void \fBHAL_UART_AbortReceiveCpltCallback\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_LIN_SendBreak\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_MultiProcessor_EnterMuteMode\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_MultiProcessor_ExitMuteMode\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_HalfDuplex_EnableTransmitter\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_HalfDuplex_EnableReceiver\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.ti -1c
.RI "\fBHAL_UART_StateTypeDef\fP \fBHAL_UART_GetState\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.ti -1c
.RI "uint32_t \fBHAL_UART_GetError\fP (\fBUART_HandleTypeDef\fP *huart)"
.br
.in -1c
.SH "详细描述"
.PP 
Header file of UART HAL module\&. 


.PP
\fB作者\fP
.RS 4
MCD Application Team 
.RE
.PP
\fB注意\fP
.RS 4
.RE
.PP
.SS "(C) Copyright (c) 2016 STMicroelectronics\&. All rights reserved\&."
.PP
This software component is licensed by ST under BSD 3-Clause license, the 'License'; You may not use this file except in compliance with the License\&. You may obtain a copy of the License at: opensource\&.org/licenses/BSD-3-Clause 
.PP
在文件 \fBstm32f4xx_hal_uart\&.h\fP 中定义\&.
.SH "作者"
.PP 
由 Doyxgen 通过分析 STM32F4_HAL 的 源代码自动生成\&.
