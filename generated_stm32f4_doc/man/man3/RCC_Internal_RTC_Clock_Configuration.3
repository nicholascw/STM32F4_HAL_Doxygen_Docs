.TH "RCC_Internal_RTC_Clock_Configuration" 3 "2020年 八月 7日 星期五" "Version 1.24.0" "STM32F4_HAL" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RCC_Internal_RTC_Clock_Configuration
.SH SYNOPSIS
.br
.PP
.SS "宏定义"

.in +1c
.ti -1c
.RI "#define \fB__HAL_RCC_RTC_ENABLE\fP()   (*(__IO uint32_t *) \fBRCC_BDCR_RTCEN_BB\fP = ENABLE)"
.br
.RI "Macros to enable or disable the RTC clock\&. "
.ti -1c
.RI "#define \fB__HAL_RCC_RTC_DISABLE\fP()   (*(__IO uint32_t *) \fBRCC_BDCR_RTCEN_BB\fP = DISABLE)"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_RTC_CLKPRESCALER\fP(__RTCCLKSource__)"
.br
.RI "Macros to configure the RTC clock (RTCCLK)\&. "
.ti -1c
.RI "#define \fB__HAL_RCC_RTC_CONFIG\fP(__RTCCLKSource__)"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_GET_RTC_SOURCE\fP()   (READ_BIT(RCC\->BDCR, RCC_BDCR_RTCSEL))"
.br
.RI "Macro to get the RTC clock source\&. "
.ti -1c
.RI "#define \fB__HAL_RCC_GET_RTC_HSE_PRESCALER\fP()   (READ_BIT(RCC\->CFGR, RCC_CFGR_RTCPRE) | RCC_BDCR_RTCSEL)"
.br
.RI "Get the RTC and HSE clock divider (RTCPRE)\&. "
.ti -1c
.RI "#define \fB__HAL_RCC_BACKUPRESET_FORCE\fP()   (*(__IO uint32_t *) \fBRCC_BDCR_BDRST_BB\fP = ENABLE)"
.br
.RI "Macros to force or release the Backup domain reset\&. "
.ti -1c
.RI "#define \fB__HAL_RCC_BACKUPRESET_RELEASE\fP()   (*(__IO uint32_t *) \fBRCC_BDCR_BDRST_BB\fP = DISABLE)"
.br
.in -1c
.SH "详细描述"
.PP 

.SH "宏定义说明"
.PP 
.SS "#define __HAL_RCC_BACKUPRESET_FORCE()   (*(__IO uint32_t *) \fBRCC_BDCR_BDRST_BB\fP = ENABLE)"

.PP
Macros to force or release the Backup domain reset\&. 
.PP
\fB注解\fP
.RS 4
This function resets the RTC peripheral (including the backup registers) and the RTC clock source selection in RCC_CSR register\&. 
.PP
The BKPSRAM is not affected by this reset\&. 
.RE
.PP

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 1021 行定义\&.
.SS "#define __HAL_RCC_BACKUPRESET_RELEASE()   (*(__IO uint32_t *) \fBRCC_BDCR_BDRST_BB\fP = DISABLE)"

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 1022 行定义\&.
.SS "#define __HAL_RCC_GET_RTC_HSE_PRESCALER()   (READ_BIT(RCC\->CFGR, RCC_CFGR_RTCPRE) | RCC_BDCR_RTCSEL)"

.PP
Get the RTC and HSE clock divider (RTCPRE)\&. 
.PP
\fB返回值\fP
.RS 4
\fIReturned\fP value can be one of the following values: 
.PD 0

.IP "\(bu" 2
\fBRCC_RTCCLKSOURCE_HSE_DIVX:\fP HSE clock divided by x selected as RTC clock, where x:[2,31] 
.PP
.RE
.PP

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 1014 行定义\&.
.SS "#define __HAL_RCC_GET_RTC_SOURCE()   (READ_BIT(RCC\->BDCR, RCC_BDCR_RTCSEL))"

.PP
Macro to get the RTC clock source\&. 
.PP
\fB返回值\fP
.RS 4
\fIThe\fP clock source can be one of the following values: 
.PD 0

.IP "\(bu" 2
\fBRCC_RTCCLKSOURCE_NO_CLK\fP No clock selected as RTC clock 
.IP "\(bu" 2
\fBRCC_RTCCLKSOURCE_LSE\fP LSE selected as RTC clock 
.IP "\(bu" 2
\fBRCC_RTCCLKSOURCE_LSI\fP LSI selected as RTC clock 
.IP "\(bu" 2
\fBRCC_RTCCLKSOURCE_HSE_DIVX\fP HSE divided by X selected as RTC clock (X can be retrieved thanks to \fB__HAL_RCC_GET_RTC_HSE_PRESCALER()\fP 
.PP
.RE
.PP

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 1006 行定义\&.
.SS "#define __HAL_RCC_RTC_CLKPRESCALER(__RTCCLKSource__)"
\fB值:\fP
.PP
.nf
                                                 (((__RTCCLKSource__) & RCC_BDCR_RTCSEL) == RCC_BDCR_RTCSEL) ?    \
                                                 MODIFY_REG(RCC->CFGR, RCC_CFGR_RTCPRE, ((__RTCCLKSource__) & 0xFFFFCFFU)) : CLEAR_BIT(RCC->CFGR, RCC_CFGR_RTCPRE)
.fi
.PP
Macros to configure the RTC clock (RTCCLK)\&. 
.PP
\fB注解\fP
.RS 4
As the RTC clock configuration bits are in the Backup domain and write access is denied to this domain after reset, you have to enable write access using the Power Backup Access macro before to configure the RTC clock source (to be done once after reset)\&. 
.PP
Once the RTC clock is configured it can't be changed unless the Backup domain is reset using __HAL_RCC_BackupReset_RELEASE() macro, or by a Power On Reset (POR)\&. 
.RE
.PP
\fB参数\fP
.RS 4
\fI<strong>RTCCLKSource</strong>\fP specifies the RTC clock source\&. This parameter can be one of the following values: 
.PD 0

.IP "\(bu" 2
\fBRCC_RTCCLKSOURCE_NO_CLK:\fP No clock selected as RTC clock\&. 
.IP "\(bu" 2
\fBRCC_RTCCLKSOURCE_LSE:\fP LSE selected as RTC clock\&. 
.IP "\(bu" 2
\fBRCC_RTCCLKSOURCE_LSI:\fP LSI selected as RTC clock\&. 
.IP "\(bu" 2
\fBRCC_RTCCLKSOURCE_HSE_DIVX:\fP HSE clock divided by x selected as RTC clock, where x:[2,31] 
.PP
.RE
.PP
\fB注解\fP
.RS 4
If the LSE or LSI is used as RTC clock source, the RTC continues to work in STOP and STANDBY modes, and can be used as wake-up source\&. However, when the HSE clock is used as RTC clock source, the RTC cannot be used in STOP and STANDBY modes\&. 
.PP
The maximum input clock frequency for RTC is 1MHz (when using HSE as RTC clock source)\&. 
.RE
.PP

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 992 行定义\&.
.SS "#define __HAL_RCC_RTC_CONFIG(__RTCCLKSource__)"
\fB值:\fP
.PP
.nf
                                                    do { __HAL_RCC_RTC_CLKPRESCALER(__RTCCLKSource__);    \
                                                    RCC->BDCR |= ((__RTCCLKSource__) & 0x00000FFFU);  \
                                                   } while(0U)
.fi
.PP
在文件 stm32f4xx_hal_rcc\&.h 第 995 行定义\&.
.SS "#define __HAL_RCC_RTC_DISABLE()   (*(__IO uint32_t *) \fBRCC_BDCR_RTCEN_BB\fP = DISABLE)"

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 968 行定义\&.
.SS "#define __HAL_RCC_RTC_ENABLE()   (*(__IO uint32_t *) \fBRCC_BDCR_RTCEN_BB\fP = ENABLE)"

.PP
Macros to enable or disable the RTC clock\&. 
.PP
\fB注解\fP
.RS 4
These macros must be used only after the RTC clock source was selected\&. 
.RE
.PP

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 967 行定义\&.
.SH "作者"
.PP 
由 Doyxgen 通过分析 STM32F4_HAL 的 源代码自动生成\&.
