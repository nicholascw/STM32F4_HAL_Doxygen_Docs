.TH "inc/stm32f4xx_hal_pwr.h" 3 "2020年 八月 7日 星期五" "Version 1.24.0" "STM32F4_HAL" \" -*- nroff -*-
.ad l
.nh
.SH NAME
inc/stm32f4xx_hal_pwr.h \- Header file of PWR HAL module\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'stm32f4xx_hal_def\&.h'\fP
.br
\fC#include 'stm32f4xx_hal_pwr_ex\&.h'\fP
.br

.SS "结构体"

.in +1c
.ti -1c
.RI "struct \fBPWR_PVDTypeDef\fP"
.br
.RI "PWR PVD configuration structure definition "
.in -1c
.SS "宏定义"

.in +1c
.ti -1c
.RI "#define \fBPWR_WAKEUP_PIN1\fP   0x00000100U"
.br
.ti -1c
.RI "#define \fBPWR_PVDLEVEL_0\fP   PWR_CR_PLS_LEV0"
.br
.ti -1c
.RI "#define \fBPWR_PVDLEVEL_1\fP   PWR_CR_PLS_LEV1"
.br
.ti -1c
.RI "#define \fBPWR_PVDLEVEL_2\fP   PWR_CR_PLS_LEV2"
.br
.ti -1c
.RI "#define \fBPWR_PVDLEVEL_3\fP   PWR_CR_PLS_LEV3"
.br
.ti -1c
.RI "#define \fBPWR_PVDLEVEL_4\fP   PWR_CR_PLS_LEV4"
.br
.ti -1c
.RI "#define \fBPWR_PVDLEVEL_5\fP   PWR_CR_PLS_LEV5"
.br
.ti -1c
.RI "#define \fBPWR_PVDLEVEL_6\fP   PWR_CR_PLS_LEV6"
.br
.ti -1c
.RI "#define \fBPWR_PVDLEVEL_7\fP"
.br
.ti -1c
.RI "#define \fBPWR_PVD_MODE_NORMAL\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBPWR_PVD_MODE_IT_RISING\fP   0x00010001U"
.br
.ti -1c
.RI "#define \fBPWR_PVD_MODE_IT_FALLING\fP   0x00010002U"
.br
.ti -1c
.RI "#define \fBPWR_PVD_MODE_IT_RISING_FALLING\fP   0x00010003U"
.br
.ti -1c
.RI "#define \fBPWR_PVD_MODE_EVENT_RISING\fP   0x00020001U"
.br
.ti -1c
.RI "#define \fBPWR_PVD_MODE_EVENT_FALLING\fP   0x00020002U"
.br
.ti -1c
.RI "#define \fBPWR_PVD_MODE_EVENT_RISING_FALLING\fP   0x00020003U"
.br
.ti -1c
.RI "#define \fBPWR_MAINREGULATOR_ON\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBPWR_LOWPOWERREGULATOR_ON\fP   PWR_CR_LPDS"
.br
.ti -1c
.RI "#define \fBPWR_SLEEPENTRY_WFI\fP   ((uint8_t)0x01)"
.br
.ti -1c
.RI "#define \fBPWR_SLEEPENTRY_WFE\fP   ((uint8_t)0x02)"
.br
.ti -1c
.RI "#define \fBPWR_STOPENTRY_WFI\fP   ((uint8_t)0x01)"
.br
.ti -1c
.RI "#define \fBPWR_STOPENTRY_WFE\fP   ((uint8_t)0x02)"
.br
.ti -1c
.RI "#define \fBPWR_FLAG_WU\fP   PWR_CSR_WUF"
.br
.ti -1c
.RI "#define \fBPWR_FLAG_SB\fP   PWR_CSR_SBF"
.br
.ti -1c
.RI "#define \fBPWR_FLAG_PVDO\fP   PWR_CSR_PVDO"
.br
.ti -1c
.RI "#define \fBPWR_FLAG_BRR\fP   PWR_CSR_BRR"
.br
.ti -1c
.RI "#define \fBPWR_FLAG_VOSRDY\fP   PWR_CSR_VOSRDY"
.br
.ti -1c
.RI "#define \fB__HAL_PWR_GET_FLAG\fP(__FLAG__)   ((PWR\->CSR & (__FLAG__)) == (__FLAG__))"
.br
.RI "Check PWR flag is set or not\&. "
.ti -1c
.RI "#define \fB__HAL_PWR_CLEAR_FLAG\fP(__FLAG__)   (PWR\->CR |=  (__FLAG__) << 2U)"
.br
.RI "Clear the PWR's pending flags\&. "
.ti -1c
.RI "#define \fB__HAL_PWR_PVD_EXTI_ENABLE_IT\fP()   (EXTI\->IMR |= (\fBPWR_EXTI_LINE_PVD\fP))"
.br
.RI "Enable the PVD Exti Line 16\&. "
.ti -1c
.RI "#define \fB__HAL_PWR_PVD_EXTI_DISABLE_IT\fP()   (EXTI\->IMR &= ~(\fBPWR_EXTI_LINE_PVD\fP))"
.br
.RI "Disable the PVD EXTI Line 16\&. "
.ti -1c
.RI "#define \fB__HAL_PWR_PVD_EXTI_ENABLE_EVENT\fP()   (EXTI\->EMR |= (\fBPWR_EXTI_LINE_PVD\fP))"
.br
.RI "Enable event on PVD Exti Line 16\&. "
.ti -1c
.RI "#define \fB__HAL_PWR_PVD_EXTI_DISABLE_EVENT\fP()   (EXTI\->EMR &= ~(\fBPWR_EXTI_LINE_PVD\fP))"
.br
.RI "Disable event on PVD Exti Line 16\&. "
.ti -1c
.RI "#define \fB__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE\fP()   SET_BIT(EXTI\->RTSR, \fBPWR_EXTI_LINE_PVD\fP)"
.br
.RI "Enable the PVD Extended Interrupt Rising Trigger\&. "
.ti -1c
.RI "#define \fB__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE\fP()   CLEAR_BIT(EXTI\->RTSR, \fBPWR_EXTI_LINE_PVD\fP)"
.br
.RI "Disable the PVD Extended Interrupt Rising Trigger\&. "
.ti -1c
.RI "#define \fB__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE\fP()   SET_BIT(EXTI\->FTSR, \fBPWR_EXTI_LINE_PVD\fP)"
.br
.RI "Enable the PVD Extended Interrupt Falling Trigger\&. "
.ti -1c
.RI "#define \fB__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE\fP()   CLEAR_BIT(EXTI\->FTSR, \fBPWR_EXTI_LINE_PVD\fP)"
.br
.RI "Disable the PVD Extended Interrupt Falling Trigger\&. "
.ti -1c
.RI "#define \fB__HAL_PWR_PVD_EXTI_ENABLE_RISING_FALLING_EDGE\fP()"
.br
.RI "PVD EXTI line configuration: set rising & falling edge trigger\&. "
.ti -1c
.RI "#define \fB__HAL_PWR_PVD_EXTI_DISABLE_RISING_FALLING_EDGE\fP()"
.br
.RI "Disable the PVD Extended Interrupt Rising & Falling Trigger\&. This parameter can be: "
.ti -1c
.RI "#define \fB__HAL_PWR_PVD_EXTI_GET_FLAG\fP()   (EXTI\->PR & (\fBPWR_EXTI_LINE_PVD\fP))"
.br
.RI "checks whether the specified PVD Exti interrupt flag is set or not\&. "
.ti -1c
.RI "#define \fB__HAL_PWR_PVD_EXTI_CLEAR_FLAG\fP()   (EXTI\->PR = (\fBPWR_EXTI_LINE_PVD\fP))"
.br
.RI "Clear the PVD Exti flag\&. "
.ti -1c
.RI "#define \fB__HAL_PWR_PVD_EXTI_GENERATE_SWIT\fP()   (EXTI\->SWIER |= (\fBPWR_EXTI_LINE_PVD\fP))"
.br
.RI "Generates a Software interrupt on PVD EXTI line\&. "
.ti -1c
.RI "#define \fBPWR_EXTI_LINE_PVD\fP   ((uint32_t)EXTI_IMR_MR16)"
.br
.ti -1c
.RI "#define \fBPWR_OFFSET\fP   (PWR_BASE \- PERIPH_BASE)"
.br
.ti -1c
.RI "#define \fBPWR_CR_OFFSET\fP   0x00U"
.br
.ti -1c
.RI "#define \fBPWR_CSR_OFFSET\fP   0x04U"
.br
.ti -1c
.RI "#define \fBPWR_CR_OFFSET_BB\fP   (\fBPWR_OFFSET\fP + \fBPWR_CR_OFFSET\fP)"
.br
.ti -1c
.RI "#define \fBPWR_CSR_OFFSET_BB\fP   (\fBPWR_OFFSET\fP + \fBPWR_CSR_OFFSET\fP)"
.br
.ti -1c
.RI "#define \fBDBP_BIT_NUMBER\fP   PWR_CR_DBP_Pos"
.br
.ti -1c
.RI "#define \fBCR_DBP_BB\fP   (uint32_t)(PERIPH_BB_BASE + (\fBPWR_CR_OFFSET_BB\fP * 32U) + (\fBDBP_BIT_NUMBER\fP * 4U))"
.br
.ti -1c
.RI "#define \fBPVDE_BIT_NUMBER\fP   PWR_CR_PVDE_Pos"
.br
.ti -1c
.RI "#define \fBCR_PVDE_BB\fP   (uint32_t)(PERIPH_BB_BASE + (\fBPWR_CR_OFFSET_BB\fP * 32U) + (\fBPVDE_BIT_NUMBER\fP * 4U))"
.br
.ti -1c
.RI "#define \fBVOS_BIT_NUMBER\fP   PWR_CR_VOS_Pos"
.br
.ti -1c
.RI "#define \fBCR_VOS_BB\fP   (uint32_t)(PERIPH_BB_BASE + (\fBPWR_CR_OFFSET_BB\fP * 32U) + (\fBVOS_BIT_NUMBER\fP * 4U))"
.br
.ti -1c
.RI "#define \fBEWUP_BIT_NUMBER\fP   PWR_CSR_EWUP_Pos"
.br
.ti -1c
.RI "#define \fBCSR_EWUP_BB\fP   (PERIPH_BB_BASE + (\fBPWR_CSR_OFFSET_BB\fP * 32U) + (\fBEWUP_BIT_NUMBER\fP * 4U))"
.br
.ti -1c
.RI "#define \fBIS_PWR_PVD_LEVEL\fP(LEVEL)"
.br
.ti -1c
.RI "#define \fBIS_PWR_PVD_MODE\fP(MODE)"
.br
.ti -1c
.RI "#define \fBIS_PWR_REGULATOR\fP(REGULATOR)"
.br
.ti -1c
.RI "#define \fBIS_PWR_SLEEP_ENTRY\fP(ENTRY)   (((ENTRY) == \fBPWR_SLEEPENTRY_WFI\fP) || ((ENTRY) == \fBPWR_SLEEPENTRY_WFE\fP))"
.br
.ti -1c
.RI "#define \fBIS_PWR_STOP_ENTRY\fP(ENTRY)   (((ENTRY) == \fBPWR_STOPENTRY_WFI\fP) || ((ENTRY) == \fBPWR_STOPENTRY_WFE\fP))"
.br
.in -1c
.SS "函数"

.in +1c
.ti -1c
.RI "void \fBHAL_PWR_DeInit\fP (void)"
.br
.ti -1c
.RI "void \fBHAL_PWR_EnableBkUpAccess\fP (void)"
.br
.ti -1c
.RI "void \fBHAL_PWR_DisableBkUpAccess\fP (void)"
.br
.ti -1c
.RI "void \fBHAL_PWR_ConfigPVD\fP (\fBPWR_PVDTypeDef\fP *sConfigPVD)"
.br
.ti -1c
.RI "void \fBHAL_PWR_EnablePVD\fP (void)"
.br
.ti -1c
.RI "void \fBHAL_PWR_DisablePVD\fP (void)"
.br
.ti -1c
.RI "void \fBHAL_PWR_EnableWakeUpPin\fP (uint32_t WakeUpPinx)"
.br
.ti -1c
.RI "void \fBHAL_PWR_DisableWakeUpPin\fP (uint32_t WakeUpPinx)"
.br
.ti -1c
.RI "void \fBHAL_PWR_EnterSTOPMode\fP (uint32_t Regulator, uint8_t STOPEntry)"
.br
.ti -1c
.RI "void \fBHAL_PWR_EnterSLEEPMode\fP (uint32_t Regulator, uint8_t SLEEPEntry)"
.br
.ti -1c
.RI "void \fBHAL_PWR_EnterSTANDBYMode\fP (void)"
.br
.ti -1c
.RI "void \fBHAL_PWR_PVD_IRQHandler\fP (void)"
.br
.ti -1c
.RI "void \fBHAL_PWR_PVDCallback\fP (void)"
.br
.ti -1c
.RI "void \fBHAL_PWR_EnableSleepOnExit\fP (void)"
.br
.ti -1c
.RI "void \fBHAL_PWR_DisableSleepOnExit\fP (void)"
.br
.ti -1c
.RI "void \fBHAL_PWR_EnableSEVOnPend\fP (void)"
.br
.ti -1c
.RI "void \fBHAL_PWR_DisableSEVOnPend\fP (void)"
.br
.in -1c
.SH "详细描述"
.PP 
Header file of PWR HAL module\&. 


.PP
\fB作者\fP
.RS 4
MCD Application Team 
.RE
.PP
\fB注意\fP
.RS 4
.RE
.PP
.SS "(C) Copyright (c) 2017 STMicroelectronics\&. All rights reserved\&."
.PP
This software component is licensed by ST under BSD 3-Clause license, the 'License'; You may not use this file except in compliance with the License\&. You may obtain a copy of the License at: opensource\&.org/licenses/BSD-3-Clause 
.PP
在文件 \fBstm32f4xx_hal_pwr\&.h\fP 中定义\&.
.SH "作者"
.PP 
由 Doyxgen 通过分析 STM32F4_HAL 的 源代码自动生成\&.
