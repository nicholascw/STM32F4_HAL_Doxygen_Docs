.TH "inc/stm32f4xx_hal_smbus.h" 3 "2020年 八月 7日 星期五" "Version 1.24.0" "STM32F4_HAL" \" -*- nroff -*-
.ad l
.nh
.SH NAME
inc/stm32f4xx_hal_smbus.h \- Header file of SMBUS HAL module\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'stm32f4xx_hal_def\&.h'\fP
.br

.SS "结构体"

.in +1c
.ti -1c
.RI "struct \fBSMBUS_InitTypeDef\fP"
.br
.RI "SMBUS Configuration Structure definition "
.ti -1c
.RI "struct \fB__SMBUS_HandleTypeDef\fP"
.br
.RI "SMBUS handle Structure definition "
.in -1c
.SS "宏定义"

.in +1c
.ti -1c
.RI "#define \fBHAL_SMBUS_ERROR_NONE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBHAL_SMBUS_ERROR_BERR\fP   0x00000001U"
.br
.ti -1c
.RI "#define \fBHAL_SMBUS_ERROR_ARLO\fP   0x00000002U"
.br
.ti -1c
.RI "#define \fBHAL_SMBUS_ERROR_AF\fP   0x00000004U"
.br
.ti -1c
.RI "#define \fBHAL_SMBUS_ERROR_OVR\fP   0x00000008U"
.br
.ti -1c
.RI "#define \fBHAL_SMBUS_ERROR_TIMEOUT\fP   0x00000010U"
.br
.ti -1c
.RI "#define \fBHAL_SMBUS_ERROR_ALERT\fP   0x00000020U"
.br
.ti -1c
.RI "#define \fBHAL_SMBUS_ERROR_PECERR\fP   0x00000040U"
.br
.ti -1c
.RI "#define \fBSMBUS_ANALOGFILTER_ENABLE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBSMBUS_ANALOGFILTER_DISABLE\fP   I2C_FLTR_ANOFF"
.br
.ti -1c
.RI "#define \fBSMBUS_ADDRESSINGMODE_7BIT\fP   0x00004000U"
.br
.ti -1c
.RI "#define \fBSMBUS_ADDRESSINGMODE_10BIT\fP   (I2C_OAR1_ADDMODE | 0x00004000U)"
.br
.ti -1c
.RI "#define \fBSMBUS_DUALADDRESS_DISABLE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBSMBUS_DUALADDRESS_ENABLE\fP   I2C_OAR2_ENDUAL"
.br
.ti -1c
.RI "#define \fBSMBUS_GENERALCALL_DISABLE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBSMBUS_GENERALCALL_ENABLE\fP   I2C_CR1_ENGC"
.br
.ti -1c
.RI "#define \fBSMBUS_NOSTRETCH_DISABLE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBSMBUS_NOSTRETCH_ENABLE\fP   I2C_CR1_NOSTRETCH"
.br
.ti -1c
.RI "#define \fBSMBUS_PEC_DISABLE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBSMBUS_PEC_ENABLE\fP   I2C_CR1_ENPEC"
.br
.ti -1c
.RI "#define \fBSMBUS_PERIPHERAL_MODE_SMBUS_HOST\fP   (uint32_t)(I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP)"
.br
.ti -1c
.RI "#define \fBSMBUS_PERIPHERAL_MODE_SMBUS_SLAVE\fP   I2C_CR1_SMBUS"
.br
.ti -1c
.RI "#define \fBSMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP\fP   (uint32_t)(I2C_CR1_SMBUS | I2C_CR1_ENARP)"
.br
.ti -1c
.RI "#define \fBSMBUS_DIRECTION_RECEIVE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBSMBUS_DIRECTION_TRANSMIT\fP   0x00000001U"
.br
.ti -1c
.RI "#define \fBSMBUS_FIRST_FRAME\fP   0x00000001U"
.br
.ti -1c
.RI "#define \fBSMBUS_NEXT_FRAME\fP   0x00000002U"
.br
.ti -1c
.RI "#define \fBSMBUS_FIRST_AND_LAST_FRAME_NO_PEC\fP   0x00000003U"
.br
.ti -1c
.RI "#define \fBSMBUS_LAST_FRAME_NO_PEC\fP   0x00000004U"
.br
.ti -1c
.RI "#define \fBSMBUS_FIRST_AND_LAST_FRAME_WITH_PEC\fP   0x00000005U"
.br
.ti -1c
.RI "#define \fBSMBUS_LAST_FRAME_WITH_PEC\fP   0x00000006U"
.br
.ti -1c
.RI "#define \fBSMBUS_IT_BUF\fP   I2C_CR2_ITBUFEN"
.br
.ti -1c
.RI "#define \fBSMBUS_IT_EVT\fP   I2C_CR2_ITEVTEN"
.br
.ti -1c
.RI "#define \fBSMBUS_IT_ERR\fP   I2C_CR2_ITERREN"
.br
.ti -1c
.RI "#define \fBSMBUS_FLAG_SMBALERT\fP   0x00018000U"
.br
.ti -1c
.RI "#define \fBSMBUS_FLAG_TIMEOUT\fP   0x00014000U"
.br
.ti -1c
.RI "#define \fBSMBUS_FLAG_PECERR\fP   0x00011000U"
.br
.ti -1c
.RI "#define \fBSMBUS_FLAG_OVR\fP   0x00010800U"
.br
.ti -1c
.RI "#define \fBSMBUS_FLAG_AF\fP   0x00010400U"
.br
.ti -1c
.RI "#define \fBSMBUS_FLAG_ARLO\fP   0x00010200U"
.br
.ti -1c
.RI "#define \fBSMBUS_FLAG_BERR\fP   0x00010100U"
.br
.ti -1c
.RI "#define \fBSMBUS_FLAG_TXE\fP   0x00010080U"
.br
.ti -1c
.RI "#define \fBSMBUS_FLAG_RXNE\fP   0x00010040U"
.br
.ti -1c
.RI "#define \fBSMBUS_FLAG_STOPF\fP   0x00010010U"
.br
.ti -1c
.RI "#define \fBSMBUS_FLAG_ADD10\fP   0x00010008U"
.br
.ti -1c
.RI "#define \fBSMBUS_FLAG_BTF\fP   0x00010004U"
.br
.ti -1c
.RI "#define \fBSMBUS_FLAG_ADDR\fP   0x00010002U"
.br
.ti -1c
.RI "#define \fBSMBUS_FLAG_SB\fP   0x00010001U"
.br
.ti -1c
.RI "#define \fBSMBUS_FLAG_DUALF\fP   0x00100080U"
.br
.ti -1c
.RI "#define \fBSMBUS_FLAG_SMBHOST\fP   0x00100040U"
.br
.ti -1c
.RI "#define \fBSMBUS_FLAG_SMBDEFAULT\fP   0x00100020U"
.br
.ti -1c
.RI "#define \fBSMBUS_FLAG_GENCALL\fP   0x00100010U"
.br
.ti -1c
.RI "#define \fBSMBUS_FLAG_TRA\fP   0x00100004U"
.br
.ti -1c
.RI "#define \fBSMBUS_FLAG_BUSY\fP   0x00100002U"
.br
.ti -1c
.RI "#define \fBSMBUS_FLAG_MSL\fP   0x00100001U"
.br
.ti -1c
.RI "#define \fB__HAL_SMBUS_RESET_HANDLE_STATE\fP(__HANDLE__)   ((__HANDLE__)\->State = \fBHAL_SMBUS_STATE_RESET\fP)"
.br
.RI "Reset SMBUS handle state "
.ti -1c
.RI "#define \fB__HAL_SMBUS_ENABLE_IT\fP(__HANDLE__,  __INTERRUPT__)   ((__HANDLE__)\->Instance\->CR2 |= (__INTERRUPT__))"
.br
.RI "Enable or disable the specified SMBUS interrupts\&. "
.ti -1c
.RI "#define \fB__HAL_SMBUS_DISABLE_IT\fP(__HANDLE__,  __INTERRUPT__)   ((__HANDLE__)\->Instance\->CR2 &= (~(__INTERRUPT__)))"
.br
.ti -1c
.RI "#define \fB__HAL_SMBUS_GET_IT_SOURCE\fP(__HANDLE__,  __INTERRUPT__)   ((((__HANDLE__)\->Instance\->CR2 & (__INTERRUPT__)) == (__INTERRUPT__)) ? SET : RESET)"
.br
.RI "Checks if the specified SMBUS interrupt source is enabled or disabled\&. "
.ti -1c
.RI "#define \fB__HAL_SMBUS_GET_FLAG\fP(__HANDLE__,  __FLAG__)"
.br
.RI "Checks whether the specified SMBUS flag is set or not\&. "
.ti -1c
.RI "#define \fB__HAL_SMBUS_CLEAR_FLAG\fP(__HANDLE__,  __FLAG__)   ((__HANDLE__)\->Instance\->SR1 = ~((__FLAG__) & \fBSMBUS_FLAG_MASK\fP))"
.br
.RI "Clears the SMBUS pending flags which are cleared by writing 0 in a specific bit\&. "
.ti -1c
.RI "#define \fB__HAL_SMBUS_CLEAR_ADDRFLAG\fP(__HANDLE__)"
.br
.RI "Clears the SMBUS ADDR pending flag\&. "
.ti -1c
.RI "#define \fB__HAL_SMBUS_CLEAR_STOPFLAG\fP(__HANDLE__)"
.br
.RI "Clears the SMBUS STOPF pending flag\&. "
.ti -1c
.RI "#define \fB__HAL_SMBUS_ENABLE\fP(__HANDLE__)   ((__HANDLE__)\->Instance\->CR1 |=  I2C_CR1_PE)"
.br
.RI "Enable the SMBUS peripheral\&. "
.ti -1c
.RI "#define \fB__HAL_SMBUS_DISABLE\fP(__HANDLE__)   ((__HANDLE__)\->Instance\->CR1 &=  ~I2C_CR1_PE)"
.br
.RI "Disable the SMBUS peripheral\&. "
.ti -1c
.RI "#define \fB__HAL_SMBUS_GENERATE_NACK\fP(__HANDLE__)   (CLEAR_BIT((__HANDLE__)\->Instance\->CR1, I2C_CR1_ACK))"
.br
.RI "Generate a Non-Acknowledge SMBUS peripheral in Slave mode\&. "
.ti -1c
.RI "#define \fBSMBUS_FLAG_MASK\fP   0x0000FFFFU"
.br
.ti -1c
.RI "#define \fBSMBUS_FREQRANGE\fP(__PCLK__)   ((__PCLK__)/1000000U)"
.br
.ti -1c
.RI "#define \fBSMBUS_RISE_TIME\fP(__FREQRANGE__)   ( ((__FREQRANGE__) + 1U))"
.br
.ti -1c
.RI "#define \fBSMBUS_SPEED_STANDARD\fP(__PCLK__,  __SPEED__)   (((((__PCLK__)/((__SPEED__) << 1U)) & I2C_CCR_CCR) < 4U)? 4U:((__PCLK__) / ((__SPEED__) << 1U)))"
.br
.ti -1c
.RI "#define \fBSMBUS_7BIT_ADD_WRITE\fP(__ADDRESS__)   ((uint8_t)((__ADDRESS__) & (~I2C_OAR1_ADD0)))"
.br
.ti -1c
.RI "#define \fBSMBUS_7BIT_ADD_READ\fP(__ADDRESS__)   ((uint8_t)((__ADDRESS__) | I2C_OAR1_ADD0))"
.br
.ti -1c
.RI "#define \fBSMBUS_10BIT_ADDRESS\fP(__ADDRESS__)   ((uint8_t)((uint16_t)((__ADDRESS__) & (uint16_t)0x00FF)))"
.br
.ti -1c
.RI "#define \fBSMBUS_10BIT_HEADER_WRITE\fP(__ADDRESS__)   ((uint8_t)((uint16_t)((uint16_t)(((uint16_t)((__ADDRESS__) & (uint16_t)0x0300)) >> 7) | (uint16_t)0x00F0)))"
.br
.ti -1c
.RI "#define \fBSMBUS_10BIT_HEADER_READ\fP(__ADDRESS__)   ((uint8_t)((uint16_t)((uint16_t)(((uint16_t)((__ADDRESS__) & (uint16_t)0x0300)) >> 7) | (uint16_t)(0x00F1))))"
.br
.ti -1c
.RI "#define \fBSMBUS_GET_PEC_MODE\fP(__HANDLE__)   ((__HANDLE__)\->Instance\->CR1 & I2C_CR1_ENPEC)"
.br
.ti -1c
.RI "#define \fBSMBUS_GET_PEC_VALUE\fP(__HANDLE__)   ((__HANDLE__)\->XferPEC)"
.br
.ti -1c
.RI "#define \fBIS_SMBUS_ADDRESSING_MODE\fP(ADDRESS)"
.br
.ti -1c
.RI "#define \fBIS_SMBUS_DUAL_ADDRESS\fP(ADDRESS)"
.br
.ti -1c
.RI "#define \fBIS_SMBUS_GENERAL_CALL\fP(CALL)"
.br
.ti -1c
.RI "#define \fBIS_SMBUS_NO_STRETCH\fP(STRETCH)"
.br
.ti -1c
.RI "#define \fBIS_SMBUS_PEC\fP(PEC)"
.br
.ti -1c
.RI "#define \fBIS_SMBUS_PERIPHERAL_MODE\fP(MODE)"
.br
.ti -1c
.RI "#define \fBIS_SMBUS_CLOCK_SPEED\fP(SPEED)   (((SPEED) > 0U) && ((SPEED) <= 100000U))"
.br
.ti -1c
.RI "#define \fBIS_SMBUS_OWN_ADDRESS1\fP(ADDRESS1)   (((ADDRESS1) & 0xFFFFFC00U) == 0U)"
.br
.ti -1c
.RI "#define \fBIS_SMBUS_OWN_ADDRESS2\fP(ADDRESS2)   (((ADDRESS2) & 0xFFFFFF01U) == 0U)"
.br
.ti -1c
.RI "#define \fBIS_SMBUS_TRANSFER_OPTIONS_REQUEST\fP(REQUEST)"
.br
.in -1c
.SS "类型定义"

.in +1c
.ti -1c
.RI "typedef struct \fB__SMBUS_HandleTypeDef\fP \fBSMBUS_HandleTypeDef\fP"
.br
.RI "SMBUS handle Structure definition "
.in -1c
.SS "枚举"

.in +1c
.ti -1c
.RI "enum \fBHAL_SMBUS_StateTypeDef\fP { \fBHAL_SMBUS_STATE_RESET\fP = 0x00U, \fBHAL_SMBUS_STATE_READY\fP = 0x20U, \fBHAL_SMBUS_STATE_BUSY\fP = 0x24U, \fBHAL_SMBUS_STATE_BUSY_TX\fP = 0x21U, \fBHAL_SMBUS_STATE_BUSY_RX\fP = 0x22U, \fBHAL_SMBUS_STATE_LISTEN\fP = 0x28U, \fBHAL_SMBUS_STATE_BUSY_TX_LISTEN\fP = 0x29U, \fBHAL_SMBUS_STATE_BUSY_RX_LISTEN\fP = 0x2AU, \fBHAL_SMBUS_STATE_ABORT\fP = 0x60U, \fBHAL_SMBUS_STATE_TIMEOUT\fP = 0xA0U, \fBHAL_SMBUS_STATE_ERROR\fP = 0xE0U }"
.br
.RI "HAL State structure definition "
.ti -1c
.RI "enum \fBHAL_SMBUS_ModeTypeDef\fP { \fBHAL_SMBUS_MODE_NONE\fP = 0x00U, \fBHAL_SMBUS_MODE_MASTER\fP = 0x10U, \fBHAL_SMBUS_MODE_SLAVE\fP = 0x20U }"
.br
.RI "HAL Mode structure definition "
.in -1c
.SS "函数"

.in +1c
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_SMBUS_Init\fP (\fBSMBUS_HandleTypeDef\fP *hsmbus)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_SMBUS_DeInit\fP (\fBSMBUS_HandleTypeDef\fP *hsmbus)"
.br
.ti -1c
.RI "void \fBHAL_SMBUS_MspInit\fP (\fBSMBUS_HandleTypeDef\fP *hsmbus)"
.br
.ti -1c
.RI "void \fBHAL_SMBUS_MspDeInit\fP (\fBSMBUS_HandleTypeDef\fP *hsmbus)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_SMBUS_IsDeviceReady\fP (\fBSMBUS_HandleTypeDef\fP *hsmbus, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_SMBUS_Master_Transmit_IT\fP (\fBSMBUS_HandleTypeDef\fP *hsmbus, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_SMBUS_Master_Receive_IT\fP (\fBSMBUS_HandleTypeDef\fP *hsmbus, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_SMBUS_Master_Abort_IT\fP (\fBSMBUS_HandleTypeDef\fP *hsmbus, uint16_t DevAddress)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_SMBUS_Slave_Transmit_IT\fP (\fBSMBUS_HandleTypeDef\fP *hsmbus, uint8_t *pData, uint16_t Size, uint32_t XferOptions)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_SMBUS_Slave_Receive_IT\fP (\fBSMBUS_HandleTypeDef\fP *hsmbus, uint8_t *pData, uint16_t Size, uint32_t XferOptions)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_SMBUS_EnableAlert_IT\fP (\fBSMBUS_HandleTypeDef\fP *hsmbus)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_SMBUS_DisableAlert_IT\fP (\fBSMBUS_HandleTypeDef\fP *hsmbus)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_SMBUS_EnableListen_IT\fP (\fBSMBUS_HandleTypeDef\fP *hsmbus)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_SMBUS_DisableListen_IT\fP (\fBSMBUS_HandleTypeDef\fP *hsmbus)"
.br
.ti -1c
.RI "void \fBHAL_SMBUS_EV_IRQHandler\fP (\fBSMBUS_HandleTypeDef\fP *hsmbus)"
.br
.ti -1c
.RI "void \fBHAL_SMBUS_ER_IRQHandler\fP (\fBSMBUS_HandleTypeDef\fP *hsmbus)"
.br
.ti -1c
.RI "void \fBHAL_SMBUS_MasterTxCpltCallback\fP (\fBSMBUS_HandleTypeDef\fP *hsmbus)"
.br
.ti -1c
.RI "void \fBHAL_SMBUS_MasterRxCpltCallback\fP (\fBSMBUS_HandleTypeDef\fP *hsmbus)"
.br
.ti -1c
.RI "void \fBHAL_SMBUS_SlaveTxCpltCallback\fP (\fBSMBUS_HandleTypeDef\fP *hsmbus)"
.br
.ti -1c
.RI "void \fBHAL_SMBUS_SlaveRxCpltCallback\fP (\fBSMBUS_HandleTypeDef\fP *hsmbus)"
.br
.ti -1c
.RI "void \fBHAL_SMBUS_AddrCallback\fP (\fBSMBUS_HandleTypeDef\fP *hsmbus, uint8_t TransferDirection, uint16_t AddrMatchCode)"
.br
.ti -1c
.RI "void \fBHAL_SMBUS_ListenCpltCallback\fP (\fBSMBUS_HandleTypeDef\fP *hsmbus)"
.br
.ti -1c
.RI "void \fBHAL_SMBUS_ErrorCallback\fP (\fBSMBUS_HandleTypeDef\fP *hsmbus)"
.br
.ti -1c
.RI "void \fBHAL_SMBUS_AbortCpltCallback\fP (\fBSMBUS_HandleTypeDef\fP *hsmbus)"
.br
.ti -1c
.RI "\fBHAL_SMBUS_StateTypeDef\fP \fBHAL_SMBUS_GetState\fP (\fBSMBUS_HandleTypeDef\fP *hsmbus)"
.br
.ti -1c
.RI "\fBHAL_SMBUS_ModeTypeDef\fP \fBHAL_SMBUS_GetMode\fP (\fBSMBUS_HandleTypeDef\fP *hsmbus)"
.br
.ti -1c
.RI "uint32_t \fBHAL_SMBUS_GetError\fP (\fBSMBUS_HandleTypeDef\fP *hsmbus)"
.br
.in -1c
.SH "详细描述"
.PP 
Header file of SMBUS HAL module\&. 


.PP
\fB作者\fP
.RS 4
MCD Application Team 
.RE
.PP
\fB注意\fP
.RS 4
.RE
.PP
.SS "(C) Copyright (c) 2016 STMicroelectronics\&. All rights reserved\&."
.PP
This software component is licensed by ST under BSD 3-Clause license, the 'License'; You may not use this file except in compliance with the License\&. You may obtain a copy of the License at: opensource\&.org/licenses/BSD-3-Clause 
.PP
在文件 \fBstm32f4xx_hal_smbus\&.h\fP 中定义\&.
.SH "作者"
.PP 
由 Doyxgen 通过分析 STM32F4_HAL 的 源代码自动生成\&.
