.TH "inc/stm32f4xx_hal_def.h" 3 "2020年 八月 7日 星期五" "Version 1.24.0" "STM32F4_HAL" \" -*- nroff -*-
.ad l
.nh
.SH NAME
inc/stm32f4xx_hal_def.h \- This file contains HAL common defines, enumeration, macros and structures definitions\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'stm32f4xx\&.h'\fP
.br
\fC#include 'Legacy/stm32_hal_legacy\&.h'\fP
.br
\fC#include <stddef\&.h>\fP
.br

.SS "宏定义"

.in +1c
.ti -1c
.RI "#define \fBUNUSED\fP(X)   (void)X      /* To avoid gcc/g++ warnings */"
.br
.ti -1c
.RI "#define \fBHAL_MAX_DELAY\fP   0xFFFFFFFFU"
.br
.ti -1c
.RI "#define \fBHAL_IS_BIT_SET\fP(REG,  BIT)   (((REG) & (BIT)) == (BIT))"
.br
.ti -1c
.RI "#define \fBHAL_IS_BIT_CLR\fP(REG,  BIT)   (((REG) & (BIT)) == 0U)"
.br
.ti -1c
.RI "#define \fB__HAL_LINKDMA\fP(__HANDLE__,  __PPP_DMA_FIELD__,  __DMA_HANDLE__)"
.br
.ti -1c
.RI "#define \fB__HAL_RESET_HANDLE_STATE\fP(__HANDLE__)   ((__HANDLE__)\->State = 0U)"
.br
.RI "Reset the Handle's State field\&. "
.ti -1c
.RI "#define \fB__HAL_LOCK\fP(__HANDLE__)"
.br
.ti -1c
.RI "#define \fB__HAL_UNLOCK\fP(__HANDLE__)"
.br
.ti -1c
.RI "#define \fB__ALIGN_END\fP"
.br
.in -1c
.SS "枚举"

.in +1c
.ti -1c
.RI "enum \fBHAL_StatusTypeDef\fP { \fBHAL_OK\fP = 0x00U, \fBHAL_ERROR\fP = 0x01U, \fBHAL_BUSY\fP = 0x02U, \fBHAL_TIMEOUT\fP = 0x03U }"
.br
.RI "HAL Status structures definition 
.br
 "
.ti -1c
.RI "enum \fBHAL_LockTypeDef\fP { \fBHAL_UNLOCKED\fP = 0x00U, \fBHAL_LOCKED\fP = 0x01U }"
.br
.RI "HAL Lock structures definition 
.br
 "
.in -1c
.SH "详细描述"
.PP 
This file contains HAL common defines, enumeration, macros and structures definitions\&. 


.PP
\fB作者\fP
.RS 4
MCD Application Team 
.RE
.PP
\fB注意\fP
.RS 4
.RE
.PP
.SS "(C) Copyright (c) 2017 STMicroelectronics\&. All rights reserved\&."
.PP
This software component is licensed by ST under BSD 3-Clause license, the 'License'; You may not use this file except in compliance with the License\&. You may obtain a copy of the License at: opensource\&.org/licenses/BSD-3-Clause 
.PP
在文件 \fBstm32f4xx_hal_def\&.h\fP 中定义\&.
.SH "宏定义说明"
.PP 
.SS "#define __ALIGN_END"

.PP
在文件 stm32f4xx_hal_def\&.h 第 131 行定义\&.
.SS "#define __HAL_LINKDMA(__HANDLE__, __PPP_DMA_FIELD__, __DMA_HANDLE__)"
\fB值:\fP
.PP
.nf
                        do{                                                      \
                              (__HANDLE__)->__PPP_DMA_FIELD__ = &(__DMA_HANDLE__); \
                              (__DMA_HANDLE__)\&.Parent = (__HANDLE__);             \
                          } while(0U)
.fi
.PP
在文件 stm32f4xx_hal_def\&.h 第 66 行定义\&.
.SS "#define __HAL_LOCK(__HANDLE__)"
\fB值:\fP
.PP
.nf
                                do{                                        \
                                    if((__HANDLE__)->Lock == HAL_LOCKED)   \
                                    {                                      \
                                       return HAL_BUSY;                    \
                                    }                                      \
                                    else                                   \
                                    {                                      \
                                       (__HANDLE__)->Lock = HAL_LOCKED;    \
                                    }                                      \
                                  }while (0U)
.fi
.PP
在文件 stm32f4xx_hal_def\&.h 第 93 行定义\&.
.SS "#define __HAL_RESET_HANDLE_STATE(__HANDLE__)   ((__HANDLE__)\->State = 0U)"

.PP
Reset the Handle's State field\&. 
.PP
\fB参数\fP
.RS 4
\fI<strong>HANDLE</strong>\fP specifies the Peripheral Handle\&. 
.RE
.PP
\fB注解\fP
.RS 4
This macro can be used for the following purpose:
.IP "\(bu" 2
When the Handle is declared as local variable; before passing it as parameter to HAL_PPP_Init() for the first time, it is mandatory to use this macro to set to 0 the Handle's 'State' field\&. Otherwise, 'State' field may have any random value and the first time the function HAL_PPP_Init() is called, the low level hardware initialization will be missed (i\&.e\&. \fBHAL_PPP_MspInit()\fP will not be executed)\&.
.IP "\(bu" 2
When there is a need to reconfigure the low level hardware: instead of calling HAL_PPP_DeInit() then HAL_PPP_Init(), user can make a call to this macro then HAL_PPP_Init()\&. In this later function, when the Handle's 'State' field is set to 0, it will execute the function \fBHAL_PPP_MspInit()\fP which will reconfigure the low level hardware\&. 
.PP
.RE
.PP
\fB返回值\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
在文件 stm32f4xx_hal_def\&.h 第 87 行定义\&.
.SS "#define __HAL_UNLOCK(__HANDLE__)"
\fB值:\fP
.PP
.nf
                                  do{                                       \
                                      (__HANDLE__)->Lock = HAL_UNLOCKED;    \
                                    }while (0U)
.fi
.PP
在文件 stm32f4xx_hal_def\&.h 第 105 行定义\&.
.SS "#define HAL_IS_BIT_CLR(REG, BIT)   (((REG) & (BIT)) == 0U)"

.PP
在文件 stm32f4xx_hal_def\&.h 第 64 行定义\&.
.SS "#define HAL_IS_BIT_SET(REG, BIT)   (((REG) & (BIT)) == (BIT))"

.PP
在文件 stm32f4xx_hal_def\&.h 第 63 行定义\&.
.SS "#define HAL_MAX_DELAY   0xFFFFFFFFU"

.PP
在文件 stm32f4xx_hal_def\&.h 第 61 行定义\&.
.SS "#define UNUSED(X)   (void)X      /* To avoid gcc/g++ warnings */"

.PP
在文件 stm32f4xx_hal_def\&.h 第 59 行定义\&.
.SH "枚举类型说明"
.PP 
.SS "enum \fBHAL_LockTypeDef\fP"

.PP
HAL Lock structures definition 
.br
 
.PP
\fB枚举值\fP
.in +1c
.TP
\fB\fIHAL_UNLOCKED \fP\fP
.TP
\fB\fIHAL_LOCKED \fP\fP
.PP
在文件 stm32f4xx_hal_def\&.h 第 50 行定义\&.
.SS "enum \fBHAL_StatusTypeDef\fP"

.PP
HAL Status structures definition 
.br
 
.PP
\fB枚举值\fP
.in +1c
.TP
\fB\fIHAL_OK \fP\fP
.TP
\fB\fIHAL_ERROR \fP\fP
.TP
\fB\fIHAL_BUSY \fP\fP
.TP
\fB\fIHAL_TIMEOUT \fP\fP
.PP
在文件 stm32f4xx_hal_def\&.h 第 39 行定义\&.
.SH "作者"
.PP 
由 Doyxgen 通过分析 STM32F4_HAL 的 源代码自动生成\&.
