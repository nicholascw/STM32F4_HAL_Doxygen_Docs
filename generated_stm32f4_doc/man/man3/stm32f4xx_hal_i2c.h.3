.TH "inc/stm32f4xx_hal_i2c.h" 3 "2020年 八月 7日 星期五" "Version 1.24.0" "STM32F4_HAL" \" -*- nroff -*-
.ad l
.nh
.SH NAME
inc/stm32f4xx_hal_i2c.h \- Header file of I2C HAL module\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'stm32f4xx_hal_def\&.h'\fP
.br
\fC#include 'stm32f4xx_hal_i2c_ex\&.h'\fP
.br

.SS "结构体"

.in +1c
.ti -1c
.RI "struct \fBI2C_InitTypeDef\fP"
.br
.ti -1c
.RI "struct \fB__I2C_HandleTypeDef\fP"
.br
.in -1c
.SS "宏定义"

.in +1c
.ti -1c
.RI "#define \fBHAL_I2C_ERROR_NONE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBHAL_I2C_ERROR_BERR\fP   0x00000001U"
.br
.ti -1c
.RI "#define \fBHAL_I2C_ERROR_ARLO\fP   0x00000002U"
.br
.ti -1c
.RI "#define \fBHAL_I2C_ERROR_AF\fP   0x00000004U"
.br
.ti -1c
.RI "#define \fBHAL_I2C_ERROR_OVR\fP   0x00000008U"
.br
.ti -1c
.RI "#define \fBHAL_I2C_ERROR_DMA\fP   0x00000010U"
.br
.ti -1c
.RI "#define \fBHAL_I2C_ERROR_TIMEOUT\fP   0x00000020U"
.br
.ti -1c
.RI "#define \fBHAL_I2C_ERROR_SIZE\fP   0x00000040U"
.br
.ti -1c
.RI "#define \fBHAL_I2C_ERROR_DMA_PARAM\fP   0x00000080U"
.br
.ti -1c
.RI "#define \fBI2C_DUTYCYCLE_2\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBI2C_DUTYCYCLE_16_9\fP   I2C_CCR_DUTY"
.br
.ti -1c
.RI "#define \fBI2C_ADDRESSINGMODE_7BIT\fP   0x00004000U"
.br
.ti -1c
.RI "#define \fBI2C_ADDRESSINGMODE_10BIT\fP   (I2C_OAR1_ADDMODE | 0x00004000U)"
.br
.ti -1c
.RI "#define \fBI2C_DUALADDRESS_DISABLE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBI2C_DUALADDRESS_ENABLE\fP   I2C_OAR2_ENDUAL"
.br
.ti -1c
.RI "#define \fBI2C_GENERALCALL_DISABLE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBI2C_GENERALCALL_ENABLE\fP   I2C_CR1_ENGC"
.br
.ti -1c
.RI "#define \fBI2C_NOSTRETCH_DISABLE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBI2C_NOSTRETCH_ENABLE\fP   I2C_CR1_NOSTRETCH"
.br
.ti -1c
.RI "#define \fBI2C_MEMADD_SIZE_8BIT\fP   0x00000001U"
.br
.ti -1c
.RI "#define \fBI2C_MEMADD_SIZE_16BIT\fP   0x00000010U"
.br
.ti -1c
.RI "#define \fBI2C_DIRECTION_RECEIVE\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBI2C_DIRECTION_TRANSMIT\fP   0x00000001U"
.br
.ti -1c
.RI "#define \fBI2C_FIRST_FRAME\fP   0x00000001U"
.br
.ti -1c
.RI "#define \fBI2C_FIRST_AND_NEXT_FRAME\fP   0x00000002U"
.br
.ti -1c
.RI "#define \fBI2C_NEXT_FRAME\fP   0x00000004U"
.br
.ti -1c
.RI "#define \fBI2C_FIRST_AND_LAST_FRAME\fP   0x00000008U"
.br
.ti -1c
.RI "#define \fBI2C_LAST_FRAME_NO_STOP\fP   0x00000010U"
.br
.ti -1c
.RI "#define \fBI2C_LAST_FRAME\fP   0x00000020U"
.br
.ti -1c
.RI "#define \fBI2C_OTHER_FRAME\fP   (0x00AA0000U)"
.br
.ti -1c
.RI "#define \fBI2C_OTHER_AND_LAST_FRAME\fP   (0xAA000000U)"
.br
.ti -1c
.RI "#define \fBI2C_IT_BUF\fP   I2C_CR2_ITBUFEN"
.br
.ti -1c
.RI "#define \fBI2C_IT_EVT\fP   I2C_CR2_ITEVTEN"
.br
.ti -1c
.RI "#define \fBI2C_IT_ERR\fP   I2C_CR2_ITERREN"
.br
.ti -1c
.RI "#define \fBI2C_FLAG_OVR\fP   0x00010800U"
.br
.ti -1c
.RI "#define \fBI2C_FLAG_AF\fP   0x00010400U"
.br
.ti -1c
.RI "#define \fBI2C_FLAG_ARLO\fP   0x00010200U"
.br
.ti -1c
.RI "#define \fBI2C_FLAG_BERR\fP   0x00010100U"
.br
.ti -1c
.RI "#define \fBI2C_FLAG_TXE\fP   0x00010080U"
.br
.ti -1c
.RI "#define \fBI2C_FLAG_RXNE\fP   0x00010040U"
.br
.ti -1c
.RI "#define \fBI2C_FLAG_STOPF\fP   0x00010010U"
.br
.ti -1c
.RI "#define \fBI2C_FLAG_ADD10\fP   0x00010008U"
.br
.ti -1c
.RI "#define \fBI2C_FLAG_BTF\fP   0x00010004U"
.br
.ti -1c
.RI "#define \fBI2C_FLAG_ADDR\fP   0x00010002U"
.br
.ti -1c
.RI "#define \fBI2C_FLAG_SB\fP   0x00010001U"
.br
.ti -1c
.RI "#define \fBI2C_FLAG_DUALF\fP   0x00100080U"
.br
.ti -1c
.RI "#define \fBI2C_FLAG_GENCALL\fP   0x00100010U"
.br
.ti -1c
.RI "#define \fBI2C_FLAG_TRA\fP   0x00100004U"
.br
.ti -1c
.RI "#define \fBI2C_FLAG_BUSY\fP   0x00100002U"
.br
.ti -1c
.RI "#define \fBI2C_FLAG_MSL\fP   0x00100001U"
.br
.ti -1c
.RI "#define \fB__HAL_I2C_RESET_HANDLE_STATE\fP(__HANDLE__)   ((__HANDLE__)\->State = \fBHAL_I2C_STATE_RESET\fP)"
.br
.RI "Reset I2C handle state\&. "
.ti -1c
.RI "#define \fB__HAL_I2C_ENABLE_IT\fP(__HANDLE__,  __INTERRUPT__)   SET_BIT((__HANDLE__)\->Instance\->CR2,(__INTERRUPT__))"
.br
.RI "Enable or disable the specified I2C interrupts\&. "
.ti -1c
.RI "#define \fB__HAL_I2C_DISABLE_IT\fP(__HANDLE__,  __INTERRUPT__)   CLEAR_BIT((__HANDLE__)\->Instance\->CR2, (__INTERRUPT__))"
.br
.ti -1c
.RI "#define \fB__HAL_I2C_GET_IT_SOURCE\fP(__HANDLE__,  __INTERRUPT__)   ((((__HANDLE__)\->Instance\->CR2 & (__INTERRUPT__)) == (__INTERRUPT__)) ? SET : RESET)"
.br
.RI "Checks if the specified I2C interrupt source is enabled or disabled\&. "
.ti -1c
.RI "#define \fB__HAL_I2C_GET_FLAG\fP(__HANDLE__,  __FLAG__)"
.br
.RI "Checks whether the specified I2C flag is set or not\&. "
.ti -1c
.RI "#define \fB__HAL_I2C_CLEAR_FLAG\fP(__HANDLE__,  __FLAG__)   ((__HANDLE__)\->Instance\->SR1 = ~((__FLAG__) & \fBI2C_FLAG_MASK\fP))"
.br
.RI "Clears the I2C pending flags which are cleared by writing 0 in a specific bit\&. "
.ti -1c
.RI "#define \fB__HAL_I2C_CLEAR_ADDRFLAG\fP(__HANDLE__)"
.br
.RI "Clears the I2C ADDR pending flag\&. "
.ti -1c
.RI "#define \fB__HAL_I2C_CLEAR_STOPFLAG\fP(__HANDLE__)"
.br
.RI "Clears the I2C STOPF pending flag\&. "
.ti -1c
.RI "#define \fB__HAL_I2C_ENABLE\fP(__HANDLE__)   SET_BIT((__HANDLE__)\->Instance\->CR1, I2C_CR1_PE)"
.br
.RI "Enable the specified I2C peripheral\&. "
.ti -1c
.RI "#define \fB__HAL_I2C_DISABLE\fP(__HANDLE__)   CLEAR_BIT((__HANDLE__)\->Instance\->CR1, I2C_CR1_PE)"
.br
.RI "Disable the specified I2C peripheral\&. "
.ti -1c
.RI "#define \fBI2C_FLAG_MASK\fP   0x0000FFFFU"
.br
.ti -1c
.RI "#define \fBI2C_MIN_PCLK_FREQ_STANDARD\fP   2000000U"
.br
.ti -1c
.RI "#define \fBI2C_MIN_PCLK_FREQ_FAST\fP   4000000U"
.br
.ti -1c
.RI "#define \fBI2C_MIN_PCLK_FREQ\fP(__PCLK__,  __SPEED__)   (((__SPEED__) <= 100000U) ? ((__PCLK__) < \fBI2C_MIN_PCLK_FREQ_STANDARD\fP) : ((__PCLK__) < \fBI2C_MIN_PCLK_FREQ_FAST\fP))"
.br
.ti -1c
.RI "#define \fBI2C_CCR_CALCULATION\fP(__PCLK__,  __SPEED__,  __COEFF__)   (((((__PCLK__) \- 1U)/((__SPEED__) * (__COEFF__))) + 1U) & I2C_CCR_CCR)"
.br
.ti -1c
.RI "#define \fBI2C_FREQRANGE\fP(__PCLK__)   ((__PCLK__)/1000000U)"
.br
.ti -1c
.RI "#define \fBI2C_RISE_TIME\fP(__FREQRANGE__,  __SPEED__)   (((__SPEED__) <= 100000U) ? ((__FREQRANGE__) + 1U) : ((((__FREQRANGE__) * 300U) / 1000U) + 1U))"
.br
.ti -1c
.RI "#define \fBI2C_SPEED_STANDARD\fP(__PCLK__,  __SPEED__)   ((\fBI2C_CCR_CALCULATION\fP((__PCLK__), (__SPEED__), 2U) < 4U)? 4U:I2C_CCR_CALCULATION((__PCLK__), (__SPEED__), 2U))"
.br
.ti -1c
.RI "#define \fBI2C_SPEED_FAST\fP(__PCLK__,  __SPEED__,  __DUTYCYCLE__)   (((__DUTYCYCLE__) == \fBI2C_DUTYCYCLE_2\fP)? \fBI2C_CCR_CALCULATION\fP((__PCLK__), (__SPEED__), 3U) : (\fBI2C_CCR_CALCULATION\fP((__PCLK__), (__SPEED__), 25U) | \fBI2C_DUTYCYCLE_16_9\fP))"
.br
.ti -1c
.RI "#define \fBI2C_SPEED\fP(__PCLK__,  __SPEED__,  __DUTYCYCLE__)"
.br
.ti -1c
.RI "#define \fBI2C_7BIT_ADD_WRITE\fP(__ADDRESS__)   ((uint8_t)((__ADDRESS__) & (uint8_t)(~I2C_OAR1_ADD0)))"
.br
.ti -1c
.RI "#define \fBI2C_7BIT_ADD_READ\fP(__ADDRESS__)   ((uint8_t)((__ADDRESS__) | I2C_OAR1_ADD0))"
.br
.ti -1c
.RI "#define \fBI2C_10BIT_ADDRESS\fP(__ADDRESS__)   ((uint8_t)((uint16_t)((__ADDRESS__) & (uint16_t)0x00FF)))"
.br
.ti -1c
.RI "#define \fBI2C_10BIT_HEADER_WRITE\fP(__ADDRESS__)   ((uint8_t)((uint16_t)((uint16_t)(((uint16_t)((__ADDRESS__) & (uint16_t)0x0300)) >> 7) | (uint16_t)0x00F0)))"
.br
.ti -1c
.RI "#define \fBI2C_10BIT_HEADER_READ\fP(__ADDRESS__)   ((uint8_t)((uint16_t)((uint16_t)(((uint16_t)((__ADDRESS__) & (uint16_t)0x0300)) >> 7) | (uint16_t)(0x00F1))))"
.br
.ti -1c
.RI "#define \fBI2C_MEM_ADD_MSB\fP(__ADDRESS__)   ((uint8_t)((uint16_t)(((uint16_t)((__ADDRESS__) & (uint16_t)0xFF00)) >> 8)))"
.br
.ti -1c
.RI "#define \fBI2C_MEM_ADD_LSB\fP(__ADDRESS__)   ((uint8_t)((uint16_t)((__ADDRESS__) & (uint16_t)0x00FF)))"
.br
.ti -1c
.RI "#define \fBIS_I2C_DUTY_CYCLE\fP(CYCLE)"
.br
.ti -1c
.RI "#define \fBIS_I2C_ADDRESSING_MODE\fP(ADDRESS)"
.br
.ti -1c
.RI "#define \fBIS_I2C_DUAL_ADDRESS\fP(ADDRESS)"
.br
.ti -1c
.RI "#define \fBIS_I2C_GENERAL_CALL\fP(CALL)"
.br
.ti -1c
.RI "#define \fBIS_I2C_NO_STRETCH\fP(STRETCH)"
.br
.ti -1c
.RI "#define \fBIS_I2C_MEMADD_SIZE\fP(SIZE)"
.br
.ti -1c
.RI "#define \fBIS_I2C_CLOCK_SPEED\fP(SPEED)   (((SPEED) > 0U) && ((SPEED) <= 400000U))"
.br
.ti -1c
.RI "#define \fBIS_I2C_OWN_ADDRESS1\fP(ADDRESS1)   (((ADDRESS1) & 0xFFFFFC00U) == 0U)"
.br
.ti -1c
.RI "#define \fBIS_I2C_OWN_ADDRESS2\fP(ADDRESS2)   (((ADDRESS2) & 0xFFFFFF01U) == 0U)"
.br
.ti -1c
.RI "#define \fBIS_I2C_TRANSFER_OPTIONS_REQUEST\fP(REQUEST)"
.br
.ti -1c
.RI "#define \fBIS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST\fP(REQUEST)"
.br
.ti -1c
.RI "#define \fBI2C_CHECK_FLAG\fP(__ISR__,  __FLAG__)   ((((__ISR__) & ((__FLAG__) & \fBI2C_FLAG_MASK\fP)) == ((__FLAG__) & \fBI2C_FLAG_MASK\fP)) ? SET : RESET)"
.br
.ti -1c
.RI "#define \fBI2C_CHECK_IT_SOURCE\fP(__CR1__,  __IT__)   ((((__CR1__) & (__IT__)) == (__IT__)) ? SET : RESET)"
.br
.in -1c
.SS "类型定义"

.in +1c
.ti -1c
.RI "typedef struct \fB__I2C_HandleTypeDef\fP \fBI2C_HandleTypeDef\fP"
.br
.in -1c
.SS "枚举"

.in +1c
.ti -1c
.RI "enum \fBHAL_I2C_StateTypeDef\fP { \fBHAL_I2C_STATE_RESET\fP = 0x00U, \fBHAL_I2C_STATE_READY\fP = 0x20U, \fBHAL_I2C_STATE_BUSY\fP = 0x24U, \fBHAL_I2C_STATE_BUSY_TX\fP = 0x21U, \fBHAL_I2C_STATE_BUSY_RX\fP = 0x22U, \fBHAL_I2C_STATE_LISTEN\fP = 0x28U, \fBHAL_I2C_STATE_BUSY_TX_LISTEN\fP = 0x29U, \fBHAL_I2C_STATE_BUSY_RX_LISTEN\fP = 0x2AU, \fBHAL_I2C_STATE_ABORT\fP = 0x60U, \fBHAL_I2C_STATE_TIMEOUT\fP = 0xA0U, \fBHAL_I2C_STATE_ERROR\fP = 0xE0U }"
.br
.ti -1c
.RI "enum \fBHAL_I2C_ModeTypeDef\fP { \fBHAL_I2C_MODE_NONE\fP = 0x00U, \fBHAL_I2C_MODE_MASTER\fP = 0x10U, \fBHAL_I2C_MODE_SLAVE\fP = 0x20U, \fBHAL_I2C_MODE_MEM\fP = 0x40U }"
.br
.in -1c
.SS "函数"

.in +1c
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_Init\fP (\fBI2C_HandleTypeDef\fP *hi2c)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_DeInit\fP (\fBI2C_HandleTypeDef\fP *hi2c)"
.br
.ti -1c
.RI "void \fBHAL_I2C_MspInit\fP (\fBI2C_HandleTypeDef\fP *hi2c)"
.br
.ti -1c
.RI "void \fBHAL_I2C_MspDeInit\fP (\fBI2C_HandleTypeDef\fP *hi2c)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_Master_Transmit\fP (\fBI2C_HandleTypeDef\fP *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_Master_Receive\fP (\fBI2C_HandleTypeDef\fP *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_Slave_Transmit\fP (\fBI2C_HandleTypeDef\fP *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_Slave_Receive\fP (\fBI2C_HandleTypeDef\fP *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_Mem_Write\fP (\fBI2C_HandleTypeDef\fP *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_Mem_Read\fP (\fBI2C_HandleTypeDef\fP *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_IsDeviceReady\fP (\fBI2C_HandleTypeDef\fP *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_Master_Transmit_IT\fP (\fBI2C_HandleTypeDef\fP *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_Master_Receive_IT\fP (\fBI2C_HandleTypeDef\fP *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_Slave_Transmit_IT\fP (\fBI2C_HandleTypeDef\fP *hi2c, uint8_t *pData, uint16_t Size)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_Slave_Receive_IT\fP (\fBI2C_HandleTypeDef\fP *hi2c, uint8_t *pData, uint16_t Size)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_Mem_Write_IT\fP (\fBI2C_HandleTypeDef\fP *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_Mem_Read_IT\fP (\fBI2C_HandleTypeDef\fP *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_Master_Seq_Transmit_IT\fP (\fBI2C_HandleTypeDef\fP *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_Master_Seq_Receive_IT\fP (\fBI2C_HandleTypeDef\fP *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_Slave_Seq_Transmit_IT\fP (\fBI2C_HandleTypeDef\fP *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_Slave_Seq_Receive_IT\fP (\fBI2C_HandleTypeDef\fP *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_EnableListen_IT\fP (\fBI2C_HandleTypeDef\fP *hi2c)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_DisableListen_IT\fP (\fBI2C_HandleTypeDef\fP *hi2c)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_Master_Abort_IT\fP (\fBI2C_HandleTypeDef\fP *hi2c, uint16_t DevAddress)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_Master_Transmit_DMA\fP (\fBI2C_HandleTypeDef\fP *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_Master_Receive_DMA\fP (\fBI2C_HandleTypeDef\fP *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_Slave_Transmit_DMA\fP (\fBI2C_HandleTypeDef\fP *hi2c, uint8_t *pData, uint16_t Size)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_Slave_Receive_DMA\fP (\fBI2C_HandleTypeDef\fP *hi2c, uint8_t *pData, uint16_t Size)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_Mem_Write_DMA\fP (\fBI2C_HandleTypeDef\fP *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_Mem_Read_DMA\fP (\fBI2C_HandleTypeDef\fP *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_Master_Seq_Transmit_DMA\fP (\fBI2C_HandleTypeDef\fP *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_Master_Seq_Receive_DMA\fP (\fBI2C_HandleTypeDef\fP *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_Slave_Seq_Transmit_DMA\fP (\fBI2C_HandleTypeDef\fP *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)"
.br
.ti -1c
.RI "\fBHAL_StatusTypeDef\fP \fBHAL_I2C_Slave_Seq_Receive_DMA\fP (\fBI2C_HandleTypeDef\fP *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)"
.br
.ti -1c
.RI "void \fBHAL_I2C_EV_IRQHandler\fP (\fBI2C_HandleTypeDef\fP *hi2c)"
.br
.ti -1c
.RI "void \fBHAL_I2C_ER_IRQHandler\fP (\fBI2C_HandleTypeDef\fP *hi2c)"
.br
.ti -1c
.RI "void \fBHAL_I2C_MasterTxCpltCallback\fP (\fBI2C_HandleTypeDef\fP *hi2c)"
.br
.ti -1c
.RI "void \fBHAL_I2C_MasterRxCpltCallback\fP (\fBI2C_HandleTypeDef\fP *hi2c)"
.br
.ti -1c
.RI "void \fBHAL_I2C_SlaveTxCpltCallback\fP (\fBI2C_HandleTypeDef\fP *hi2c)"
.br
.ti -1c
.RI "void \fBHAL_I2C_SlaveRxCpltCallback\fP (\fBI2C_HandleTypeDef\fP *hi2c)"
.br
.ti -1c
.RI "void \fBHAL_I2C_AddrCallback\fP (\fBI2C_HandleTypeDef\fP *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)"
.br
.ti -1c
.RI "void \fBHAL_I2C_ListenCpltCallback\fP (\fBI2C_HandleTypeDef\fP *hi2c)"
.br
.ti -1c
.RI "void \fBHAL_I2C_MemTxCpltCallback\fP (\fBI2C_HandleTypeDef\fP *hi2c)"
.br
.ti -1c
.RI "void \fBHAL_I2C_MemRxCpltCallback\fP (\fBI2C_HandleTypeDef\fP *hi2c)"
.br
.ti -1c
.RI "void \fBHAL_I2C_ErrorCallback\fP (\fBI2C_HandleTypeDef\fP *hi2c)"
.br
.ti -1c
.RI "void \fBHAL_I2C_AbortCpltCallback\fP (\fBI2C_HandleTypeDef\fP *hi2c)"
.br
.ti -1c
.RI "\fBHAL_I2C_StateTypeDef\fP \fBHAL_I2C_GetState\fP (\fBI2C_HandleTypeDef\fP *hi2c)"
.br
.ti -1c
.RI "\fBHAL_I2C_ModeTypeDef\fP \fBHAL_I2C_GetMode\fP (\fBI2C_HandleTypeDef\fP *hi2c)"
.br
.ti -1c
.RI "uint32_t \fBHAL_I2C_GetError\fP (\fBI2C_HandleTypeDef\fP *hi2c)"
.br
.in -1c
.SH "详细描述"
.PP 
Header file of I2C HAL module\&. 


.PP
\fB作者\fP
.RS 4
MCD Application Team 
.RE
.PP
\fB注意\fP
.RS 4
.RE
.PP
.SS "(C) Copyright (c) 2016 STMicroelectronics\&. All rights reserved\&."
.PP
This software component is licensed by ST under BSD 3-Clause license, the 'License'; You may not use this file except in compliance with the License\&. You may obtain a copy of the License at: opensource\&.org/licenses/BSD-3-Clause 
.PP
在文件 \fBstm32f4xx_hal_i2c\&.h\fP 中定义\&.
.SH "作者"
.PP 
由 Doyxgen 通过分析 STM32F4_HAL 的 源代码自动生成\&.
