.TH "inc/stm32f4xx_ll_cortex.h" 3 "2020年 八月 7日 星期五" "Version 1.24.0" "STM32F4_HAL" \" -*- nroff -*-
.ad l
.nh
.SH NAME
inc/stm32f4xx_ll_cortex.h \- Header file of CORTEX LL module\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'stm32f4xx\&.h'\fP
.br

.SS "宏定义"

.in +1c
.ti -1c
.RI "#define \fBLL_SYSTICK_CLKSOURCE_HCLK_DIV8\fP   0x00000000U"
.br
.ti -1c
.RI "#define \fBLL_SYSTICK_CLKSOURCE_HCLK\fP   SysTick_CTRL_CLKSOURCE_Msk"
.br
.ti -1c
.RI "#define \fBLL_HANDLER_FAULT_USG\fP   SCB_SHCSR_USGFAULTENA_Msk"
.br
.ti -1c
.RI "#define \fBLL_HANDLER_FAULT_BUS\fP   SCB_SHCSR_BUSFAULTENA_Msk"
.br
.ti -1c
.RI "#define \fBLL_HANDLER_FAULT_MEM\fP   SCB_SHCSR_MEMFAULTENA_Msk"
.br
.in -1c
.SS "函数"

.in +1c
.ti -1c
.RI "__STATIC_INLINE uint32_t \fBLL_SYSTICK_IsActiveCounterFlag\fP (void)"
.br
.RI "This function checks if the Systick counter flag is active or not\&. "
.ti -1c
.RI "__STATIC_INLINE void \fBLL_SYSTICK_SetClkSource\fP (uint32_t Source)"
.br
.RI "Configures the SysTick clock source @rmtoll STK_CTRL CLKSOURCE LL_SYSTICK_SetClkSource "
.ti -1c
.RI "__STATIC_INLINE uint32_t \fBLL_SYSTICK_GetClkSource\fP (void)"
.br
.RI "Get the SysTick clock source @rmtoll STK_CTRL CLKSOURCE LL_SYSTICK_GetClkSource "
.ti -1c
.RI "__STATIC_INLINE void \fBLL_SYSTICK_EnableIT\fP (void)"
.br
.RI "Enable SysTick exception request @rmtoll STK_CTRL TICKINT LL_SYSTICK_EnableIT "
.ti -1c
.RI "__STATIC_INLINE void \fBLL_SYSTICK_DisableIT\fP (void)"
.br
.RI "Disable SysTick exception request @rmtoll STK_CTRL TICKINT LL_SYSTICK_DisableIT "
.ti -1c
.RI "__STATIC_INLINE uint32_t \fBLL_SYSTICK_IsEnabledIT\fP (void)"
.br
.RI "Checks if the SYSTICK interrupt is enabled or disabled\&. @rmtoll STK_CTRL TICKINT LL_SYSTICK_IsEnabledIT "
.ti -1c
.RI "__STATIC_INLINE void \fBLL_LPM_EnableSleep\fP (void)"
.br
.RI "Processor uses sleep as its low power mode @rmtoll SCB_SCR SLEEPDEEP LL_LPM_EnableSleep "
.ti -1c
.RI "__STATIC_INLINE void \fBLL_LPM_EnableDeepSleep\fP (void)"
.br
.RI "Processor uses deep sleep as its low power mode @rmtoll SCB_SCR SLEEPDEEP LL_LPM_EnableDeepSleep "
.ti -1c
.RI "__STATIC_INLINE void \fBLL_LPM_EnableSleepOnExit\fP (void)"
.br
.RI "Configures sleep-on-exit when returning from Handler mode to Thread mode\&. "
.ti -1c
.RI "__STATIC_INLINE void \fBLL_LPM_DisableSleepOnExit\fP (void)"
.br
.RI "Do not sleep when returning to Thread mode\&. @rmtoll SCB_SCR SLEEPONEXIT LL_LPM_DisableSleepOnExit "
.ti -1c
.RI "__STATIC_INLINE void \fBLL_LPM_EnableEventOnPend\fP (void)"
.br
.RI "Enabled events and all interrupts, including disabled interrupts, can wakeup the processor\&. @rmtoll SCB_SCR SEVEONPEND LL_LPM_EnableEventOnPend "
.ti -1c
.RI "__STATIC_INLINE void \fBLL_LPM_DisableEventOnPend\fP (void)"
.br
.RI "Only enabled interrupts or events can wakeup the processor, disabled interrupts are excluded @rmtoll SCB_SCR SEVEONPEND LL_LPM_DisableEventOnPend "
.ti -1c
.RI "__STATIC_INLINE void \fBLL_HANDLER_EnableFault\fP (uint32_t Fault)"
.br
.RI "Enable a fault in System handler control register (SHCSR) @rmtoll SCB_SHCSR MEMFAULTENA LL_HANDLER_EnableFault "
.ti -1c
.RI "__STATIC_INLINE void \fBLL_HANDLER_DisableFault\fP (uint32_t Fault)"
.br
.RI "Disable a fault in System handler control register (SHCSR) @rmtoll SCB_SHCSR MEMFAULTENA LL_HANDLER_DisableFault "
.ti -1c
.RI "__STATIC_INLINE uint32_t \fBLL_CPUID_GetImplementer\fP (void)"
.br
.RI "Get Implementer code @rmtoll SCB_CPUID IMPLEMENTER LL_CPUID_GetImplementer "
.ti -1c
.RI "__STATIC_INLINE uint32_t \fBLL_CPUID_GetVariant\fP (void)"
.br
.RI "Get Variant number (The r value in the rnpn product revision identifier) @rmtoll SCB_CPUID VARIANT LL_CPUID_GetVariant "
.ti -1c
.RI "__STATIC_INLINE uint32_t \fBLL_CPUID_GetConstant\fP (void)"
.br
.RI "Get Constant number @rmtoll SCB_CPUID ARCHITECTURE LL_CPUID_GetConstant "
.ti -1c
.RI "__STATIC_INLINE uint32_t \fBLL_CPUID_GetParNo\fP (void)"
.br
.RI "Get Part number @rmtoll SCB_CPUID PARTNO LL_CPUID_GetParNo "
.ti -1c
.RI "__STATIC_INLINE uint32_t \fBLL_CPUID_GetRevision\fP (void)"
.br
.RI "Get Revision number (The p value in the rnpn product revision identifier, indicates patch release) @rmtoll SCB_CPUID REVISION LL_CPUID_GetRevision "
.in -1c
.SH "详细描述"
.PP 
Header file of CORTEX LL module\&. 


.PP
\fB作者\fP
.RS 4
MCD Application Team 
.PP
.nf
==============================================================================
                   ##### How to use this driver #####
==============================================================================
  [..]
  The LL CORTEX driver contains a set of generic APIs that can be
  used by user:
    (+) SYSTICK configuration used by @ref LL_mDelay and @ref LL_Init1msTick
        functions
    (+) Low power mode configuration (SCB register of Cortex-MCU)
    (+) MPU API to configure and enable regions
        (MPU services provided only on some devices)
    (+) API to access to MCU info (CPUID register)
    (+) API to enable fault handler (SHCSR accesses)
.fi
.PP
.RE
.PP
\fB注意\fP
.RS 4
.RE
.PP
.SS "(C) Copyright (c) 2017 STMicroelectronics\&. All rights reserved\&."
.PP
This software component is licensed by ST under BSD 3-Clause license, the 'License'; You may not use this file except in compliance with the License\&. You may obtain a copy of the License at: opensource\&.org/licenses/BSD-3-Clause 
.PP
在文件 \fBstm32f4xx_ll_cortex\&.h\fP 中定义\&.
.SH "作者"
.PP 
由 Doyxgen 通过分析 STM32F4_HAL 的 源代码自动生成\&.
