.TH "RCC_APB1_Peripheral_Clock_Enable_Disable_Status" 3 "2020年 八月 7日 星期五" "Version 1.24.0" "STM32F4_HAL" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RCC_APB1_Peripheral_Clock_Enable_Disable_Status \- Get the enable or disable status of the APB1 peripheral clock\&.  

.SH SYNOPSIS
.br
.PP
.SS "宏定义"

.in +1c
.ti -1c
.RI "#define \fB__HAL_RCC_TIM5_IS_CLK_ENABLED\fP()   ((RCC\->APB1ENR & (RCC_APB1ENR_TIM5EN)) != RESET)"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_WWDG_IS_CLK_ENABLED\fP()   ((RCC\->APB1ENR & (RCC_APB1ENR_WWDGEN)) != RESET)"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_SPI2_IS_CLK_ENABLED\fP()   ((RCC\->APB1ENR & (RCC_APB1ENR_SPI2EN)) != RESET)"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_USART2_IS_CLK_ENABLED\fP()   ((RCC\->APB1ENR & (RCC_APB1ENR_USART2EN)) != RESET)"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_I2C1_IS_CLK_ENABLED\fP()   ((RCC\->APB1ENR & (RCC_APB1ENR_I2C1EN)) != RESET)"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_I2C2_IS_CLK_ENABLED\fP()   ((RCC\->APB1ENR & (RCC_APB1ENR_I2C2EN)) != RESET)"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_PWR_IS_CLK_ENABLED\fP()   ((RCC\->APB1ENR & (RCC_APB1ENR_PWREN)) != RESET)"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_TIM5_IS_CLK_DISABLED\fP()   ((RCC\->APB1ENR & (RCC_APB1ENR_TIM5EN)) == RESET)"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_WWDG_IS_CLK_DISABLED\fP()   ((RCC\->APB1ENR & (RCC_APB1ENR_WWDGEN)) == RESET)"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_SPI2_IS_CLK_DISABLED\fP()   ((RCC\->APB1ENR & (RCC_APB1ENR_SPI2EN)) == RESET)"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_USART2_IS_CLK_DISABLED\fP()   ((RCC\->APB1ENR & (RCC_APB1ENR_USART2EN)) == RESET)"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_I2C1_IS_CLK_DISABLED\fP()   ((RCC\->APB1ENR & (RCC_APB1ENR_I2C1EN)) == RESET)"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_I2C2_IS_CLK_DISABLED\fP()   ((RCC\->APB1ENR & (RCC_APB1ENR_I2C2EN)) == RESET)"
.br
.ti -1c
.RI "#define \fB__HAL_RCC_PWR_IS_CLK_DISABLED\fP()   ((RCC\->APB1ENR & (RCC_APB1ENR_PWREN)) == RESET)"
.br
.in -1c
.SH "详细描述"
.PP 
Get the enable or disable status of the APB1 peripheral clock\&. 


.PP
\fB注解\fP
.RS 4
After reset, the peripheral clock (used for registers read/write access) is disabled and the application software has to enable this clock before using it\&. 
.RE
.PP

.SH "宏定义说明"
.PP 
.SS "#define __HAL_RCC_I2C1_IS_CLK_DISABLED()   ((RCC\->APB1ENR & (RCC_APB1ENR_I2C1EN)) == RESET)"

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 551 行定义\&.
.SS "#define __HAL_RCC_I2C1_IS_CLK_ENABLED()   ((RCC\->APB1ENR & (RCC_APB1ENR_I2C1EN)) != RESET)"

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 543 行定义\&.
.SS "#define __HAL_RCC_I2C2_IS_CLK_DISABLED()   ((RCC\->APB1ENR & (RCC_APB1ENR_I2C2EN)) == RESET)"

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 552 行定义\&.
.SS "#define __HAL_RCC_I2C2_IS_CLK_ENABLED()   ((RCC\->APB1ENR & (RCC_APB1ENR_I2C2EN)) != RESET)"

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 544 行定义\&.
.SS "#define __HAL_RCC_PWR_IS_CLK_DISABLED()   ((RCC\->APB1ENR & (RCC_APB1ENR_PWREN)) == RESET)"

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 553 行定义\&.
.SS "#define __HAL_RCC_PWR_IS_CLK_ENABLED()   ((RCC\->APB1ENR & (RCC_APB1ENR_PWREN)) != RESET)"

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 545 行定义\&.
.SS "#define __HAL_RCC_SPI2_IS_CLK_DISABLED()   ((RCC\->APB1ENR & (RCC_APB1ENR_SPI2EN)) == RESET)"

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 549 行定义\&.
.SS "#define __HAL_RCC_SPI2_IS_CLK_ENABLED()   ((RCC\->APB1ENR & (RCC_APB1ENR_SPI2EN)) != RESET)"

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 541 行定义\&.
.SS "#define __HAL_RCC_TIM5_IS_CLK_DISABLED()   ((RCC\->APB1ENR & (RCC_APB1ENR_TIM5EN)) == RESET)"

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 547 行定义\&.
.SS "#define __HAL_RCC_TIM5_IS_CLK_ENABLED()   ((RCC\->APB1ENR & (RCC_APB1ENR_TIM5EN)) != RESET)"

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 539 行定义\&.
.SS "#define __HAL_RCC_USART2_IS_CLK_DISABLED()   ((RCC\->APB1ENR & (RCC_APB1ENR_USART2EN)) == RESET)"

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 550 行定义\&.
.SS "#define __HAL_RCC_USART2_IS_CLK_ENABLED()   ((RCC\->APB1ENR & (RCC_APB1ENR_USART2EN)) != RESET)"

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 542 行定义\&.
.SS "#define __HAL_RCC_WWDG_IS_CLK_DISABLED()   ((RCC\->APB1ENR & (RCC_APB1ENR_WWDGEN)) == RESET)"

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 548 行定义\&.
.SS "#define __HAL_RCC_WWDG_IS_CLK_ENABLED()   ((RCC\->APB1ENR & (RCC_APB1ENR_WWDGEN)) != RESET)"

.PP
在文件 stm32f4xx_hal_rcc\&.h 第 540 行定义\&.
.SH "作者"
.PP 
由 Doyxgen 通过分析 STM32F4_HAL 的 源代码自动生成\&.
